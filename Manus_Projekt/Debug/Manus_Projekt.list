
Manus_Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbe4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c84  0800fd94  0800fd94  0001fd94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011a18  08011a18  000301b8  2**0
                  CONTENTS
  4 .ARM          00000008  08011a18  08011a18  00021a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011a20  08011a20  000301b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011a20  08011a20  00021a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011a24  08011a24  00021a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b8  20000000  08011a28  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301b8  2**0
                  CONTENTS
 10 .bss          0000a514  200001b8  200001b8  000301b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000a6cc  2000a6cc  000301b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00029bed  00000000  00000000  0003022b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006e45  00000000  00000000  00059e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002408  00000000  00000000  00060c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001b5c  00000000  00000000  00063068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002de73  00000000  00000000  00064bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002ff20  00000000  00000000  00092a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f8afa  00000000  00000000  000c2957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009fdc  00000000  00000000  001bb454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  001c5430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001b8 	.word	0x200001b8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800fd7c 	.word	0x0800fd7c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001bc 	.word	0x200001bc
 80001ec:	0800fd7c 	.word	0x0800fd7c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <CS_START>:

#define WHOAMI_DEFAULT_VALUE 0x44
#define CTRL1_WANTED_VALUE 0b01000100
#define CTRL5_WANTED_VALUE 0b00000001

void CS_START(){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ACC_CS_GPIO_Port, ACC_CS_Pin, GPIO_PIN_RESET); //CS
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2120      	movs	r1, #32
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <CS_START+0x14>)
 8000eae:	f003 fefd 	bl	8004cac <HAL_GPIO_WritePin>
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40020000 	.word	0x40020000

08000ebc <CS_END>:

void CS_END(){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ACC_CS_GPIO_Port, ACC_CS_Pin, GPIO_PIN_SET); //CS
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2120      	movs	r1, #32
 8000ec4:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <CS_END+0x14>)
 8000ec6:	f003 fef1 	bl	8004cac <HAL_GPIO_WritePin>
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40020000 	.word	0x40020000

08000ed4 <Acc_Init>:
    }
    CS_END(); // Kasuta ja implementeeri, kui puudub riistvaraline CS
    return pRxData[1] == WHOAMI_DEFAULT_VALUE;
}

uint8_t Acc_Init(){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af02      	add	r7, sp, #8
	// CTRL1
	uint8_t pTxData[2] = {WRITE_SLAVE_OPERATION | CTRL1, CTRL1_WANTED_VALUE};
 8000eda:	f244 4320 	movw	r3, #17440	; 0x4420
 8000ede:	82bb      	strh	r3, [r7, #20]
	uint8_t pRxData[2] = {0, 0};
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	823b      	strh	r3, [r7, #16]
	CS_START();
 8000ee4:	f7ff ffde 	bl	8000ea4 <CS_START>
	if (HAL_SPI_TransmitReceive(&hspi4, pTxData, pRxData, 2, HAL_MAX_DELAY) != HAL_OK) {
 8000ee8:	f107 0210 	add.w	r2, r7, #16
 8000eec:	f107 0114 	add.w	r1, r7, #20
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	4830      	ldr	r0, [pc, #192]	; (8000fbc <Acc_Init+0xe8>)
 8000efa:	f006 ff04 	bl	8007d06 <HAL_SPI_TransmitReceive>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d005      	beq.n	8000f10 <Acc_Init+0x3c>
		LED_Red_Write(1);
 8000f04:	2201      	movs	r2, #1
 8000f06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f0a:	482d      	ldr	r0, [pc, #180]	; (8000fc0 <Acc_Init+0xec>)
 8000f0c:	f003 fece 	bl	8004cac <HAL_GPIO_WritePin>
	}
	CS_END();
 8000f10:	f7ff ffd4 	bl	8000ebc <CS_END>


	// CTRL3
	pTxData[0] = (WRITE_SLAVE_OPERATION | CTRL5);
 8000f14:	2324      	movs	r3, #36	; 0x24
 8000f16:	753b      	strb	r3, [r7, #20]
	pTxData[1] = CTRL5_WANTED_VALUE;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	757b      	strb	r3, [r7, #21]
	pRxData[0] = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	743b      	strb	r3, [r7, #16]
	pRxData[1] = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	747b      	strb	r3, [r7, #17]
	CS_START();
 8000f24:	f7ff ffbe 	bl	8000ea4 <CS_START>
	if (HAL_SPI_TransmitReceive(&hspi4, pTxData, pRxData, 2, HAL_MAX_DELAY) != HAL_OK) {
 8000f28:	f107 0210 	add.w	r2, r7, #16
 8000f2c:	f107 0114 	add.w	r1, r7, #20
 8000f30:	f04f 33ff 	mov.w	r3, #4294967295
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	2302      	movs	r3, #2
 8000f38:	4820      	ldr	r0, [pc, #128]	; (8000fbc <Acc_Init+0xe8>)
 8000f3a:	f006 fee4 	bl	8007d06 <HAL_SPI_TransmitReceive>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d005      	beq.n	8000f50 <Acc_Init+0x7c>
		LED_Red_Write(1);
 8000f44:	2201      	movs	r2, #1
 8000f46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f4a:	481d      	ldr	r0, [pc, #116]	; (8000fc0 <Acc_Init+0xec>)
 8000f4c:	f003 feae 	bl	8004cac <HAL_GPIO_WritePin>
	}
	CS_END();
 8000f50:	f7ff ffb4 	bl	8000ebc <CS_END>


	// Kontroll
	uint8_t pTxData2[6] = {READ_SLAVE_OPERATION | CTRL1, 0, 0, 0, 0, 0};
 8000f54:	4a1b      	ldr	r2, [pc, #108]	; (8000fc4 <Acc_Init+0xf0>)
 8000f56:	f107 0308 	add.w	r3, r7, #8
 8000f5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f5e:	6018      	str	r0, [r3, #0]
 8000f60:	3304      	adds	r3, #4
 8000f62:	8019      	strh	r1, [r3, #0]
	uint8_t pRxData2[6] = {0, 0, 0, 0, 0, 0};
 8000f64:	4a18      	ldr	r2, [pc, #96]	; (8000fc8 <Acc_Init+0xf4>)
 8000f66:	463b      	mov	r3, r7
 8000f68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f6c:	6018      	str	r0, [r3, #0]
 8000f6e:	3304      	adds	r3, #4
 8000f70:	8019      	strh	r1, [r3, #0]

	CS_START();
 8000f72:	f7ff ff97 	bl	8000ea4 <CS_START>
	if (HAL_SPI_TransmitReceive(&hspi4, pTxData2, pRxData2, 6, HAL_MAX_DELAY) != HAL_OK) {
 8000f76:	463a      	mov	r2, r7
 8000f78:	f107 0108 	add.w	r1, r7, #8
 8000f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2306      	movs	r3, #6
 8000f84:	480d      	ldr	r0, [pc, #52]	; (8000fbc <Acc_Init+0xe8>)
 8000f86:	f006 febe 	bl	8007d06 <HAL_SPI_TransmitReceive>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d005      	beq.n	8000f9c <Acc_Init+0xc8>
		LED_Red_Write(1);
 8000f90:	2201      	movs	r2, #1
 8000f92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f96:	480a      	ldr	r0, [pc, #40]	; (8000fc0 <Acc_Init+0xec>)
 8000f98:	f003 fe88 	bl	8004cac <HAL_GPIO_WritePin>
	}
	CS_END();
 8000f9c:	f7ff ff8e 	bl	8000ebc <CS_END>
	return pRxData2[1] == CTRL1_WANTED_VALUE && pRxData2[5] == CTRL5_WANTED_VALUE;
 8000fa0:	787b      	ldrb	r3, [r7, #1]
 8000fa2:	2b44      	cmp	r3, #68	; 0x44
 8000fa4:	d104      	bne.n	8000fb0 <Acc_Init+0xdc>
 8000fa6:	797b      	ldrb	r3, [r7, #5]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d101      	bne.n	8000fb0 <Acc_Init+0xdc>
 8000fac:	2301      	movs	r3, #1
 8000fae:	e000      	b.n	8000fb2 <Acc_Init+0xde>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	b2db      	uxtb	r3, r3
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000524 	.word	0x20000524
 8000fc0:	40021800 	.word	0x40021800
 8000fc4:	0800fd94 	.word	0x0800fd94
 8000fc8:	0800fd9c 	.word	0x0800fd9c

08000fcc <Acc_HasData>:

uint8_t Acc_HasData(){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(ACC_IN2_GPIO_Port,ACC_IN2_Pin);
 8000fd0:	2140      	movs	r1, #64	; 0x40
 8000fd2:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <Acc_HasData+0x14>)
 8000fd4:	f003 fe52 	bl	8004c7c <HAL_GPIO_ReadPin>
 8000fd8:	4603      	mov	r3, r0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40021400 	.word	0x40021400

08000fe4 <Acc_ReadXYZ>:

void Acc_ReadXYZ(acc_data *xyz){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	6078      	str	r0, [r7, #4]
	uint8_t pTxData[7] = {READ_SLAVE_OPERATION | DATA, 0, 0, 0, 0, 0, 0};
 8000fec:	4a27      	ldr	r2, [pc, #156]	; (800108c <Acc_ReadXYZ+0xa8>)
 8000fee:	f107 0310 	add.w	r3, r7, #16
 8000ff2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ff6:	6018      	str	r0, [r3, #0]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	8019      	strh	r1, [r3, #0]
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	0c0a      	lsrs	r2, r1, #16
 8001000:	701a      	strb	r2, [r3, #0]
	uint8_t pRxData[7] = {0, 0, 0, 0, 0, 0, 0};
 8001002:	4a23      	ldr	r2, [pc, #140]	; (8001090 <Acc_ReadXYZ+0xac>)
 8001004:	f107 0308 	add.w	r3, r7, #8
 8001008:	e892 0003 	ldmia.w	r2, {r0, r1}
 800100c:	6018      	str	r0, [r3, #0]
 800100e:	3304      	adds	r3, #4
 8001010:	8019      	strh	r1, [r3, #0]
 8001012:	3302      	adds	r3, #2
 8001014:	0c0a      	lsrs	r2, r1, #16
 8001016:	701a      	strb	r2, [r3, #0]
	CS_START();
 8001018:	f7ff ff44 	bl	8000ea4 <CS_START>
	if (HAL_SPI_TransmitReceive(&hspi4, pTxData, pRxData, 7, HAL_MAX_DELAY) != HAL_OK) {
 800101c:	f107 0208 	add.w	r2, r7, #8
 8001020:	f107 0110 	add.w	r1, r7, #16
 8001024:	f04f 33ff 	mov.w	r3, #4294967295
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2307      	movs	r3, #7
 800102c:	4819      	ldr	r0, [pc, #100]	; (8001094 <Acc_ReadXYZ+0xb0>)
 800102e:	f006 fe6a 	bl	8007d06 <HAL_SPI_TransmitReceive>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d005      	beq.n	8001044 <Acc_ReadXYZ+0x60>
		LED_Red_Write(1);
 8001038:	2201      	movs	r2, #1
 800103a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800103e:	4816      	ldr	r0, [pc, #88]	; (8001098 <Acc_ReadXYZ+0xb4>)
 8001040:	f003 fe34 	bl	8004cac <HAL_GPIO_WritePin>
	}
	CS_END();
 8001044:	f7ff ff3a 	bl	8000ebc <CS_END>
	xyz->x = (pRxData[2] << 8) | pRxData[1];
 8001048:	7abb      	ldrb	r3, [r7, #10]
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	b21a      	sxth	r2, r3
 800104e:	7a7b      	ldrb	r3, [r7, #9]
 8001050:	b21b      	sxth	r3, r3
 8001052:	4313      	orrs	r3, r2
 8001054:	b21b      	sxth	r3, r3
 8001056:	b29a      	uxth	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	801a      	strh	r2, [r3, #0]
	xyz->y = (pRxData[4] << 8) | pRxData[3];
 800105c:	7b3b      	ldrb	r3, [r7, #12]
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	b21a      	sxth	r2, r3
 8001062:	7afb      	ldrb	r3, [r7, #11]
 8001064:	b21b      	sxth	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	b21b      	sxth	r3, r3
 800106a:	b29a      	uxth	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	805a      	strh	r2, [r3, #2]
	xyz->z = (pRxData[6] << 8) | pRxData[5];
 8001070:	7bbb      	ldrb	r3, [r7, #14]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	b21a      	sxth	r2, r3
 8001076:	7b7b      	ldrb	r3, [r7, #13]
 8001078:	b21b      	sxth	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	b21b      	sxth	r3, r3
 800107e:	b29a      	uxth	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	809a      	strh	r2, [r3, #4]
}
 8001084:	bf00      	nop
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	0800fda4 	.word	0x0800fda4
 8001090:	0800fdac 	.word	0x0800fdac
 8001094:	20000524 	.word	0x20000524
 8001098:	40021800 	.word	0x40021800

0800109c <Acc_ReadXY>:

void Acc_ReadXY(acc_data_xy *xy){
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af02      	add	r7, sp, #8
 80010a2:	6078      	str	r0, [r7, #4]
	uint8_t pTxData[5] = {READ_SLAVE_OPERATION | DATA, 0, 0, 0, 0};
 80010a4:	4a1f      	ldr	r2, [pc, #124]	; (8001124 <Acc_ReadXY+0x88>)
 80010a6:	f107 0310 	add.w	r3, r7, #16
 80010aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010ae:	6018      	str	r0, [r3, #0]
 80010b0:	3304      	adds	r3, #4
 80010b2:	7019      	strb	r1, [r3, #0]
	uint8_t pRxData[5] = {0, 0, 0, 0, 0};
 80010b4:	4a1c      	ldr	r2, [pc, #112]	; (8001128 <Acc_ReadXY+0x8c>)
 80010b6:	f107 0308 	add.w	r3, r7, #8
 80010ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010be:	6018      	str	r0, [r3, #0]
 80010c0:	3304      	adds	r3, #4
 80010c2:	7019      	strb	r1, [r3, #0]
	CS_START();
 80010c4:	f7ff feee 	bl	8000ea4 <CS_START>
	if (HAL_SPI_TransmitReceive(&hspi4, pTxData, pRxData, 7, HAL_MAX_DELAY) != HAL_OK) {
 80010c8:	f107 0208 	add.w	r2, r7, #8
 80010cc:	f107 0110 	add.w	r1, r7, #16
 80010d0:	f04f 33ff 	mov.w	r3, #4294967295
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2307      	movs	r3, #7
 80010d8:	4814      	ldr	r0, [pc, #80]	; (800112c <Acc_ReadXY+0x90>)
 80010da:	f006 fe14 	bl	8007d06 <HAL_SPI_TransmitReceive>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d005      	beq.n	80010f0 <Acc_ReadXY+0x54>
		LED_Red_Write(1);
 80010e4:	2201      	movs	r2, #1
 80010e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ea:	4811      	ldr	r0, [pc, #68]	; (8001130 <Acc_ReadXY+0x94>)
 80010ec:	f003 fdde 	bl	8004cac <HAL_GPIO_WritePin>
	}
	CS_END();
 80010f0:	f7ff fee4 	bl	8000ebc <CS_END>
	xy->x = (pRxData[2] << 8) | pRxData[1];
 80010f4:	7abb      	ldrb	r3, [r7, #10]
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	b21a      	sxth	r2, r3
 80010fa:	7a7b      	ldrb	r3, [r7, #9]
 80010fc:	b21b      	sxth	r3, r3
 80010fe:	4313      	orrs	r3, r2
 8001100:	b21b      	sxth	r3, r3
 8001102:	b29a      	uxth	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	801a      	strh	r2, [r3, #0]
	xy->y = (pRxData[4] << 8) | pRxData[3];
 8001108:	7b3b      	ldrb	r3, [r7, #12]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	b21a      	sxth	r2, r3
 800110e:	7afb      	ldrb	r3, [r7, #11]
 8001110:	b21b      	sxth	r3, r3
 8001112:	4313      	orrs	r3, r2
 8001114:	b21b      	sxth	r3, r3
 8001116:	b29a      	uxth	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	805a      	strh	r2, [r3, #2]
}
 800111c:	bf00      	nop
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	0800fdb4 	.word	0x0800fdb4
 8001128:	0800fdbc 	.word	0x0800fdbc
 800112c:	20000524 	.word	0x20000524
 8001130:	40021800 	.word	0x40021800

08001134 <pointInit>:
#include "stdio.h"
#include "stdlib.h"
#include "points.h"
#include "math.h"

void pointInit(){
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	srand(HAL_GetTick());
 8001138:	f002 fc7c 	bl	8003a34 <HAL_GetTick>
 800113c:	4603      	mov	r3, r0
 800113e:	4618      	mov	r0, r3
 8001140:	f00d fcf4 	bl	800eb2c <srand>
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}

08001148 <randPoint>:


//https://stackoverflow.com/questions/822323/how-to-generate-a-random-int-in-c
point randPoint(){
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
	point p;
	p.x=((rand()*HAL_GetTick())%220)+10; // int vahemikus 10 kuni 230
 800114e:	f00d fd1b 	bl	800eb88 <rand>
 8001152:	4603      	mov	r3, r0
 8001154:	461c      	mov	r4, r3
 8001156:	f002 fc6d 	bl	8003a34 <HAL_GetTick>
 800115a:	4603      	mov	r3, r0
 800115c:	fb03 f204 	mul.w	r2, r3, r4
 8001160:	0893      	lsrs	r3, r2, #2
 8001162:	4917      	ldr	r1, [pc, #92]	; (80011c0 <randPoint+0x78>)
 8001164:	fba1 1303 	umull	r1, r3, r1, r3
 8001168:	085b      	lsrs	r3, r3, #1
 800116a:	21dc      	movs	r1, #220	; 0xdc
 800116c:	fb01 f303 	mul.w	r3, r1, r3
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	b29b      	uxth	r3, r3
 8001174:	330a      	adds	r3, #10
 8001176:	b29b      	uxth	r3, r3
 8001178:	803b      	strh	r3, [r7, #0]
	p.y=((rand()*HAL_GetTick())%300)+10;
 800117a:	f00d fd05 	bl	800eb88 <rand>
 800117e:	4603      	mov	r3, r0
 8001180:	461c      	mov	r4, r3
 8001182:	f002 fc57 	bl	8003a34 <HAL_GetTick>
 8001186:	4603      	mov	r3, r0
 8001188:	fb03 f204 	mul.w	r2, r3, r4
 800118c:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <randPoint+0x7c>)
 800118e:	fba3 1302 	umull	r1, r3, r3, r2
 8001192:	095b      	lsrs	r3, r3, #5
 8001194:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001198:	fb01 f303 	mul.w	r3, r1, r3
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	b29b      	uxth	r3, r3
 80011a0:	330a      	adds	r3, #10
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	807b      	strh	r3, [r7, #2]
	return p;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	2300      	movs	r3, #0
 80011ac:	88ba      	ldrh	r2, [r7, #4]
 80011ae:	f362 030f 	bfi	r3, r2, #0, #16
 80011b2:	88fa      	ldrh	r2, [r7, #6]
 80011b4:	f362 431f 	bfi	r3, r2, #16, #16
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd90      	pop	{r4, r7, pc}
 80011c0:	094f2095 	.word	0x094f2095
 80011c4:	1b4e81b5 	.word	0x1b4e81b5

080011c8 <dist>:
uint16_t y(uint16_t x, point p1, point p2){
	return (p2.y-p1.y)/(p2.x-p1.x)*(x-p2.x)+p1.y;
}

//https://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment
uint16_t dist(point p1, point p2, point p){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08e      	sub	sp, #56	; 0x38
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
	float px=p2.x-p1.x;
 80011d4:	893b      	ldrh	r3, [r7, #8]
 80011d6:	461a      	mov	r2, r3
 80011d8:	89bb      	ldrh	r3, [r7, #12]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	ee07 3a90 	vmov	s15, r3
 80011e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float py=p2.y-p1.y;
 80011e8:	897b      	ldrh	r3, [r7, #10]
 80011ea:	461a      	mov	r2, r3
 80011ec:	89fb      	ldrh	r3, [r7, #14]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	ee07 3a90 	vmov	s15, r3
 80011f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011f8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float temp=(px*px)+(py*py);
 80011fc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001200:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001204:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001208:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800120c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001210:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float u=((p.x - p1.x) * px + (p.y - p1.y) * py) / (temp);
 8001214:	88bb      	ldrh	r3, [r7, #4]
 8001216:	461a      	mov	r2, r3
 8001218:	89bb      	ldrh	r3, [r7, #12]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001224:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001228:	ee27 7a27 	vmul.f32	s14, s14, s15
 800122c:	88fb      	ldrh	r3, [r7, #6]
 800122e:	461a      	mov	r2, r3
 8001230:	89fb      	ldrh	r3, [r7, #14]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	ee07 3a90 	vmov	s15, r3
 8001238:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800123c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001240:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001244:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001248:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800124c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001250:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	if(u>1){
 8001254:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001258:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800125c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001264:	dd03      	ble.n	800126e <dist+0xa6>
		u=1;
 8001266:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800126a:	637b      	str	r3, [r7, #52]	; 0x34
 800126c:	e009      	b.n	8001282 <dist+0xba>
	}
	else if(u<0){
 800126e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001272:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	d502      	bpl.n	8001282 <dist+0xba>
		u=0;
 800127c:	f04f 0300 	mov.w	r3, #0
 8001280:	637b      	str	r3, [r7, #52]	; 0x34
	}
	float x = p1.x + u * px;
 8001282:	89bb      	ldrh	r3, [r7, #12]
 8001284:	ee07 3a90 	vmov	s15, r3
 8001288:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800128c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001290:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001294:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800129c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float y = p1.y + u * py;
 80012a0:	89fb      	ldrh	r3, [r7, #14]
 80012a2:	ee07 3a90 	vmov	s15, r3
 80012a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012aa:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80012ae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80012b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ba:	edc7 7a08 	vstr	s15, [r7, #32]

	float dx = x - p.x;
 80012be:	88bb      	ldrh	r3, [r7, #4]
 80012c0:	ee07 3a90 	vmov	s15, r3
 80012c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80012cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d0:	edc7 7a07 	vstr	s15, [r7, #28]
	float dy = y - p.y;
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	ee07 3a90 	vmov	s15, r3
 80012da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012de:	ed97 7a08 	vldr	s14, [r7, #32]
 80012e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012e6:	edc7 7a06 	vstr	s15, [r7, #24]
	double dist = sqrt(dx*dx + dy*dy);
 80012ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80012ee:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80012f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80012f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fe:	ee17 0a90 	vmov	r0, s15
 8001302:	f7ff f929 	bl	8000558 <__aeabi_f2d>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	ec43 2b10 	vmov	d0, r2, r3
 800130e:	f00e fc2f 	bl	800fb70 <sqrt>
 8001312:	ed87 0b04 	vstr	d0, [r7, #16]
	return (uint16_t)dist;
 8001316:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800131a:	f7ff fc25 	bl	8000b68 <__aeabi_d2uiz>
 800131e:	4603      	mov	r3, r0
 8001320:	b29b      	uxth	r3, r3
//	  }
//
//	  float dx = p.x - xx;
//	  float dy = p.y - yy;
//	  return (uint16_t) sqrt(dx * dx + dy * dy);
}
 8001322:	4618      	mov	r0, r3
 8001324:	3738      	adds	r7, #56	; 0x38
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_DMA2D_MspInit>:
  /* USER CODE END DMA2D_Init 2 */

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <HAL_DMA2D_MspInit+0x48>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d115      	bne.n	800136a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <HAL_DMA2D_MspInit+0x4c>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a0c      	ldr	r2, [pc, #48]	; (8001378 <HAL_DMA2D_MspInit+0x4c>)
 8001348:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <HAL_DMA2D_MspInit+0x4c>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2105      	movs	r1, #5
 800135e:	205a      	movs	r0, #90	; 0x5a
 8001360:	f002 fc50 	bl	8003c04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001364:	205a      	movs	r0, #90	; 0x5a
 8001366:	f002 fc69 	bl	8003c3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	4002b000 	.word	0x4002b000
 8001378:	40023800 	.word	0x40023800

0800137c <HAL_FMC_MspInit>:
  /* USER CODE END FMC_Init 2 */
}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001390:	4b3b      	ldr	r3, [pc, #236]	; (8001480 <HAL_FMC_MspInit+0x104>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d16f      	bne.n	8001478 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001398:	4b39      	ldr	r3, [pc, #228]	; (8001480 <HAL_FMC_MspInit+0x104>)
 800139a:	2201      	movs	r2, #1
 800139c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	4b38      	ldr	r3, [pc, #224]	; (8001484 <HAL_FMC_MspInit+0x108>)
 80013a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013a6:	4a37      	ldr	r2, [pc, #220]	; (8001484 <HAL_FMC_MspInit+0x108>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6393      	str	r3, [r2, #56]	; 0x38
 80013ae:	4b35      	ldr	r3, [pc, #212]	; (8001484 <HAL_FMC_MspInit+0x108>)
 80013b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80013ba:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80013be:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c8:	2303      	movs	r3, #3
 80013ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013cc:	230c      	movs	r3, #12
 80013ce:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4619      	mov	r1, r3
 80013d4:	482c      	ldr	r0, [pc, #176]	; (8001488 <HAL_FMC_MspInit+0x10c>)
 80013d6:	f003 f999 	bl	800470c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80013da:	2301      	movs	r3, #1
 80013dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e6:	2303      	movs	r3, #3
 80013e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013ea:	230c      	movs	r3, #12
 80013ec:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	4619      	mov	r1, r3
 80013f2:	4826      	ldr	r0, [pc, #152]	; (800148c <HAL_FMC_MspInit+0x110>)
 80013f4:	f003 f98a 	bl	800470c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80013f8:	f248 1333 	movw	r3, #33075	; 0x8133
 80013fc:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001406:	2303      	movs	r3, #3
 8001408:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800140a:	230c      	movs	r3, #12
 800140c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	4619      	mov	r1, r3
 8001412:	481f      	ldr	r0, [pc, #124]	; (8001490 <HAL_FMC_MspInit+0x114>)
 8001414:	f003 f97a 	bl	800470c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001418:	f64f 7383 	movw	r3, #65411	; 0xff83
 800141c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001426:	2303      	movs	r3, #3
 8001428:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800142a:	230c      	movs	r3, #12
 800142c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	4619      	mov	r1, r3
 8001432:	4818      	ldr	r0, [pc, #96]	; (8001494 <HAL_FMC_MspInit+0x118>)
 8001434:	f003 f96a 	bl	800470c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001438:	f24c 7303 	movw	r3, #50947	; 0xc703
 800143c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001446:	2303      	movs	r3, #3
 8001448:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800144a:	230c      	movs	r3, #12
 800144c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	4619      	mov	r1, r3
 8001452:	4811      	ldr	r0, [pc, #68]	; (8001498 <HAL_FMC_MspInit+0x11c>)
 8001454:	f003 f95a 	bl	800470c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001458:	2360      	movs	r3, #96	; 0x60
 800145a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001464:	2303      	movs	r3, #3
 8001466:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001468:	230c      	movs	r3, #12
 800146a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	4619      	mov	r1, r3
 8001470:	480a      	ldr	r0, [pc, #40]	; (800149c <HAL_FMC_MspInit+0x120>)
 8001472:	f003 f94b 	bl	800470c <HAL_GPIO_Init>
 8001476:	e000      	b.n	800147a <HAL_FMC_MspInit+0xfe>
    return;
 8001478:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000214 	.word	0x20000214
 8001484:	40023800 	.word	0x40023800
 8001488:	40021400 	.word	0x40021400
 800148c:	40020800 	.word	0x40020800
 8001490:	40021800 	.word	0x40021800
 8001494:	40021000 	.word	0x40021000
 8001498:	40020c00 	.word	0x40020c00
 800149c:	40020400 	.word	0x40020400

080014a0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80014a8:	f7ff ff68 	bl	800137c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4a07      	ldr	r2, [pc, #28]	; (8001514 <vApplicationGetIdleTaskMemory+0x2c>)
 80014f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	4a06      	ldr	r2, [pc, #24]	; (8001518 <vApplicationGetIdleTaskMemory+0x30>)
 80014fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2280      	movs	r2, #128	; 0x80
 8001504:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001506:	bf00      	nop
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000224 	.word	0x20000224
 8001518:	2000027c 	.word	0x2000027c

0800151c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800151c:	b5b0      	push	{r4, r5, r7, lr}
 800151e:	b090      	sub	sp, #64	; 0x40
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of Data_mutex */
  osMutexDef(Data_mutex);
 8001522:	2300      	movs	r3, #0
 8001524:	63bb      	str	r3, [r7, #56]	; 0x38
 8001526:	2300      	movs	r3, #0
 8001528:	63fb      	str	r3, [r7, #60]	; 0x3c
  Data_mutexHandle = osMutexCreate(osMutex(Data_mutex));
 800152a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800152e:	4618      	mov	r0, r3
 8001530:	f00a fed7 	bl	800c2e2 <osMutexCreate>
 8001534:	4603      	mov	r3, r0
 8001536:	4a15      	ldr	r2, [pc, #84]	; (800158c <MX_FREERTOS_Init+0x70>)
 8001538:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <MX_FREERTOS_Init+0x74>)
 800153c:	f107 041c 	add.w	r4, r7, #28
 8001540:	461d      	mov	r5, r3
 8001542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001546:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800154a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f00a fe64 	bl	800c222 <osThreadCreate>
 800155a:	4603      	mov	r3, r0
 800155c:	4a0d      	ldr	r2, [pc, #52]	; (8001594 <MX_FREERTOS_Init+0x78>)
 800155e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Display */
  osThreadDef(Display, DisplayTask, osPriorityIdle, 0, 1024);
 8001560:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <MX_FREERTOS_Init+0x7c>)
 8001562:	463c      	mov	r4, r7
 8001564:	461d      	mov	r5, r3
 8001566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001568:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800156a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800156e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DisplayHandle = osThreadCreate(osThread(Display), NULL);
 8001572:	463b      	mov	r3, r7
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f00a fe53 	bl	800c222 <osThreadCreate>
 800157c:	4603      	mov	r3, r0
 800157e:	4a07      	ldr	r2, [pc, #28]	; (800159c <MX_FREERTOS_Init+0x80>)
 8001580:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001582:	bf00      	nop
 8001584:	3740      	adds	r7, #64	; 0x40
 8001586:	46bd      	mov	sp, r7
 8001588:	bdb0      	pop	{r4, r5, r7, pc}
 800158a:	bf00      	nop
 800158c:	20000220 	.word	0x20000220
 8001590:	0800fdd0 	.word	0x0800fdd0
 8001594:	20000218 	.word	0x20000218
 8001598:	0800fdf4 	.word	0x0800fdf4
 800159c:	2000021c 	.word	0x2000021c

080015a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80015a8:	f00c fdbc 	bl	800e124 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  pointInit();
 80015ac:	f7ff fdc2 	bl	8001134 <pointInit>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80015b0:	2001      	movs	r0, #1
 80015b2:	f00a fe82 	bl	800c2ba <osDelay>
 80015b6:	e7fb      	b.n	80015b0 <StartDefaultTask+0x10>

080015b8 <DisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DisplayTask */
void DisplayTask(void const * argument)
{
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b08d      	sub	sp, #52	; 0x34
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DisplayTask */
  /* Infinite loop */
  if (Acc_Init()){
 80015c0:	f7ff fc88 	bl	8000ed4 <Acc_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d005      	beq.n	80015d6 <DisplayTask+0x1e>
	  LED_Green_Write(1);
 80015ca:	2201      	movs	r2, #1
 80015cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015d0:	48a4      	ldr	r0, [pc, #656]	; (8001864 <DisplayTask+0x2ac>)
 80015d2:	f003 fb6b 	bl	8004cac <HAL_GPIO_WritePin>
  }
  // Pall
  point pall;
  point pall_vana;
  pall.x=120;
 80015d6:	2378      	movs	r3, #120	; 0x78
 80015d8:	843b      	strh	r3, [r7, #32]
  pall.y=160;
 80015da:	23a0      	movs	r3, #160	; 0xa0
 80015dc:	847b      	strh	r3, [r7, #34]	; 0x22
  uint8_t x_suund = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t y_suund = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  // Auk
  point auk;
  // Takistus
  point p1;
  point p2;
  uint8_t sein=0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t paksus=5;
 80015f0:	2305      	movs	r3, #5
 80015f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  // Mäng
  uint8_t reset = 1;
 80015f6:	2301      	movs	r3, #1
 80015f8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint32_t colorbackup = BSP_LCD_GetTextColor();
 80015fc:	f001 fb5c 	bl	8002cb8 <BSP_LCD_GetTextColor>
 8001600:	6278      	str	r0, [r7, #36]	; 0x24
  for(;;)
  {
	  if (Acc_HasData()){
 8001602:	f7ff fce3 	bl	8000fcc <Acc_HasData>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	f000 8127 	beq.w	800185c <DisplayTask+0x2a4>
		// Loe andmed
		Acc_ReadXY(&data);
 800160e:	f107 0318 	add.w	r3, r7, #24
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fd42 	bl	800109c <Acc_ReadXY>

		// Random asukohad
		if (reset){
 8001618:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800161c:	2b00      	cmp	r3, #0
 800161e:	d024      	beq.n	800166a <DisplayTask+0xb2>
			auk = randPoint();
 8001620:	f7ff fd92 	bl	8001148 <randPoint>
 8001624:	4603      	mov	r3, r0
 8001626:	617b      	str	r3, [r7, #20]
			p1 = randPoint();
 8001628:	f7ff fd8e 	bl	8001148 <randPoint>
 800162c:	4603      	mov	r3, r0
 800162e:	613b      	str	r3, [r7, #16]
			p2 = randPoint();
 8001630:	f7ff fd8a 	bl	8001148 <randPoint>
 8001634:	4603      	mov	r3, r0
 8001636:	60fb      	str	r3, [r7, #12]
			reset=0;
 8001638:	2300      	movs	r3, #0
 800163a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

			// Tühjenda ekraan
			BSP_LCD_SetTextColor(BSP_LCD_GetBackColor());
 800163e:	f001 fb4f 	bl	8002ce0 <BSP_LCD_GetBackColor>
 8001642:	4603      	mov	r3, r0
 8001644:	4618      	mov	r0, r3
 8001646:	f001 fb61 	bl	8002d0c <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800164a:	f001 faa9 	bl	8002ba0 <BSP_LCD_GetXSize>
 800164e:	4603      	mov	r3, r0
 8001650:	b29c      	uxth	r4, r3
 8001652:	f001 fab1 	bl	8002bb8 <BSP_LCD_GetYSize>
 8001656:	4603      	mov	r3, r0
 8001658:	b29b      	uxth	r3, r3
 800165a:	4622      	mov	r2, r4
 800165c:	2100      	movs	r1, #0
 800165e:	2000      	movs	r0, #0
 8001660:	f001 fdba 	bl	80031d8 <BSP_LCD_FillRect>
			BSP_LCD_SetTextColor(colorbackup);
 8001664:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001666:	f001 fb51 	bl	8002d0c <BSP_LCD_SetTextColor>
		}

		// Salvesta vana palli asukoht
		pall_vana.x=pall.x;
 800166a:	8c3b      	ldrh	r3, [r7, #32]
 800166c:	83bb      	strh	r3, [r7, #28]
		pall_vana.y=pall.y;
 800166e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001670:	83fb      	strh	r3, [r7, #30]

		// Arvuta asukoht
		if (data.y>32767){
 8001672:	8b7b      	ldrh	r3, [r7, #26]
 8001674:	b21b      	sxth	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	da21      	bge.n	80016be <DisplayTask+0x106>
			x_suund=(65535-data.y)/200;
 800167a:	8b7b      	ldrh	r3, [r7, #26]
 800167c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001680:	33ff      	adds	r3, #255	; 0xff
 8001682:	4a79      	ldr	r2, [pc, #484]	; (8001868 <DisplayTask+0x2b0>)
 8001684:	fb82 1203 	smull	r1, r2, r2, r3
 8001688:	1192      	asrs	r2, r2, #6
 800168a:	17db      	asrs	r3, r3, #31
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (sein && x_suund>paksus) x_suund = paksus;
 8001692:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001696:	2b00      	cmp	r3, #0
 8001698:	d009      	beq.n	80016ae <DisplayTask+0xf6>
 800169a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800169e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d903      	bls.n	80016ae <DisplayTask+0xf6>
 80016a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80016aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			pall.x-=x_suund;
 80016ae:	8c3a      	ldrh	r2, [r7, #32]
 80016b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	843b      	strh	r3, [r7, #32]
 80016bc:	e01c      	b.n	80016f8 <DisplayTask+0x140>
		}else{
			x_suund=data.y/200;
 80016be:	8b7b      	ldrh	r3, [r7, #26]
 80016c0:	4a69      	ldr	r2, [pc, #420]	; (8001868 <DisplayTask+0x2b0>)
 80016c2:	fba2 2303 	umull	r2, r3, r2, r3
 80016c6:	099b      	lsrs	r3, r3, #6
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (sein && x_suund>paksus) x_suund = paksus;
 80016ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d009      	beq.n	80016ea <DisplayTask+0x132>
 80016d6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80016da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80016de:	429a      	cmp	r2, r3
 80016e0:	d903      	bls.n	80016ea <DisplayTask+0x132>
 80016e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80016e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			pall.x+=x_suund;
 80016ea:	8c3a      	ldrh	r2, [r7, #32]
 80016ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	4413      	add	r3, r2
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	843b      	strh	r3, [r7, #32]
		}

		if (data.x>32767){
 80016f8:	8b3b      	ldrh	r3, [r7, #24]
 80016fa:	b21b      	sxth	r3, r3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	da21      	bge.n	8001744 <DisplayTask+0x18c>
			y_suund=(65535-data.x)/200;
 8001700:	8b3b      	ldrh	r3, [r7, #24]
 8001702:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001706:	33ff      	adds	r3, #255	; 0xff
 8001708:	4a57      	ldr	r2, [pc, #348]	; (8001868 <DisplayTask+0x2b0>)
 800170a:	fb82 1203 	smull	r1, r2, r2, r3
 800170e:	1192      	asrs	r2, r2, #6
 8001710:	17db      	asrs	r3, r3, #31
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			if (sein && y_suund>paksus) y_suund = paksus;
 8001718:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800171c:	2b00      	cmp	r3, #0
 800171e:	d009      	beq.n	8001734 <DisplayTask+0x17c>
 8001720:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001724:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001728:	429a      	cmp	r2, r3
 800172a:	d903      	bls.n	8001734 <DisplayTask+0x17c>
 800172c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001730:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			pall.y-=y_suund;
 8001734:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001736:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800173a:	b29b      	uxth	r3, r3
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	b29b      	uxth	r3, r3
 8001740:	847b      	strh	r3, [r7, #34]	; 0x22
 8001742:	e01c      	b.n	800177e <DisplayTask+0x1c6>
		}else{
			y_suund=data.x/200;
 8001744:	8b3b      	ldrh	r3, [r7, #24]
 8001746:	4a48      	ldr	r2, [pc, #288]	; (8001868 <DisplayTask+0x2b0>)
 8001748:	fba2 2303 	umull	r2, r3, r2, r3
 800174c:	099b      	lsrs	r3, r3, #6
 800174e:	b29b      	uxth	r3, r3
 8001750:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			if (sein && y_suund>paksus) y_suund = paksus;
 8001754:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001758:	2b00      	cmp	r3, #0
 800175a:	d009      	beq.n	8001770 <DisplayTask+0x1b8>
 800175c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001760:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001764:	429a      	cmp	r2, r3
 8001766:	d903      	bls.n	8001770 <DisplayTask+0x1b8>
 8001768:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800176c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			pall.y+=y_suund;
 8001770:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001772:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001776:	b29b      	uxth	r3, r3
 8001778:	4413      	add	r3, r2
 800177a:	b29b      	uxth	r3, r3
 800177c:	847b      	strh	r3, [r7, #34]	; 0x22
		}
		//Kas asukoht läks ekraanist välja
		if (pall.x<5 || pall.x>1000){
 800177e:	8c3b      	ldrh	r3, [r7, #32]
 8001780:	2b04      	cmp	r3, #4
 8001782:	d903      	bls.n	800178c <DisplayTask+0x1d4>
 8001784:	8c3b      	ldrh	r3, [r7, #32]
 8001786:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800178a:	d902      	bls.n	8001792 <DisplayTask+0x1da>
			pall.x=5;
 800178c:	2305      	movs	r3, #5
 800178e:	843b      	strh	r3, [r7, #32]
 8001790:	e004      	b.n	800179c <DisplayTask+0x1e4>
		}else if (pall.x>235){
 8001792:	8c3b      	ldrh	r3, [r7, #32]
 8001794:	2beb      	cmp	r3, #235	; 0xeb
 8001796:	d901      	bls.n	800179c <DisplayTask+0x1e4>
			pall.x=235;
 8001798:	23eb      	movs	r3, #235	; 0xeb
 800179a:	843b      	strh	r3, [r7, #32]
		}

		if (pall.y<5 || pall.y>1000){
 800179c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800179e:	2b04      	cmp	r3, #4
 80017a0:	d903      	bls.n	80017aa <DisplayTask+0x1f2>
 80017a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80017a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017a8:	d902      	bls.n	80017b0 <DisplayTask+0x1f8>
			pall.y=5;
 80017aa:	2305      	movs	r3, #5
 80017ac:	847b      	strh	r3, [r7, #34]	; 0x22
 80017ae:	e006      	b.n	80017be <DisplayTask+0x206>
		}else if (pall.y>315){
 80017b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80017b2:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80017b6:	d302      	bcc.n	80017be <DisplayTask+0x206>
			pall.y=315;
 80017b8:	f240 133b 	movw	r3, #315	; 0x13b
 80017bc:	847b      	strh	r3, [r7, #34]	; 0x22
		}

		// Kontrolli, kas pall läks auku
		if (pall.x<auk.x+5 && pall.x>auk.x-5 && pall.y<auk.y+5 && pall.y>auk.y-5) reset=1;
 80017be:	8abb      	ldrh	r3, [r7, #20]
 80017c0:	3304      	adds	r3, #4
 80017c2:	8c3a      	ldrh	r2, [r7, #32]
 80017c4:	4293      	cmp	r3, r2
 80017c6:	db11      	blt.n	80017ec <DisplayTask+0x234>
 80017c8:	8abb      	ldrh	r3, [r7, #20]
 80017ca:	3b04      	subs	r3, #4
 80017cc:	8c3a      	ldrh	r2, [r7, #32]
 80017ce:	4293      	cmp	r3, r2
 80017d0:	dc0c      	bgt.n	80017ec <DisplayTask+0x234>
 80017d2:	8afb      	ldrh	r3, [r7, #22]
 80017d4:	3304      	adds	r3, #4
 80017d6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80017d8:	4293      	cmp	r3, r2
 80017da:	db07      	blt.n	80017ec <DisplayTask+0x234>
 80017dc:	8afb      	ldrh	r3, [r7, #22]
 80017de:	3b04      	subs	r3, #4
 80017e0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80017e2:	4293      	cmp	r3, r2
 80017e4:	dc02      	bgt.n	80017ec <DisplayTask+0x234>
 80017e6:	2301      	movs	r3, #1
 80017e8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

		// Kontrolli, kas pall läks vastu joont
		if (dist(p1, p2, pall)<paksus){
 80017ec:	6a3a      	ldr	r2, [r7, #32]
 80017ee:	68f9      	ldr	r1, [r7, #12]
 80017f0:	6938      	ldr	r0, [r7, #16]
 80017f2:	f7ff fce9 	bl	80011c8 <dist>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461a      	mov	r2, r3
 80017fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80017fe:	b29b      	uxth	r3, r3
 8001800:	429a      	cmp	r2, r3
 8001802:	d207      	bcs.n	8001814 <DisplayTask+0x25c>
			pall.x=pall_vana.x;
 8001804:	8bbb      	ldrh	r3, [r7, #28]
 8001806:	843b      	strh	r3, [r7, #32]
			pall.y=pall_vana.y;
 8001808:	8bfb      	ldrh	r3, [r7, #30]
 800180a:	847b      	strh	r3, [r7, #34]	; 0x22
			sein=1;
 800180c:	2301      	movs	r3, #1
 800180e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001812:	e002      	b.n	800181a <DisplayTask+0x262>
		} else sein=0;
 8001814:	2300      	movs	r3, #0
 8001816:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		//LOG_PRINT("%u",dist(p1, p2, pall));
		// Joonista
		BSP_LCD_SetTextColor(BSP_LCD_GetBackColor());
 800181a:	f001 fa61 	bl	8002ce0 <BSP_LCD_GetBackColor>
 800181e:	4603      	mov	r3, r0
 8001820:	4618      	mov	r0, r3
 8001822:	f001 fa73 	bl	8002d0c <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(pall_vana.x, pall_vana.y, 4); //Eemalda pall
 8001826:	8bbb      	ldrh	r3, [r7, #28]
 8001828:	8bf9      	ldrh	r1, [r7, #30]
 800182a:	2204      	movs	r2, #4
 800182c:	4618      	mov	r0, r3
 800182e:	f001 fd2d 	bl	800328c <BSP_LCD_FillCircle>
		BSP_LCD_SetTextColor(colorbackup);
 8001832:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001834:	f001 fa6a 	bl	8002d0c <BSP_LCD_SetTextColor>

		BSP_LCD_FillCircle(pall.x, pall.y, 4); //Pall
 8001838:	8c3b      	ldrh	r3, [r7, #32]
 800183a:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800183c:	2204      	movs	r2, #4
 800183e:	4618      	mov	r0, r3
 8001840:	f001 fd24 	bl	800328c <BSP_LCD_FillCircle>
		BSP_LCD_FillCircle(auk.x, auk.y, 6); //Auk
 8001844:	8abb      	ldrh	r3, [r7, #20]
 8001846:	8af9      	ldrh	r1, [r7, #22]
 8001848:	2206      	movs	r2, #6
 800184a:	4618      	mov	r0, r3
 800184c:	f001 fd1e 	bl	800328c <BSP_LCD_FillCircle>
		BSP_LCD_DrawLine(p1.x, p1.y, p2.x, p2.y); //Takistus
 8001850:	8a38      	ldrh	r0, [r7, #16]
 8001852:	8a79      	ldrh	r1, [r7, #18]
 8001854:	89ba      	ldrh	r2, [r7, #12]
 8001856:	89fb      	ldrh	r3, [r7, #14]
 8001858:	f001 fb0a 	bl	8002e70 <BSP_LCD_DrawLine>

  	  }
	  osDelay(5);
 800185c:	2005      	movs	r0, #5
 800185e:	f00a fd2c 	bl	800c2ba <osDelay>
	  if (Acc_HasData()){
 8001862:	e6ce      	b.n	8001602 <DisplayTask+0x4a>
 8001864:	40021800 	.word	0x40021800
 8001868:	51eb851f 	.word	0x51eb851f

0800186c <MX_GPIO_Init>:
     PF7   ------> SPI5_SCK
     PF8   ------> SPI5_MISO
     PF9   ------> SPI5_MOSI
*/
void MX_GPIO_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08e      	sub	sp, #56	; 0x38
 8001870:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
 8001880:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	623b      	str	r3, [r7, #32]
 8001886:	4b92      	ldr	r3, [pc, #584]	; (8001ad0 <MX_GPIO_Init+0x264>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a91      	ldr	r2, [pc, #580]	; (8001ad0 <MX_GPIO_Init+0x264>)
 800188c:	f043 0310 	orr.w	r3, r3, #16
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b8f      	ldr	r3, [pc, #572]	; (8001ad0 <MX_GPIO_Init+0x264>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	623b      	str	r3, [r7, #32]
 800189c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
 80018a2:	4b8b      	ldr	r3, [pc, #556]	; (8001ad0 <MX_GPIO_Init+0x264>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a8a      	ldr	r2, [pc, #552]	; (8001ad0 <MX_GPIO_Init+0x264>)
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b88      	ldr	r3, [pc, #544]	; (8001ad0 <MX_GPIO_Init+0x264>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0304 	and.w	r3, r3, #4
 80018b6:	61fb      	str	r3, [r7, #28]
 80018b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	61bb      	str	r3, [r7, #24]
 80018be:	4b84      	ldr	r3, [pc, #528]	; (8001ad0 <MX_GPIO_Init+0x264>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a83      	ldr	r2, [pc, #524]	; (8001ad0 <MX_GPIO_Init+0x264>)
 80018c4:	f043 0320 	orr.w	r3, r3, #32
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b81      	ldr	r3, [pc, #516]	; (8001ad0 <MX_GPIO_Init+0x264>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0320 	and.w	r3, r3, #32
 80018d2:	61bb      	str	r3, [r7, #24]
 80018d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	4b7d      	ldr	r3, [pc, #500]	; (8001ad0 <MX_GPIO_Init+0x264>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a7c      	ldr	r2, [pc, #496]	; (8001ad0 <MX_GPIO_Init+0x264>)
 80018e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b7a      	ldr	r3, [pc, #488]	; (8001ad0 <MX_GPIO_Init+0x264>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	4b76      	ldr	r3, [pc, #472]	; (8001ad0 <MX_GPIO_Init+0x264>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a75      	ldr	r2, [pc, #468]	; (8001ad0 <MX_GPIO_Init+0x264>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b73      	ldr	r3, [pc, #460]	; (8001ad0 <MX_GPIO_Init+0x264>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	4b6f      	ldr	r3, [pc, #444]	; (8001ad0 <MX_GPIO_Init+0x264>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a6e      	ldr	r2, [pc, #440]	; (8001ad0 <MX_GPIO_Init+0x264>)
 8001918:	f043 0302 	orr.w	r3, r3, #2
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b6c      	ldr	r3, [pc, #432]	; (8001ad0 <MX_GPIO_Init+0x264>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	4b68      	ldr	r3, [pc, #416]	; (8001ad0 <MX_GPIO_Init+0x264>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a67      	ldr	r2, [pc, #412]	; (8001ad0 <MX_GPIO_Init+0x264>)
 8001934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b65      	ldr	r3, [pc, #404]	; (8001ad0 <MX_GPIO_Init+0x264>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	4b61      	ldr	r3, [pc, #388]	; (8001ad0 <MX_GPIO_Init+0x264>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a60      	ldr	r2, [pc, #384]	; (8001ad0 <MX_GPIO_Init+0x264>)
 8001950:	f043 0308 	orr.w	r3, r3, #8
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b5e      	ldr	r3, [pc, #376]	; (8001ad0 <MX_GPIO_Init+0x264>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001962:	2200      	movs	r2, #0
 8001964:	2116      	movs	r1, #22
 8001966:	485b      	ldr	r0, [pc, #364]	; (8001ad4 <MX_GPIO_Init+0x268>)
 8001968:	f003 f9a0 	bl	8004cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_CS_GPIO_Port, ACC_CS_Pin, GPIO_PIN_SET);
 800196c:	2201      	movs	r2, #1
 800196e:	2120      	movs	r1, #32
 8001970:	4859      	ldr	r0, [pc, #356]	; (8001ad8 <MX_GPIO_Init+0x26c>)
 8001972:	f003 f99b 	bl	8004cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001976:	2200      	movs	r2, #0
 8001978:	2180      	movs	r1, #128	; 0x80
 800197a:	4857      	ldr	r0, [pc, #348]	; (8001ad8 <MX_GPIO_Init+0x26c>)
 800197c:	f003 f996 	bl	8004cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001986:	4855      	ldr	r0, [pc, #340]	; (8001adc <MX_GPIO_Init+0x270>)
 8001988:	f003 f990 	bl	8004cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001992:	4853      	ldr	r0, [pc, #332]	; (8001ae0 <MX_GPIO_Init+0x274>)
 8001994:	f003 f98a 	bl	8004cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACC_IN2_Pin;
 8001998:	2340      	movs	r3, #64	; 0x40
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800199c:	2300      	movs	r3, #0
 800199e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ACC_IN2_GPIO_Port, &GPIO_InitStruct);
 80019a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a8:	4619      	mov	r1, r3
 80019aa:	484e      	ldr	r0, [pc, #312]	; (8001ae4 <MX_GPIO_Init+0x278>)
 80019ac:	f002 feae 	bl	800470c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80019b0:	f44f 7360 	mov.w	r3, #896	; 0x380
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019be:	2303      	movs	r3, #3
 80019c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80019c2:	2305      	movs	r3, #5
 80019c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ca:	4619      	mov	r1, r3
 80019cc:	4845      	ldr	r0, [pc, #276]	; (8001ae4 <MX_GPIO_Init+0x278>)
 80019ce:	f002 fe9d 	bl	800470c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80019d2:	2316      	movs	r3, #22
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d6:	2301      	movs	r3, #1
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e6:	4619      	mov	r1, r3
 80019e8:	483a      	ldr	r0, [pc, #232]	; (8001ad4 <MX_GPIO_Init+0x268>)
 80019ea:	f002 fe8f 	bl	800470c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80019ee:	f248 0307 	movw	r3, #32775	; 0x8007
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019f4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80019f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a02:	4619      	mov	r1, r3
 8001a04:	4834      	ldr	r0, [pc, #208]	; (8001ad8 <MX_GPIO_Init+0x26c>)
 8001a06:	f002 fe81 	bl	800470c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ACC_CS_Pin|ACP_RST_Pin;
 8001a0a:	23a0      	movs	r3, #160	; 0xa0
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	2300      	movs	r3, #0
 8001a18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a1e:	4619      	mov	r1, r3
 8001a20:	482d      	ldr	r0, [pc, #180]	; (8001ad8 <MX_GPIO_Init+0x26c>)
 8001a22:	f002 fe73 	bl	800470c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001a26:	2320      	movs	r3, #32
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a2a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4826      	ldr	r0, [pc, #152]	; (8001ad4 <MX_GPIO_Init+0x268>)
 8001a3c:	f002 fe66 	bl	800470c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001a40:	2304      	movs	r3, #4
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a44:	2300      	movs	r3, #0
 8001a46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a50:	4619      	mov	r1, r3
 8001a52:	4825      	ldr	r0, [pc, #148]	; (8001ae8 <MX_GPIO_Init+0x27c>)
 8001a54:	f002 fe5a 	bl	800470c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001a58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	481b      	ldr	r0, [pc, #108]	; (8001adc <MX_GPIO_Init+0x270>)
 8001a6e:	f002 fe4d 	bl	800470c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001a72:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a80:	2300      	movs	r3, #0
 8001a82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4814      	ldr	r0, [pc, #80]	; (8001adc <MX_GPIO_Init+0x270>)
 8001a8c:	f002 fe3e 	bl	800470c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACC_IN1_Pin;
 8001a90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a96:	2300      	movs	r3, #0
 8001a98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ACC_IN1_GPIO_Port, &GPIO_InitStruct);
 8001a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	480b      	ldr	r0, [pc, #44]	; (8001ad4 <MX_GPIO_Init+0x268>)
 8001aa6:	f002 fe31 	bl	800470c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001aaa:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4807      	ldr	r0, [pc, #28]	; (8001ae0 <MX_GPIO_Init+0x274>)
 8001ac4:	f002 fe22 	bl	800470c <HAL_GPIO_Init>

}
 8001ac8:	bf00      	nop
 8001aca:	3738      	adds	r7, #56	; 0x38
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40020800 	.word	0x40020800
 8001ad8:	40020000 	.word	0x40020000
 8001adc:	40020c00 	.word	0x40020c00
 8001ae0:	40021800 	.word	0x40021800
 8001ae4:	40021400 	.word	0x40021400
 8001ae8:	40020400 	.word	0x40020400

08001aec <HAL_LTDC_MspInit>:
  /* USER CODE END LTDC_Init 2 */

}

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b09a      	sub	sp, #104	; 0x68
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b08:	2230      	movs	r2, #48	; 0x30
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f00d f97e 	bl	800ee0e <memset>
  if(ltdcHandle->Instance==LTDC)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a85      	ldr	r2, [pc, #532]	; (8001d2c <HAL_LTDC_MspInit+0x240>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	f040 8103 	bne.w	8001d24 <HAL_LTDC_MspInit+0x238>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001b1e:	2308      	movs	r3, #8
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 8001b22:	2360      	movs	r3, #96	; 0x60
 8001b24:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 3;
 8001b26:	2303      	movs	r3, #3
 8001b28:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001b2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b2e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b34:	4618      	mov	r0, r3
 8001b36:	f005 fb97 	bl	8007268 <HAL_RCCEx_PeriphCLKConfig>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8001b40:	f000 f9be 	bl	8001ec0 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001b44:	2300      	movs	r3, #0
 8001b46:	623b      	str	r3, [r7, #32]
 8001b48:	4b79      	ldr	r3, [pc, #484]	; (8001d30 <HAL_LTDC_MspInit+0x244>)
 8001b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4c:	4a78      	ldr	r2, [pc, #480]	; (8001d30 <HAL_LTDC_MspInit+0x244>)
 8001b4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b52:	6453      	str	r3, [r2, #68]	; 0x44
 8001b54:	4b76      	ldr	r3, [pc, #472]	; (8001d30 <HAL_LTDC_MspInit+0x244>)
 8001b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b5c:	623b      	str	r3, [r7, #32]
 8001b5e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b60:	2300      	movs	r3, #0
 8001b62:	61fb      	str	r3, [r7, #28]
 8001b64:	4b72      	ldr	r3, [pc, #456]	; (8001d30 <HAL_LTDC_MspInit+0x244>)
 8001b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b68:	4a71      	ldr	r2, [pc, #452]	; (8001d30 <HAL_LTDC_MspInit+0x244>)
 8001b6a:	f043 0320 	orr.w	r3, r3, #32
 8001b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b70:	4b6f      	ldr	r3, [pc, #444]	; (8001d30 <HAL_LTDC_MspInit+0x244>)
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	f003 0320 	and.w	r3, r3, #32
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61bb      	str	r3, [r7, #24]
 8001b80:	4b6b      	ldr	r3, [pc, #428]	; (8001d30 <HAL_LTDC_MspInit+0x244>)
 8001b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b84:	4a6a      	ldr	r2, [pc, #424]	; (8001d30 <HAL_LTDC_MspInit+0x244>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8c:	4b68      	ldr	r3, [pc, #416]	; (8001d30 <HAL_LTDC_MspInit+0x244>)
 8001b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	61bb      	str	r3, [r7, #24]
 8001b96:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	4b64      	ldr	r3, [pc, #400]	; (8001d30 <HAL_LTDC_MspInit+0x244>)
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba0:	4a63      	ldr	r2, [pc, #396]	; (8001d30 <HAL_LTDC_MspInit+0x244>)
 8001ba2:	f043 0302 	orr.w	r3, r3, #2
 8001ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba8:	4b61      	ldr	r3, [pc, #388]	; (8001d30 <HAL_LTDC_MspInit+0x244>)
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	4b5d      	ldr	r3, [pc, #372]	; (8001d30 <HAL_LTDC_MspInit+0x244>)
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbc:	4a5c      	ldr	r2, [pc, #368]	; (8001d30 <HAL_LTDC_MspInit+0x244>)
 8001bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc4:	4b5a      	ldr	r3, [pc, #360]	; (8001d30 <HAL_LTDC_MspInit+0x244>)
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	4b56      	ldr	r3, [pc, #344]	; (8001d30 <HAL_LTDC_MspInit+0x244>)
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd8:	4a55      	ldr	r2, [pc, #340]	; (8001d30 <HAL_LTDC_MspInit+0x244>)
 8001bda:	f043 0304 	orr.w	r3, r3, #4
 8001bde:	6313      	str	r3, [r2, #48]	; 0x30
 8001be0:	4b53      	ldr	r3, [pc, #332]	; (8001d30 <HAL_LTDC_MspInit+0x244>)
 8001be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bec:	2300      	movs	r3, #0
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	4b4f      	ldr	r3, [pc, #316]	; (8001d30 <HAL_LTDC_MspInit+0x244>)
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	4a4e      	ldr	r2, [pc, #312]	; (8001d30 <HAL_LTDC_MspInit+0x244>)
 8001bf6:	f043 0308 	orr.w	r3, r3, #8
 8001bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfc:	4b4c      	ldr	r3, [pc, #304]	; (8001d30 <HAL_LTDC_MspInit+0x244>)
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	f003 0308 	and.w	r3, r3, #8
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c0c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c1a:	230e      	movs	r3, #14
 8001c1c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001c1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c22:	4619      	mov	r1, r3
 8001c24:	4843      	ldr	r0, [pc, #268]	; (8001d34 <HAL_LTDC_MspInit+0x248>)
 8001c26:	f002 fd71 	bl	800470c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001c2a:	f641 0358 	movw	r3, #6232	; 0x1858
 8001c2e:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c30:	2302      	movs	r3, #2
 8001c32:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c3c:	230e      	movs	r3, #14
 8001c3e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c40:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c44:	4619      	mov	r1, r3
 8001c46:	483c      	ldr	r0, [pc, #240]	; (8001d38 <HAL_LTDC_MspInit+0x24c>)
 8001c48:	f002 fd60 	bl	800470c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c50:	2302      	movs	r3, #2
 8001c52:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001c5c:	2309      	movs	r3, #9
 8001c5e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c64:	4619      	mov	r1, r3
 8001c66:	4835      	ldr	r0, [pc, #212]	; (8001d3c <HAL_LTDC_MspInit+0x250>)
 8001c68:	f002 fd50 	bl	800470c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001c6c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001c70:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c7e:	230e      	movs	r3, #14
 8001c80:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c82:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c86:	4619      	mov	r1, r3
 8001c88:	482c      	ldr	r0, [pc, #176]	; (8001d3c <HAL_LTDC_MspInit+0x250>)
 8001c8a:	f002 fd3f 	bl	800470c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001c8e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001c92:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ca0:	230e      	movs	r3, #14
 8001ca2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ca4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4825      	ldr	r0, [pc, #148]	; (8001d40 <HAL_LTDC_MspInit+0x254>)
 8001cac:	f002 fd2e 	bl	800470c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001cb0:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001cb4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cc2:	230e      	movs	r3, #14
 8001cc4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cca:	4619      	mov	r1, r3
 8001ccc:	481d      	ldr	r0, [pc, #116]	; (8001d44 <HAL_LTDC_MspInit+0x258>)
 8001cce:	f002 fd1d 	bl	800470c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001cd2:	2348      	movs	r3, #72	; 0x48
 8001cd4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ce2:	230e      	movs	r3, #14
 8001ce4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ce6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cea:	4619      	mov	r1, r3
 8001cec:	4816      	ldr	r0, [pc, #88]	; (8001d48 <HAL_LTDC_MspInit+0x25c>)
 8001cee:	f002 fd0d 	bl	800470c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001cf2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cf6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d00:	2300      	movs	r3, #0
 8001d02:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001d04:	2309      	movs	r3, #9
 8001d06:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	480c      	ldr	r0, [pc, #48]	; (8001d40 <HAL_LTDC_MspInit+0x254>)
 8001d10:	f002 fcfc 	bl	800470c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2105      	movs	r1, #5
 8001d18:	2058      	movs	r0, #88	; 0x58
 8001d1a:	f001 ff73 	bl	8003c04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001d1e:	2058      	movs	r0, #88	; 0x58
 8001d20:	f001 ff8c 	bl	8003c3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001d24:	bf00      	nop
 8001d26:	3768      	adds	r7, #104	; 0x68
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40016800 	.word	0x40016800
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40021400 	.word	0x40021400
 8001d38:	40020000 	.word	0x40020000
 8001d3c:	40020400 	.word	0x40020400
 8001d40:	40021800 	.word	0x40021800
 8001d44:	40020800 	.word	0x40020800
 8001d48:	40020c00 	.word	0x40020c00

08001d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d52:	f001 fe39 	bl	80039c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d56:	f000 f837 	bl	8001dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d5a:	f7ff fd87 	bl	800186c <MX_GPIO_Init>
  MX_SPI4_Init();
 8001d5e:	f000 f8b5 	bl	8001ecc <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
	// LCD Things
	BSP_LCD_Init();
 8001d62:	f000 feb3 	bl	8002acc <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER);
 8001d66:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	f000 ff30 	bl	8002bd0 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(1);
 8001d70:	2001      	movs	r0, #1
 8001d72:	f000 ff91 	bl	8002c98 <BSP_LCD_SelectLayer>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE); // Vali meelepärane värv
 8001d76:	f04f 30ff 	mov.w	r0, #4294967295
 8001d7a:	f000 ffdf 	bl	8002d3c <BSP_LCD_SetBackColor>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d82:	f001 f80f 	bl	8002da4 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE); // Vali meelepärane värv
 8001d86:	480e      	ldr	r0, [pc, #56]	; (8001dc0 <main+0x74>)
 8001d88:	f000 ffc0 	bl	8002d0c <BSP_LCD_SetTextColor>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001d8c:	f7ff fbc6 	bl	800151c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001d90:	f00a fa40 	bl	800c214 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  if (Acc_Init()){
 8001d94:	f7ff f89e 	bl	8000ed4 <Acc_Init>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d005      	beq.n	8001daa <main+0x5e>
  	LED_Green_Write(1);
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001da4:	4807      	ldr	r0, [pc, #28]	; (8001dc4 <main+0x78>)
 8001da6:	f002 ff81 	bl	8004cac <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (Acc_HasData()){
 8001daa:	f7ff f90f 	bl	8000fcc <Acc_HasData>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0fa      	beq.n	8001daa <main+0x5e>
		  Acc_ReadXYZ(&data);
 8001db4:	463b      	mov	r3, r7
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff f914 	bl	8000fe4 <Acc_ReadXYZ>
	  if (Acc_HasData()){
 8001dbc:	e7f5      	b.n	8001daa <main+0x5e>
 8001dbe:	bf00      	nop
 8001dc0:	ff000080 	.word	0xff000080
 8001dc4:	40021800 	.word	0x40021800

08001dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b094      	sub	sp, #80	; 0x50
 8001dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dce:	f107 0320 	add.w	r3, r7, #32
 8001dd2:	2230      	movs	r2, #48	; 0x30
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f00d f819 	bl	800ee0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ddc:	f107 030c 	add.w	r3, r7, #12
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dec:	2300      	movs	r3, #0
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	4b28      	ldr	r3, [pc, #160]	; (8001e94 <SystemClock_Config+0xcc>)
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	4a27      	ldr	r2, [pc, #156]	; (8001e94 <SystemClock_Config+0xcc>)
 8001df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfc:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <SystemClock_Config+0xcc>)
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e08:	2300      	movs	r3, #0
 8001e0a:	607b      	str	r3, [r7, #4]
 8001e0c:	4b22      	ldr	r3, [pc, #136]	; (8001e98 <SystemClock_Config+0xd0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a21      	ldr	r2, [pc, #132]	; (8001e98 <SystemClock_Config+0xd0>)
 8001e12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	4b1f      	ldr	r3, [pc, #124]	; (8001e98 <SystemClock_Config+0xd0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e20:	607b      	str	r3, [r7, #4]
 8001e22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e24:	2301      	movs	r3, #1
 8001e26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e38:	2304      	movs	r3, #4
 8001e3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e3c:	23a8      	movs	r3, #168	; 0xa8
 8001e3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e40:	2302      	movs	r3, #2
 8001e42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e44:	2307      	movs	r3, #7
 8001e46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e48:	f107 0320 	add.w	r3, r7, #32
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f004 fd55 	bl	80068fc <HAL_RCC_OscConfig>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e58:	f000 f832 	bl	8001ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e5c:	230f      	movs	r3, #15
 8001e5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e60:	2302      	movs	r3, #2
 8001e62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e68:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e74:	f107 030c 	add.w	r3, r7, #12
 8001e78:	2105      	movs	r1, #5
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f004 ffb6 	bl	8006dec <HAL_RCC_ClockConfig>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e86:	f000 f81b 	bl	8001ec0 <Error_Handler>
  }
}
 8001e8a:	bf00      	nop
 8001e8c:	3750      	adds	r7, #80	; 0x50
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40007000 	.word	0x40007000

08001e9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d101      	bne.n	8001eb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001eae:	f001 fdad 	bl	8003a0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40001000 	.word	0x40001000

08001ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec4:	b672      	cpsid	i
}
 8001ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ec8:	e7fe      	b.n	8001ec8 <Error_Handler+0x8>
	...

08001ecc <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001ed0:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <MX_SPI4_Init+0x64>)
 8001ed2:	4a18      	ldr	r2, [pc, #96]	; (8001f34 <MX_SPI4_Init+0x68>)
 8001ed4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001ed6:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <MX_SPI4_Init+0x64>)
 8001ed8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001edc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001ede:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <MX_SPI4_Init+0x64>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ee4:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <MX_SPI4_Init+0x64>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001eea:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <MX_SPI4_Init+0x64>)
 8001eec:	2202      	movs	r2, #2
 8001eee:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <MX_SPI4_Init+0x64>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <MX_SPI4_Init+0x64>)
 8001ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001efc:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001efe:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <MX_SPI4_Init+0x64>)
 8001f00:	2218      	movs	r2, #24
 8001f02:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f04:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <MX_SPI4_Init+0x64>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f0a:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <MX_SPI4_Init+0x64>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f10:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <MX_SPI4_Init+0x64>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <MX_SPI4_Init+0x64>)
 8001f18:	220a      	movs	r2, #10
 8001f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001f1c:	4804      	ldr	r0, [pc, #16]	; (8001f30 <MX_SPI4_Init+0x64>)
 8001f1e:	f005 fbf4 	bl	800770a <HAL_SPI_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001f28:	f7ff ffca 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20000524 	.word	0x20000524
 8001f34:	40013400 	.word	0x40013400

08001f38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	; 0x28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a19      	ldr	r2, [pc, #100]	; (8001fbc <HAL_SPI_MspInit+0x84>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d12b      	bne.n	8001fb2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <HAL_SPI_MspInit+0x88>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	4a17      	ldr	r2, [pc, #92]	; (8001fc0 <HAL_SPI_MspInit+0x88>)
 8001f64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f68:	6453      	str	r3, [r2, #68]	; 0x44
 8001f6a:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <HAL_SPI_MspInit+0x88>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <HAL_SPI_MspInit+0x88>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a10      	ldr	r2, [pc, #64]	; (8001fc0 <HAL_SPI_MspInit+0x88>)
 8001f80:	f043 0310 	orr.w	r3, r3, #16
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <HAL_SPI_MspInit+0x88>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0310 	and.w	r3, r3, #16
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001f92:	2364      	movs	r3, #100	; 0x64
 8001f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f96:	2302      	movs	r3, #2
 8001f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001fa2:	2305      	movs	r3, #5
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fa6:	f107 0314 	add.w	r3, r7, #20
 8001faa:	4619      	mov	r1, r3
 8001fac:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <HAL_SPI_MspInit+0x8c>)
 8001fae:	f002 fbad 	bl	800470c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001fb2:	bf00      	nop
 8001fb4:	3728      	adds	r7, #40	; 0x28
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40013400 	.word	0x40013400
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40021000 	.word	0x40021000

08001fc8 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI4)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a08      	ldr	r2, [pc, #32]	; (8001ff8 <HAL_SPI_MspDeInit+0x30>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d109      	bne.n	8001fee <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI4_MspDeInit 0 */

  /* USER CODE END SPI4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI4_CLK_DISABLE();
 8001fda:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <HAL_SPI_MspDeInit+0x34>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	4a07      	ldr	r2, [pc, #28]	; (8001ffc <HAL_SPI_MspDeInit+0x34>)
 8001fe0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fe4:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6);
 8001fe6:	2164      	movs	r1, #100	; 0x64
 8001fe8:	4805      	ldr	r0, [pc, #20]	; (8002000 <HAL_SPI_MspDeInit+0x38>)
 8001fea:	f002 fd3b 	bl	8004a64 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI4_MspDeInit 1 */

  /* USER CODE END SPI4_MspDeInit 1 */
  }
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40013400 	.word	0x40013400
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40021000 	.word	0x40021000

08002004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	607b      	str	r3, [r7, #4]
 800200e:	4b12      	ldr	r3, [pc, #72]	; (8002058 <HAL_MspInit+0x54>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	4a11      	ldr	r2, [pc, #68]	; (8002058 <HAL_MspInit+0x54>)
 8002014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002018:	6453      	str	r3, [r2, #68]	; 0x44
 800201a:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <HAL_MspInit+0x54>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	603b      	str	r3, [r7, #0]
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <HAL_MspInit+0x54>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <HAL_MspInit+0x54>)
 8002030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002034:	6413      	str	r3, [r2, #64]	; 0x40
 8002036:	4b08      	ldr	r3, [pc, #32]	; (8002058 <HAL_MspInit+0x54>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203e:	603b      	str	r3, [r7, #0]
 8002040:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002042:	2200      	movs	r2, #0
 8002044:	210f      	movs	r1, #15
 8002046:	f06f 0001 	mvn.w	r0, #1
 800204a:	f001 fddb 	bl	8003c04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800

0800205c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08e      	sub	sp, #56	; 0x38
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800206c:	2300      	movs	r3, #0
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	4b33      	ldr	r3, [pc, #204]	; (8002140 <HAL_InitTick+0xe4>)
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	4a32      	ldr	r2, [pc, #200]	; (8002140 <HAL_InitTick+0xe4>)
 8002076:	f043 0310 	orr.w	r3, r3, #16
 800207a:	6413      	str	r3, [r2, #64]	; 0x40
 800207c:	4b30      	ldr	r3, [pc, #192]	; (8002140 <HAL_InitTick+0xe4>)
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	f003 0310 	and.w	r3, r3, #16
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002088:	f107 0210 	add.w	r2, r7, #16
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f005 f8b6 	bl	8007204 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800209c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d103      	bne.n	80020aa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80020a2:	f005 f89b 	bl	80071dc <HAL_RCC_GetPCLK1Freq>
 80020a6:	6378      	str	r0, [r7, #52]	; 0x34
 80020a8:	e004      	b.n	80020b4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80020aa:	f005 f897 	bl	80071dc <HAL_RCC_GetPCLK1Freq>
 80020ae:	4603      	mov	r3, r0
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020b6:	4a23      	ldr	r2, [pc, #140]	; (8002144 <HAL_InitTick+0xe8>)
 80020b8:	fba2 2303 	umull	r2, r3, r2, r3
 80020bc:	0c9b      	lsrs	r3, r3, #18
 80020be:	3b01      	subs	r3, #1
 80020c0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80020c2:	4b21      	ldr	r3, [pc, #132]	; (8002148 <HAL_InitTick+0xec>)
 80020c4:	4a21      	ldr	r2, [pc, #132]	; (800214c <HAL_InitTick+0xf0>)
 80020c6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80020c8:	4b1f      	ldr	r3, [pc, #124]	; (8002148 <HAL_InitTick+0xec>)
 80020ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020ce:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80020d0:	4a1d      	ldr	r2, [pc, #116]	; (8002148 <HAL_InitTick+0xec>)
 80020d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80020d6:	4b1c      	ldr	r3, [pc, #112]	; (8002148 <HAL_InitTick+0xec>)
 80020d8:	2200      	movs	r2, #0
 80020da:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020dc:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <HAL_InitTick+0xec>)
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e2:	4b19      	ldr	r3, [pc, #100]	; (8002148 <HAL_InitTick+0xec>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80020e8:	4817      	ldr	r0, [pc, #92]	; (8002148 <HAL_InitTick+0xec>)
 80020ea:	f006 f8ed 	bl	80082c8 <HAL_TIM_Base_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80020f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d11b      	bne.n	8002134 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80020fc:	4812      	ldr	r0, [pc, #72]	; (8002148 <HAL_InitTick+0xec>)
 80020fe:	f006 f933 	bl	8008368 <HAL_TIM_Base_Start_IT>
 8002102:	4603      	mov	r3, r0
 8002104:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002108:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800210c:	2b00      	cmp	r3, #0
 800210e:	d111      	bne.n	8002134 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002110:	2036      	movs	r0, #54	; 0x36
 8002112:	f001 fd93 	bl	8003c3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b0f      	cmp	r3, #15
 800211a:	d808      	bhi.n	800212e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800211c:	2200      	movs	r2, #0
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	2036      	movs	r0, #54	; 0x36
 8002122:	f001 fd6f 	bl	8003c04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002126:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <HAL_InitTick+0xf4>)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	e002      	b.n	8002134 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002134:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002138:	4618      	mov	r0, r3
 800213a:	3738      	adds	r7, #56	; 0x38
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40023800 	.word	0x40023800
 8002144:	431bde83 	.word	0x431bde83
 8002148:	2000057c 	.word	0x2000057c
 800214c:	40001000 	.word	0x40001000
 8002150:	2000004c 	.word	0x2000004c

08002154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002158:	e7fe      	b.n	8002158 <NMI_Handler+0x4>

0800215a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800215e:	e7fe      	b.n	800215e <HardFault_Handler+0x4>

08002160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002164:	e7fe      	b.n	8002164 <MemManage_Handler+0x4>

08002166 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800216a:	e7fe      	b.n	800216a <BusFault_Handler+0x4>

0800216c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002170:	e7fe      	b.n	8002170 <UsageFault_Handler+0x4>

08002172 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002184:	4802      	ldr	r0, [pc, #8]	; (8002190 <TIM6_DAC_IRQHandler+0x10>)
 8002186:	f006 f95f 	bl	8008448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	2000057c 	.word	0x2000057c

08002194 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <OTG_HS_IRQHandler+0x10>)
 800219a:	f003 fa82 	bl	80056a2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20009e54 	.word	0x20009e54

080021a8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80021ac:	4802      	ldr	r0, [pc, #8]	; (80021b8 <LTDC_IRQHandler+0x10>)
 80021ae:	f002 fe67 	bl	8004e80 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	2000047c 	.word	0x2000047c

080021bc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <DMA2D_IRQHandler+0x10>)
 80021c2:	f002 f864 	bl	800428e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	200001d4 	.word	0x200001d4

080021d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return 1;
 80021d4:	2301      	movs	r3, #1
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <_kill>:

int _kill(int pid, int sig)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021ea:	f00c fe5f 	bl	800eeac <__errno>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2216      	movs	r2, #22
 80021f2:	601a      	str	r2, [r3, #0]
  return -1;
 80021f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <_exit>:

void _exit (int status)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002208:	f04f 31ff 	mov.w	r1, #4294967295
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff ffe7 	bl	80021e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002212:	e7fe      	b.n	8002212 <_exit+0x12>

08002214 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	e00a      	b.n	800223c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002226:	f3af 8000 	nop.w
 800222a:	4601      	mov	r1, r0
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	60ba      	str	r2, [r7, #8]
 8002232:	b2ca      	uxtb	r2, r1
 8002234:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	3301      	adds	r3, #1
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	429a      	cmp	r2, r3
 8002242:	dbf0      	blt.n	8002226 <_read+0x12>
  }

  return len;
 8002244:	687b      	ldr	r3, [r7, #4]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b086      	sub	sp, #24
 8002252:	af00      	add	r7, sp, #0
 8002254:	60f8      	str	r0, [r7, #12]
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
 800225e:	e009      	b.n	8002274 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	60ba      	str	r2, [r7, #8]
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	3301      	adds	r3, #1
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	429a      	cmp	r2, r3
 800227a:	dbf1      	blt.n	8002260 <_write+0x12>
  }
  return len;
 800227c:	687b      	ldr	r3, [r7, #4]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <_close>:

int _close(int file)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800228e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022ae:	605a      	str	r2, [r3, #4]
  return 0;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <_isatty>:

int _isatty(int file)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022c6:	2301      	movs	r3, #1
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022f8:	4a14      	ldr	r2, [pc, #80]	; (800234c <_sbrk+0x5c>)
 80022fa:	4b15      	ldr	r3, [pc, #84]	; (8002350 <_sbrk+0x60>)
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002304:	4b13      	ldr	r3, [pc, #76]	; (8002354 <_sbrk+0x64>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d102      	bne.n	8002312 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800230c:	4b11      	ldr	r3, [pc, #68]	; (8002354 <_sbrk+0x64>)
 800230e:	4a12      	ldr	r2, [pc, #72]	; (8002358 <_sbrk+0x68>)
 8002310:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002312:	4b10      	ldr	r3, [pc, #64]	; (8002354 <_sbrk+0x64>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4413      	add	r3, r2
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	429a      	cmp	r2, r3
 800231e:	d207      	bcs.n	8002330 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002320:	f00c fdc4 	bl	800eeac <__errno>
 8002324:	4603      	mov	r3, r0
 8002326:	220c      	movs	r2, #12
 8002328:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800232a:	f04f 33ff 	mov.w	r3, #4294967295
 800232e:	e009      	b.n	8002344 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002330:	4b08      	ldr	r3, [pc, #32]	; (8002354 <_sbrk+0x64>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002336:	4b07      	ldr	r3, [pc, #28]	; (8002354 <_sbrk+0x64>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4413      	add	r3, r2
 800233e:	4a05      	ldr	r2, [pc, #20]	; (8002354 <_sbrk+0x64>)
 8002340:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002342:	68fb      	ldr	r3, [r7, #12]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20030000 	.word	0x20030000
 8002350:	00000400 	.word	0x00000400
 8002354:	200005c4 	.word	0x200005c4
 8002358:	2000a6d0 	.word	0x2000a6d0

0800235c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <SystemInit+0x20>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002366:	4a05      	ldr	r2, [pc, #20]	; (800237c <SystemInit+0x20>)
 8002368:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800236c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM1_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0b      	ldr	r2, [pc, #44]	; (80023bc <HAL_TIM_Base_MspInit+0x3c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d10d      	bne.n	80023ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <HAL_TIM_Base_MspInit+0x40>)
 8002398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239a:	4a09      	ldr	r2, [pc, #36]	; (80023c0 <HAL_TIM_Base_MspInit+0x40>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	6453      	str	r3, [r2, #68]	; 0x44
 80023a2:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <HAL_TIM_Base_MspInit+0x40>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80023ae:	bf00      	nop
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40010000 	.word	0x40010000
 80023c0:	40023800 	.word	0x40023800

080023c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80023c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023fc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023c8:	480d      	ldr	r0, [pc, #52]	; (8002400 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023ca:	490e      	ldr	r1, [pc, #56]	; (8002404 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023cc:	4a0e      	ldr	r2, [pc, #56]	; (8002408 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023d0:	e002      	b.n	80023d8 <LoopCopyDataInit>

080023d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023d6:	3304      	adds	r3, #4

080023d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023dc:	d3f9      	bcc.n	80023d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023de:	4a0b      	ldr	r2, [pc, #44]	; (800240c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023e0:	4c0b      	ldr	r4, [pc, #44]	; (8002410 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e4:	e001      	b.n	80023ea <LoopFillZerobss>

080023e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e8:	3204      	adds	r2, #4

080023ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023ec:	d3fb      	bcc.n	80023e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023ee:	f7ff ffb5 	bl	800235c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023f2:	f00c fd61 	bl	800eeb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023f6:	f7ff fca9 	bl	8001d4c <main>
  bx  lr    
 80023fa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80023fc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002404:	200001b8 	.word	0x200001b8
  ldr r2, =_sidata
 8002408:	08011a28 	.word	0x08011a28
  ldr r2, =_sbss
 800240c:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 8002410:	2000a6cc 	.word	0x2000a6cc

08002414 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002414:	e7fe      	b.n	8002414 <ADC_IRQHandler>

08002416 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800241a:	f000 fa5d 	bl	80028d8 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800241e:	20ca      	movs	r0, #202	; 0xca
 8002420:	f000 f95d 	bl	80026de <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002424:	20c3      	movs	r0, #195	; 0xc3
 8002426:	f000 f967 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800242a:	2008      	movs	r0, #8
 800242c:	f000 f964 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002430:	2050      	movs	r0, #80	; 0x50
 8002432:	f000 f961 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8002436:	20cf      	movs	r0, #207	; 0xcf
 8002438:	f000 f951 	bl	80026de <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800243c:	2000      	movs	r0, #0
 800243e:	f000 f95b 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8002442:	20c1      	movs	r0, #193	; 0xc1
 8002444:	f000 f958 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002448:	2030      	movs	r0, #48	; 0x30
 800244a:	f000 f955 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800244e:	20ed      	movs	r0, #237	; 0xed
 8002450:	f000 f945 	bl	80026de <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002454:	2064      	movs	r0, #100	; 0x64
 8002456:	f000 f94f 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800245a:	2003      	movs	r0, #3
 800245c:	f000 f94c 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002460:	2012      	movs	r0, #18
 8002462:	f000 f949 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8002466:	2081      	movs	r0, #129	; 0x81
 8002468:	f000 f946 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 800246c:	20e8      	movs	r0, #232	; 0xe8
 800246e:	f000 f936 	bl	80026de <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8002472:	2085      	movs	r0, #133	; 0x85
 8002474:	f000 f940 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002478:	2000      	movs	r0, #0
 800247a:	f000 f93d 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800247e:	2078      	movs	r0, #120	; 0x78
 8002480:	f000 f93a 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002484:	20cb      	movs	r0, #203	; 0xcb
 8002486:	f000 f92a 	bl	80026de <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800248a:	2039      	movs	r0, #57	; 0x39
 800248c:	f000 f934 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002490:	202c      	movs	r0, #44	; 0x2c
 8002492:	f000 f931 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002496:	2000      	movs	r0, #0
 8002498:	f000 f92e 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800249c:	2034      	movs	r0, #52	; 0x34
 800249e:	f000 f92b 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80024a2:	2002      	movs	r0, #2
 80024a4:	f000 f928 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80024a8:	20f7      	movs	r0, #247	; 0xf7
 80024aa:	f000 f918 	bl	80026de <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80024ae:	2020      	movs	r0, #32
 80024b0:	f000 f922 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80024b4:	20ea      	movs	r0, #234	; 0xea
 80024b6:	f000 f912 	bl	80026de <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80024ba:	2000      	movs	r0, #0
 80024bc:	f000 f91c 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80024c0:	2000      	movs	r0, #0
 80024c2:	f000 f919 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80024c6:	20b1      	movs	r0, #177	; 0xb1
 80024c8:	f000 f909 	bl	80026de <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80024cc:	2000      	movs	r0, #0
 80024ce:	f000 f913 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80024d2:	201b      	movs	r0, #27
 80024d4:	f000 f910 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80024d8:	20b6      	movs	r0, #182	; 0xb6
 80024da:	f000 f900 	bl	80026de <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80024de:	200a      	movs	r0, #10
 80024e0:	f000 f90a 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80024e4:	20a2      	movs	r0, #162	; 0xa2
 80024e6:	f000 f907 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80024ea:	20c0      	movs	r0, #192	; 0xc0
 80024ec:	f000 f8f7 	bl	80026de <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80024f0:	2010      	movs	r0, #16
 80024f2:	f000 f901 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80024f6:	20c1      	movs	r0, #193	; 0xc1
 80024f8:	f000 f8f1 	bl	80026de <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80024fc:	2010      	movs	r0, #16
 80024fe:	f000 f8fb 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002502:	20c5      	movs	r0, #197	; 0xc5
 8002504:	f000 f8eb 	bl	80026de <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002508:	2045      	movs	r0, #69	; 0x45
 800250a:	f000 f8f5 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800250e:	2015      	movs	r0, #21
 8002510:	f000 f8f2 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002514:	20c7      	movs	r0, #199	; 0xc7
 8002516:	f000 f8e2 	bl	80026de <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800251a:	2090      	movs	r0, #144	; 0x90
 800251c:	f000 f8ec 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002520:	2036      	movs	r0, #54	; 0x36
 8002522:	f000 f8dc 	bl	80026de <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002526:	20c8      	movs	r0, #200	; 0xc8
 8002528:	f000 f8e6 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800252c:	20f2      	movs	r0, #242	; 0xf2
 800252e:	f000 f8d6 	bl	80026de <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002532:	2000      	movs	r0, #0
 8002534:	f000 f8e0 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002538:	20b0      	movs	r0, #176	; 0xb0
 800253a:	f000 f8d0 	bl	80026de <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800253e:	20c2      	movs	r0, #194	; 0xc2
 8002540:	f000 f8da 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002544:	20b6      	movs	r0, #182	; 0xb6
 8002546:	f000 f8ca 	bl	80026de <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800254a:	200a      	movs	r0, #10
 800254c:	f000 f8d4 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002550:	20a7      	movs	r0, #167	; 0xa7
 8002552:	f000 f8d1 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002556:	2027      	movs	r0, #39	; 0x27
 8002558:	f000 f8ce 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800255c:	2004      	movs	r0, #4
 800255e:	f000 f8cb 	bl	80026f8 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8002562:	202a      	movs	r0, #42	; 0x2a
 8002564:	f000 f8bb 	bl	80026de <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002568:	2000      	movs	r0, #0
 800256a:	f000 f8c5 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800256e:	2000      	movs	r0, #0
 8002570:	f000 f8c2 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002574:	2000      	movs	r0, #0
 8002576:	f000 f8bf 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800257a:	20ef      	movs	r0, #239	; 0xef
 800257c:	f000 f8bc 	bl	80026f8 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002580:	202b      	movs	r0, #43	; 0x2b
 8002582:	f000 f8ac 	bl	80026de <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002586:	2000      	movs	r0, #0
 8002588:	f000 f8b6 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800258c:	2000      	movs	r0, #0
 800258e:	f000 f8b3 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002592:	2001      	movs	r0, #1
 8002594:	f000 f8b0 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002598:	203f      	movs	r0, #63	; 0x3f
 800259a:	f000 f8ad 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800259e:	20f6      	movs	r0, #246	; 0xf6
 80025a0:	f000 f89d 	bl	80026de <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80025a4:	2001      	movs	r0, #1
 80025a6:	f000 f8a7 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80025aa:	2000      	movs	r0, #0
 80025ac:	f000 f8a4 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80025b0:	2006      	movs	r0, #6
 80025b2:	f000 f8a1 	bl	80026f8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80025b6:	202c      	movs	r0, #44	; 0x2c
 80025b8:	f000 f891 	bl	80026de <ili9341_WriteReg>
  LCD_Delay(200);
 80025bc:	20c8      	movs	r0, #200	; 0xc8
 80025be:	f000 fa79 	bl	8002ab4 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80025c2:	2026      	movs	r0, #38	; 0x26
 80025c4:	f000 f88b 	bl	80026de <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80025c8:	2001      	movs	r0, #1
 80025ca:	f000 f895 	bl	80026f8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80025ce:	20e0      	movs	r0, #224	; 0xe0
 80025d0:	f000 f885 	bl	80026de <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80025d4:	200f      	movs	r0, #15
 80025d6:	f000 f88f 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80025da:	2029      	movs	r0, #41	; 0x29
 80025dc:	f000 f88c 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80025e0:	2024      	movs	r0, #36	; 0x24
 80025e2:	f000 f889 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80025e6:	200c      	movs	r0, #12
 80025e8:	f000 f886 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80025ec:	200e      	movs	r0, #14
 80025ee:	f000 f883 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80025f2:	2009      	movs	r0, #9
 80025f4:	f000 f880 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80025f8:	204e      	movs	r0, #78	; 0x4e
 80025fa:	f000 f87d 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80025fe:	2078      	movs	r0, #120	; 0x78
 8002600:	f000 f87a 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002604:	203c      	movs	r0, #60	; 0x3c
 8002606:	f000 f877 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800260a:	2009      	movs	r0, #9
 800260c:	f000 f874 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002610:	2013      	movs	r0, #19
 8002612:	f000 f871 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002616:	2005      	movs	r0, #5
 8002618:	f000 f86e 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800261c:	2017      	movs	r0, #23
 800261e:	f000 f86b 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002622:	2011      	movs	r0, #17
 8002624:	f000 f868 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002628:	2000      	movs	r0, #0
 800262a:	f000 f865 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800262e:	20e1      	movs	r0, #225	; 0xe1
 8002630:	f000 f855 	bl	80026de <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002634:	2000      	movs	r0, #0
 8002636:	f000 f85f 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800263a:	2016      	movs	r0, #22
 800263c:	f000 f85c 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002640:	201b      	movs	r0, #27
 8002642:	f000 f859 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002646:	2004      	movs	r0, #4
 8002648:	f000 f856 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800264c:	2011      	movs	r0, #17
 800264e:	f000 f853 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002652:	2007      	movs	r0, #7
 8002654:	f000 f850 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002658:	2031      	movs	r0, #49	; 0x31
 800265a:	f000 f84d 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800265e:	2033      	movs	r0, #51	; 0x33
 8002660:	f000 f84a 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002664:	2042      	movs	r0, #66	; 0x42
 8002666:	f000 f847 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800266a:	2005      	movs	r0, #5
 800266c:	f000 f844 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002670:	200c      	movs	r0, #12
 8002672:	f000 f841 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002676:	200a      	movs	r0, #10
 8002678:	f000 f83e 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800267c:	2028      	movs	r0, #40	; 0x28
 800267e:	f000 f83b 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8002682:	202f      	movs	r0, #47	; 0x2f
 8002684:	f000 f838 	bl	80026f8 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002688:	200f      	movs	r0, #15
 800268a:	f000 f835 	bl	80026f8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800268e:	2011      	movs	r0, #17
 8002690:	f000 f825 	bl	80026de <ili9341_WriteReg>
  LCD_Delay(200);
 8002694:	20c8      	movs	r0, #200	; 0xc8
 8002696:	f000 fa0d 	bl	8002ab4 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800269a:	2029      	movs	r0, #41	; 0x29
 800269c:	f000 f81f 	bl	80026de <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80026a0:	202c      	movs	r0, #44	; 0x2c
 80026a2:	f000 f81c 	bl	80026de <ili9341_WriteReg>
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}

080026aa <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80026ae:	f000 f913 	bl	80028d8 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80026b2:	2103      	movs	r1, #3
 80026b4:	20d3      	movs	r0, #211	; 0xd3
 80026b6:	f000 f82c 	bl	8002712 <ili9341_ReadData>
 80026ba:	4603      	mov	r3, r0
 80026bc:	b29b      	uxth	r3, r3
}
 80026be:	4618      	mov	r0, r3
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80026c6:	2029      	movs	r0, #41	; 0x29
 80026c8:	f000 f809 	bl	80026de <ili9341_WriteReg>
}
 80026cc:	bf00      	nop
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80026d4:	2028      	movs	r0, #40	; 0x28
 80026d6:	f000 f802 	bl	80026de <ili9341_WriteReg>
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}

080026de <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	4603      	mov	r3, r0
 80026e6:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 f98e 	bl	8002a0c <LCD_IO_WriteReg>
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	4618      	mov	r0, r3
 8002706:	f000 f95f 	bl	80029c8 <LCD_IO_WriteData>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	4603      	mov	r3, r0
 800271a:	460a      	mov	r2, r1
 800271c:	80fb      	strh	r3, [r7, #6]
 800271e:	4613      	mov	r3, r2
 8002720:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002722:	797a      	ldrb	r2, [r7, #5]
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	4611      	mov	r1, r2
 8002728:	4618      	mov	r0, r3
 800272a:	f000 f991 	bl	8002a50 <LCD_IO_ReadData>
 800272e:	4603      	mov	r3, r0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 800273c:	23f0      	movs	r3, #240	; 0xf0
}
 800273e:	4618      	mov	r0, r3
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 800274c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002750:	4618      	mov	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
	...

0800275c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002760:	4819      	ldr	r0, [pc, #100]	; (80027c8 <SPIx_Init+0x6c>)
 8002762:	f005 fc72 	bl	800804a <HAL_SPI_GetState>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d12b      	bne.n	80027c4 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 800276c:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <SPIx_Init+0x6c>)
 800276e:	4a17      	ldr	r2, [pc, #92]	; (80027cc <SPIx_Init+0x70>)
 8002770:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002772:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <SPIx_Init+0x6c>)
 8002774:	2218      	movs	r2, #24
 8002776:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002778:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <SPIx_Init+0x6c>)
 800277a:	2200      	movs	r2, #0
 800277c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800277e:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <SPIx_Init+0x6c>)
 8002780:	2200      	movs	r2, #0
 8002782:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002784:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <SPIx_Init+0x6c>)
 8002786:	2200      	movs	r2, #0
 8002788:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800278a:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <SPIx_Init+0x6c>)
 800278c:	2200      	movs	r2, #0
 800278e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002790:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <SPIx_Init+0x6c>)
 8002792:	2207      	movs	r2, #7
 8002794:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002796:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <SPIx_Init+0x6c>)
 8002798:	2200      	movs	r2, #0
 800279a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800279c:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <SPIx_Init+0x6c>)
 800279e:	2200      	movs	r2, #0
 80027a0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80027a2:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <SPIx_Init+0x6c>)
 80027a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027a8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80027aa:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <SPIx_Init+0x6c>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <SPIx_Init+0x6c>)
 80027b2:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027b6:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80027b8:	4803      	ldr	r0, [pc, #12]	; (80027c8 <SPIx_Init+0x6c>)
 80027ba:	f000 f853 	bl	8002864 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80027be:	4802      	ldr	r0, [pc, #8]	; (80027c8 <SPIx_Init+0x6c>)
 80027c0:	f004 ffa3 	bl	800770a <HAL_SPI_Init>
  } 
}
 80027c4:	bf00      	nop
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	200005c8 	.word	0x200005c8
 80027cc:	40015000 	.word	0x40015000

080027d0 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	4b09      	ldr	r3, [pc, #36]	; (8002808 <SPIx_Read+0x38>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f107 0108 	add.w	r1, r7, #8
 80027ea:	4808      	ldr	r0, [pc, #32]	; (800280c <SPIx_Read+0x3c>)
 80027ec:	f005 f97a 	bl	8007ae4 <HAL_SPI_Receive>
 80027f0:	4603      	mov	r3, r0
 80027f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80027fa:	f000 f827 	bl	800284c <SPIx_Error>
  }
  
  return readvalue;
 80027fe:	68bb      	ldr	r3, [r7, #8]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	2000003c 	.word	0x2000003c
 800280c:	200005c8 	.word	0x200005c8

08002810 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <SPIx_Write+0x34>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	1db9      	adds	r1, r7, #6
 8002824:	2201      	movs	r2, #1
 8002826:	4808      	ldr	r0, [pc, #32]	; (8002848 <SPIx_Write+0x38>)
 8002828:	f005 f820 	bl	800786c <HAL_SPI_Transmit>
 800282c:	4603      	mov	r3, r0
 800282e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002830:	7bfb      	ldrb	r3, [r7, #15]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002836:	f000 f809 	bl	800284c <SPIx_Error>
  }
}
 800283a:	bf00      	nop
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	2000003c 	.word	0x2000003c
 8002848:	200005c8 	.word	0x200005c8

0800284c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002850:	4803      	ldr	r0, [pc, #12]	; (8002860 <SPIx_Error+0x14>)
 8002852:	f004 ffe3 	bl	800781c <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002856:	f7ff ff81 	bl	800275c <SPIx_Init>
}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	200005c8 	.word	0x200005c8

08002864 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08a      	sub	sp, #40	; 0x28
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 800286c:	2300      	movs	r3, #0
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	4b17      	ldr	r3, [pc, #92]	; (80028d0 <SPIx_MspInit+0x6c>)
 8002872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002874:	4a16      	ldr	r2, [pc, #88]	; (80028d0 <SPIx_MspInit+0x6c>)
 8002876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800287a:	6453      	str	r3, [r2, #68]	; 0x44
 800287c:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <SPIx_MspInit+0x6c>)
 800287e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002880:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002888:	2300      	movs	r3, #0
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <SPIx_MspInit+0x6c>)
 800288e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002890:	4a0f      	ldr	r2, [pc, #60]	; (80028d0 <SPIx_MspInit+0x6c>)
 8002892:	f043 0320 	orr.w	r3, r3, #32
 8002896:	6313      	str	r3, [r2, #48]	; 0x30
 8002898:	4b0d      	ldr	r3, [pc, #52]	; (80028d0 <SPIx_MspInit+0x6c>)
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80028a4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80028a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80028aa:	2302      	movs	r3, #2
 80028ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80028ae:	2302      	movs	r3, #2
 80028b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80028b2:	2301      	movs	r3, #1
 80028b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80028b6:	2305      	movs	r3, #5
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80028ba:	f107 0314 	add.w	r3, r7, #20
 80028be:	4619      	mov	r1, r3
 80028c0:	4804      	ldr	r0, [pc, #16]	; (80028d4 <SPIx_MspInit+0x70>)
 80028c2:	f001 ff23 	bl	800470c <HAL_GPIO_Init>
}
 80028c6:	bf00      	nop
 80028c8:	3728      	adds	r7, #40	; 0x28
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40021400 	.word	0x40021400

080028d8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80028de:	4b36      	ldr	r3, [pc, #216]	; (80029b8 <LCD_IO_Init+0xe0>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d164      	bne.n	80029b0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80028e6:	4b34      	ldr	r3, [pc, #208]	; (80029b8 <LCD_IO_Init+0xe0>)
 80028e8:	2201      	movs	r2, #1
 80028ea:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80028ec:	2300      	movs	r3, #0
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	4b32      	ldr	r3, [pc, #200]	; (80029bc <LCD_IO_Init+0xe4>)
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	4a31      	ldr	r2, [pc, #196]	; (80029bc <LCD_IO_Init+0xe4>)
 80028f6:	f043 0308 	orr.w	r3, r3, #8
 80028fa:	6313      	str	r3, [r2, #48]	; 0x30
 80028fc:	4b2f      	ldr	r3, [pc, #188]	; (80029bc <LCD_IO_Init+0xe4>)
 80028fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002900:	f003 0308 	and.w	r3, r3, #8
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002908:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800290c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800290e:	2301      	movs	r3, #1
 8002910:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002916:	2302      	movs	r3, #2
 8002918:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800291a:	f107 030c 	add.w	r3, r7, #12
 800291e:	4619      	mov	r1, r3
 8002920:	4827      	ldr	r0, [pc, #156]	; (80029c0 <LCD_IO_Init+0xe8>)
 8002922:	f001 fef3 	bl	800470c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	607b      	str	r3, [r7, #4]
 800292a:	4b24      	ldr	r3, [pc, #144]	; (80029bc <LCD_IO_Init+0xe4>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	4a23      	ldr	r2, [pc, #140]	; (80029bc <LCD_IO_Init+0xe4>)
 8002930:	f043 0308 	orr.w	r3, r3, #8
 8002934:	6313      	str	r3, [r2, #48]	; 0x30
 8002936:	4b21      	ldr	r3, [pc, #132]	; (80029bc <LCD_IO_Init+0xe4>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	607b      	str	r3, [r7, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002946:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002948:	2301      	movs	r3, #1
 800294a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002950:	2302      	movs	r3, #2
 8002952:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002954:	f107 030c 	add.w	r3, r7, #12
 8002958:	4619      	mov	r1, r3
 800295a:	4819      	ldr	r0, [pc, #100]	; (80029c0 <LCD_IO_Init+0xe8>)
 800295c:	f001 fed6 	bl	800470c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002960:	2300      	movs	r3, #0
 8002962:	603b      	str	r3, [r7, #0]
 8002964:	4b15      	ldr	r3, [pc, #84]	; (80029bc <LCD_IO_Init+0xe4>)
 8002966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002968:	4a14      	ldr	r2, [pc, #80]	; (80029bc <LCD_IO_Init+0xe4>)
 800296a:	f043 0304 	orr.w	r3, r3, #4
 800296e:	6313      	str	r3, [r2, #48]	; 0x30
 8002970:	4b12      	ldr	r3, [pc, #72]	; (80029bc <LCD_IO_Init+0xe4>)
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	603b      	str	r3, [r7, #0]
 800297a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800297c:	2304      	movs	r3, #4
 800297e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002980:	2301      	movs	r3, #1
 8002982:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002988:	2302      	movs	r3, #2
 800298a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800298c:	f107 030c 	add.w	r3, r7, #12
 8002990:	4619      	mov	r1, r3
 8002992:	480c      	ldr	r0, [pc, #48]	; (80029c4 <LCD_IO_Init+0xec>)
 8002994:	f001 feba 	bl	800470c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002998:	2200      	movs	r2, #0
 800299a:	2104      	movs	r1, #4
 800299c:	4809      	ldr	r0, [pc, #36]	; (80029c4 <LCD_IO_Init+0xec>)
 800299e:	f002 f985 	bl	8004cac <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80029a2:	2201      	movs	r2, #1
 80029a4:	2104      	movs	r1, #4
 80029a6:	4807      	ldr	r0, [pc, #28]	; (80029c4 <LCD_IO_Init+0xec>)
 80029a8:	f002 f980 	bl	8004cac <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80029ac:	f7ff fed6 	bl	800275c <SPIx_Init>
  }
}
 80029b0:	bf00      	nop
 80029b2:	3720      	adds	r7, #32
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20000620 	.word	0x20000620
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40020c00 	.word	0x40020c00
 80029c4:	40020800 	.word	0x40020800

080029c8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80029d2:	2201      	movs	r2, #1
 80029d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029d8:	480a      	ldr	r0, [pc, #40]	; (8002a04 <LCD_IO_WriteData+0x3c>)
 80029da:	f002 f967 	bl	8004cac <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80029de:	2200      	movs	r2, #0
 80029e0:	2104      	movs	r1, #4
 80029e2:	4809      	ldr	r0, [pc, #36]	; (8002a08 <LCD_IO_WriteData+0x40>)
 80029e4:	f002 f962 	bl	8004cac <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80029e8:	88fb      	ldrh	r3, [r7, #6]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff ff10 	bl	8002810 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80029f0:	2201      	movs	r2, #1
 80029f2:	2104      	movs	r1, #4
 80029f4:	4804      	ldr	r0, [pc, #16]	; (8002a08 <LCD_IO_WriteData+0x40>)
 80029f6:	f002 f959 	bl	8004cac <HAL_GPIO_WritePin>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40020c00 	.word	0x40020c00
 8002a08:	40020800 	.word	0x40020800

08002a0c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002a16:	2200      	movs	r2, #0
 8002a18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a1c:	480a      	ldr	r0, [pc, #40]	; (8002a48 <LCD_IO_WriteReg+0x3c>)
 8002a1e:	f002 f945 	bl	8004cac <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002a22:	2200      	movs	r2, #0
 8002a24:	2104      	movs	r1, #4
 8002a26:	4809      	ldr	r0, [pc, #36]	; (8002a4c <LCD_IO_WriteReg+0x40>)
 8002a28:	f002 f940 	bl	8004cac <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff feed 	bl	8002810 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002a36:	2201      	movs	r2, #1
 8002a38:	2104      	movs	r1, #4
 8002a3a:	4804      	ldr	r0, [pc, #16]	; (8002a4c <LCD_IO_WriteReg+0x40>)
 8002a3c:	f002 f936 	bl	8004cac <HAL_GPIO_WritePin>
}
 8002a40:	bf00      	nop
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40020c00 	.word	0x40020c00
 8002a4c:	40020800 	.word	0x40020800

08002a50 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	460a      	mov	r2, r1
 8002a5a:	80fb      	strh	r3, [r7, #6]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002a64:	2200      	movs	r2, #0
 8002a66:	2104      	movs	r1, #4
 8002a68:	4810      	ldr	r0, [pc, #64]	; (8002aac <LCD_IO_ReadData+0x5c>)
 8002a6a:	f002 f91f 	bl	8004cac <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a74:	480e      	ldr	r0, [pc, #56]	; (8002ab0 <LCD_IO_ReadData+0x60>)
 8002a76:	f002 f919 	bl	8004cac <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002a7a:	88fb      	ldrh	r3, [r7, #6]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff fec7 	bl	8002810 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002a82:	797b      	ldrb	r3, [r7, #5]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff fea3 	bl	80027d0 <SPIx_Read>
 8002a8a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a92:	4807      	ldr	r0, [pc, #28]	; (8002ab0 <LCD_IO_ReadData+0x60>)
 8002a94:	f002 f90a 	bl	8004cac <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002a98:	2201      	movs	r2, #1
 8002a9a:	2104      	movs	r1, #4
 8002a9c:	4803      	ldr	r0, [pc, #12]	; (8002aac <LCD_IO_ReadData+0x5c>)
 8002a9e:	f002 f905 	bl	8004cac <HAL_GPIO_WritePin>
  
  return readvalue;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40020800 	.word	0x40020800
 8002ab0:	40020c00 	.word	0x40020c00

08002ab4 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 ffc5 	bl	8003a4c <HAL_Delay>
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002ad0:	4b2d      	ldr	r3, [pc, #180]	; (8002b88 <BSP_LCD_Init+0xbc>)
 8002ad2:	4a2e      	ldr	r2, [pc, #184]	; (8002b8c <BSP_LCD_Init+0xc0>)
 8002ad4:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002ad6:	4b2c      	ldr	r3, [pc, #176]	; (8002b88 <BSP_LCD_Init+0xbc>)
 8002ad8:	2209      	movs	r2, #9
 8002ada:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002adc:	4b2a      	ldr	r3, [pc, #168]	; (8002b88 <BSP_LCD_Init+0xbc>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002ae2:	4b29      	ldr	r3, [pc, #164]	; (8002b88 <BSP_LCD_Init+0xbc>)
 8002ae4:	221d      	movs	r2, #29
 8002ae6:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002ae8:	4b27      	ldr	r3, [pc, #156]	; (8002b88 <BSP_LCD_Init+0xbc>)
 8002aea:	2203      	movs	r2, #3
 8002aec:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002aee:	4b26      	ldr	r3, [pc, #152]	; (8002b88 <BSP_LCD_Init+0xbc>)
 8002af0:	f240 120d 	movw	r2, #269	; 0x10d
 8002af4:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002af6:	4b24      	ldr	r3, [pc, #144]	; (8002b88 <BSP_LCD_Init+0xbc>)
 8002af8:	f240 1243 	movw	r2, #323	; 0x143
 8002afc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002afe:	4b22      	ldr	r3, [pc, #136]	; (8002b88 <BSP_LCD_Init+0xbc>)
 8002b00:	f240 1217 	movw	r2, #279	; 0x117
 8002b04:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002b06:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <BSP_LCD_Init+0xbc>)
 8002b08:	f240 1247 	movw	r2, #327	; 0x147
 8002b0c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002b0e:	4b1e      	ldr	r3, [pc, #120]	; (8002b88 <BSP_LCD_Init+0xbc>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002b16:	4b1c      	ldr	r3, [pc, #112]	; (8002b88 <BSP_LCD_Init+0xbc>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002b1e:	4b1a      	ldr	r3, [pc, #104]	; (8002b88 <BSP_LCD_Init+0xbc>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002b26:	4b1a      	ldr	r3, [pc, #104]	; (8002b90 <BSP_LCD_Init+0xc4>)
 8002b28:	2208      	movs	r2, #8
 8002b2a:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 8002b2c:	4b18      	ldr	r3, [pc, #96]	; (8002b90 <BSP_LCD_Init+0xc4>)
 8002b2e:	2260      	movs	r2, #96	; 0x60
 8002b30:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 3;
 8002b32:	4b17      	ldr	r3, [pc, #92]	; (8002b90 <BSP_LCD_Init+0xc4>)
 8002b34:	2203      	movs	r2, #3
 8002b36:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002b38:	4b15      	ldr	r3, [pc, #84]	; (8002b90 <BSP_LCD_Init+0xc4>)
 8002b3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b3e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002b40:	4813      	ldr	r0, [pc, #76]	; (8002b90 <BSP_LCD_Init+0xc4>)
 8002b42:	f004 fb91 	bl	8007268 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002b46:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <BSP_LCD_Init+0xbc>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002b4c:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <BSP_LCD_Init+0xbc>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002b52:	4b0d      	ldr	r3, [pc, #52]	; (8002b88 <BSP_LCD_Init+0xbc>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002b58:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <BSP_LCD_Init+0xbc>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002b5e:	f000 fc35 	bl	80033cc <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002b62:	4809      	ldr	r0, [pc, #36]	; (8002b88 <BSP_LCD_Init+0xbc>)
 8002b64:	f002 f8bc 	bl	8004ce0 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002b68:	4b0a      	ldr	r3, [pc, #40]	; (8002b94 <BSP_LCD_Init+0xc8>)
 8002b6a:	4a0b      	ldr	r2, [pc, #44]	; (8002b98 <BSP_LCD_Init+0xcc>)
 8002b6c:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002b6e:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <BSP_LCD_Init+0xc8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002b76:	f000 fd5d 	bl	8003634 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002b7a:	4808      	ldr	r0, [pc, #32]	; (8002b9c <BSP_LCD_Init+0xd0>)
 8002b7c:	f000 f8f8 	bl	8002d70 <BSP_LCD_SetFont>

  return LCD_OK;
 8002b80:	2300      	movs	r3, #0
}  
 8002b82:	4618      	mov	r0, r3
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000624 	.word	0x20000624
 8002b8c:	40016800 	.word	0x40016800
 8002b90:	2000070c 	.word	0x2000070c
 8002b94:	20000758 	.word	0x20000758
 8002b98:	20000004 	.word	0x20000004
 8002b9c:	20000040 	.word	0x20000040

08002ba0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002ba4:	4b03      	ldr	r3, [pc, #12]	; (8002bb4 <BSP_LCD_GetXSize+0x14>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002baa:	4798      	blx	r3
 8002bac:	4603      	mov	r3, r0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000758 	.word	0x20000758

08002bb8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002bbc:	4b03      	ldr	r3, [pc, #12]	; (8002bcc <BSP_LCD_GetYSize+0x14>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc2:	4798      	blx	r3
 8002bc4:	4603      	mov	r3, r0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000758 	.word	0x20000758

08002bd0 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b090      	sub	sp, #64	; 0x40
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	6039      	str	r1, [r7, #0]
 8002bda:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002be0:	f7ff ffde 	bl	8002ba0 <BSP_LCD_GetXSize>
 8002be4:	4603      	mov	r3, r0
 8002be6:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002bec:	f7ff ffe4 	bl	8002bb8 <BSP_LCD_GetYSize>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002bfc:	23ff      	movs	r3, #255	; 0xff
 8002bfe:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002c10:	2300      	movs	r3, #0
 8002c12:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002c16:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002c1c:	2307      	movs	r3, #7
 8002c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002c20:	f7ff ffbe 	bl	8002ba0 <BSP_LCD_GetXSize>
 8002c24:	4603      	mov	r3, r0
 8002c26:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002c28:	f7ff ffc6 	bl	8002bb8 <BSP_LCD_GetYSize>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002c30:	88fa      	ldrh	r2, [r7, #6]
 8002c32:	f107 030c 	add.w	r3, r7, #12
 8002c36:	4619      	mov	r1, r3
 8002c38:	4814      	ldr	r0, [pc, #80]	; (8002c8c <BSP_LCD_LayerDefaultInit+0xbc>)
 8002c3a:	f002 f9e3 	bl	8005004 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002c3e:	88fa      	ldrh	r2, [r7, #6]
 8002c40:	4913      	ldr	r1, [pc, #76]	; (8002c90 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002c42:	4613      	mov	r3, r2
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c52:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002c54:	88fa      	ldrh	r2, [r7, #6]
 8002c56:	490e      	ldr	r1, [pc, #56]	; (8002c90 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002c58:	4613      	mov	r3, r2
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	3308      	adds	r3, #8
 8002c64:	4a0b      	ldr	r2, [pc, #44]	; (8002c94 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002c66:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002c68:	88fa      	ldrh	r2, [r7, #6]
 8002c6a:	4909      	ldr	r1, [pc, #36]	; (8002c90 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002c7a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002c7c:	4803      	ldr	r0, [pc, #12]	; (8002c8c <BSP_LCD_LayerDefaultInit+0xbc>)
 8002c7e:	f002 f9ff 	bl	8005080 <HAL_LTDC_EnableDither>
}
 8002c82:	bf00      	nop
 8002c84:	3740      	adds	r7, #64	; 0x40
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000624 	.word	0x20000624
 8002c90:	20000740 	.word	0x20000740
 8002c94:	20000040 	.word	0x20000040

08002c98 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002ca0:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <BSP_LCD_SelectLayer+0x1c>)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6013      	str	r3, [r2, #0]
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	2000073c 	.word	0x2000073c

08002cb8 <BSP_LCD_GetTextColor>:
/**
  * @brief  Gets the LCD Text color.
  * @retval Text color
  */
uint32_t BSP_LCD_GetTextColor(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].TextColor;
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <BSP_LCD_GetTextColor+0x20>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	4906      	ldr	r1, [pc, #24]	; (8002cdc <BSP_LCD_GetTextColor+0x24>)
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	4413      	add	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	681b      	ldr	r3, [r3, #0]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	2000073c 	.word	0x2000073c
 8002cdc:	20000740 	.word	0x20000740

08002ce0 <BSP_LCD_GetBackColor>:
/**
  * @brief  Gets the LCD Background color. 
  * @retval Background color  
  */
uint32_t BSP_LCD_GetBackColor(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].BackColor;
 8002ce4:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <BSP_LCD_GetBackColor+0x24>)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	4907      	ldr	r1, [pc, #28]	; (8002d08 <BSP_LCD_GetBackColor+0x28>)
 8002cea:	4613      	mov	r3, r2
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	4413      	add	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	681b      	ldr	r3, [r3, #0]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	2000073c 	.word	0x2000073c
 8002d08:	20000740 	.word	0x20000740

08002d0c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002d14:	4b07      	ldr	r3, [pc, #28]	; (8002d34 <BSP_LCD_SetTextColor+0x28>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4907      	ldr	r1, [pc, #28]	; (8002d38 <BSP_LCD_SetTextColor+0x2c>)
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	4413      	add	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	440b      	add	r3, r1
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	601a      	str	r2, [r3, #0]
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	2000073c 	.word	0x2000073c
 8002d38:	20000740 	.word	0x20000740

08002d3c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002d44:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <BSP_LCD_SetBackColor+0x2c>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4908      	ldr	r1, [pc, #32]	; (8002d6c <BSP_LCD_SetBackColor+0x30>)
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	4413      	add	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	3304      	adds	r3, #4
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	601a      	str	r2, [r3, #0]
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	2000073c 	.word	0x2000073c
 8002d6c:	20000740 	.word	0x20000740

08002d70 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002d78:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <BSP_LCD_SetFont+0x2c>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4908      	ldr	r1, [pc, #32]	; (8002da0 <BSP_LCD_SetFont+0x30>)
 8002d7e:	4613      	mov	r3, r2
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	4413      	add	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	440b      	add	r3, r1
 8002d88:	3308      	adds	r3, #8
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	601a      	str	r2, [r3, #0]
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	2000073c 	.word	0x2000073c
 8002da0:	20000740 	.word	0x20000740

08002da4 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af02      	add	r7, sp, #8
 8002daa:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002dac:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <BSP_LCD_Clear+0x48>)
 8002dae:	681c      	ldr	r4, [r3, #0]
 8002db0:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <BSP_LCD_Clear+0x48>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a0e      	ldr	r2, [pc, #56]	; (8002df0 <BSP_LCD_Clear+0x4c>)
 8002db6:	2134      	movs	r1, #52	; 0x34
 8002db8:	fb01 f303 	mul.w	r3, r1, r3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	335c      	adds	r3, #92	; 0x5c
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	461e      	mov	r6, r3
 8002dc4:	f7ff feec 	bl	8002ba0 <BSP_LCD_GetXSize>
 8002dc8:	4605      	mov	r5, r0
 8002dca:	f7ff fef5 	bl	8002bb8 <BSP_LCD_GetYSize>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	9301      	str	r3, [sp, #4]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	462a      	mov	r2, r5
 8002ddc:	4631      	mov	r1, r6
 8002dde:	4620      	mov	r0, r4
 8002de0:	f000 fbf0 	bl	80035c4 <FillBuffer>
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dec:	2000073c 	.word	0x2000073c
 8002df0:	20000624 	.word	0x20000624

08002df4 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002df4:	b5b0      	push	{r4, r5, r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af02      	add	r7, sp, #8
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	80fb      	strh	r3, [r7, #6]
 8002dfe:	460b      	mov	r3, r1
 8002e00:	80bb      	strh	r3, [r7, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002e0a:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <BSP_LCD_DrawHLine+0x70>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a16      	ldr	r2, [pc, #88]	; (8002e68 <BSP_LCD_DrawHLine+0x74>)
 8002e10:	2134      	movs	r1, #52	; 0x34
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	335c      	adds	r3, #92	; 0x5c
 8002e1a:	681c      	ldr	r4, [r3, #0]
 8002e1c:	f7ff fec0 	bl	8002ba0 <BSP_LCD_GetXSize>
 8002e20:	4602      	mov	r2, r0
 8002e22:	88bb      	ldrh	r3, [r7, #4]
 8002e24:	fb03 f202 	mul.w	r2, r3, r2
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4423      	add	r3, r4
 8002e30:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002e32:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <BSP_LCD_DrawHLine+0x70>)
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	68f9      	ldr	r1, [r7, #12]
 8002e38:	887c      	ldrh	r4, [r7, #2]
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <BSP_LCD_DrawHLine+0x70>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	4d0b      	ldr	r5, [pc, #44]	; (8002e6c <BSP_LCD_DrawHLine+0x78>)
 8002e40:	4613      	mov	r3, r2
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	442b      	add	r3, r5
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	9301      	str	r3, [sp, #4]
 8002e4e:	2300      	movs	r3, #0
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	2301      	movs	r3, #1
 8002e54:	4622      	mov	r2, r4
 8002e56:	f000 fbb5 	bl	80035c4 <FillBuffer>
}
 8002e5a:	bf00      	nop
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bdb0      	pop	{r4, r5, r7, pc}
 8002e62:	bf00      	nop
 8002e64:	2000073c 	.word	0x2000073c
 8002e68:	20000624 	.word	0x20000624
 8002e6c:	20000740 	.word	0x20000740

08002e70 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8002e70:	b590      	push	{r4, r7, lr}
 8002e72:	b08b      	sub	sp, #44	; 0x2c
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4604      	mov	r4, r0
 8002e78:	4608      	mov	r0, r1
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4623      	mov	r3, r4
 8002e80:	80fb      	strh	r3, [r7, #6]
 8002e82:	4603      	mov	r3, r0
 8002e84:	80bb      	strh	r3, [r7, #4]
 8002e86:	460b      	mov	r3, r1
 8002e88:	807b      	strh	r3, [r7, #2]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8002e8e:	2300      	movs	r3, #0
 8002e90:	823b      	strh	r3, [r7, #16]
 8002e92:	2300      	movs	r3, #0
 8002e94:	81fb      	strh	r3, [r7, #14]
 8002e96:	2300      	movs	r3, #0
 8002e98:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	847b      	strh	r3, [r7, #34]	; 0x22
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	83fb      	strh	r3, [r7, #30]
 8002eaa:	2300      	movs	r3, #0
 8002eac:	83bb      	strh	r3, [r7, #28]
 8002eae:	2300      	movs	r3, #0
 8002eb0:	837b      	strh	r3, [r7, #26]
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	833b      	strh	r3, [r7, #24]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	82fb      	strh	r3, [r7, #22]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8002ec2:	887a      	ldrh	r2, [r7, #2]
 8002ec4:	88fb      	ldrh	r3, [r7, #6]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bfb8      	it	lt
 8002ecc:	425b      	neglt	r3, r3
 8002ece:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8002ed0:	883a      	ldrh	r2, [r7, #0]
 8002ed2:	88bb      	ldrh	r3, [r7, #4]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	bfb8      	it	lt
 8002eda:	425b      	neglt	r3, r3
 8002edc:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8002ede:	88fb      	ldrh	r3, [r7, #6]
 8002ee0:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 8002ee2:	88bb      	ldrh	r3, [r7, #4]
 8002ee4:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 8002ee6:	887a      	ldrh	r2, [r7, #2]
 8002ee8:	88fb      	ldrh	r3, [r7, #6]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d304      	bcc.n	8002ef8 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	843b      	strh	r3, [r7, #32]
 8002ef6:	e005      	b.n	8002f04 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8002ef8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002efc:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8002efe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f02:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 8002f04:	883a      	ldrh	r2, [r7, #0]
 8002f06:	88bb      	ldrh	r3, [r7, #4]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d304      	bcc.n	8002f16 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8002f10:	2301      	movs	r3, #1
 8002f12:	83bb      	strh	r3, [r7, #28]
 8002f14:	e005      	b.n	8002f22 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8002f16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f1a:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8002f1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f20:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002f22:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002f26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	db10      	blt.n	8002f50 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002f2e:	2300      	movs	r3, #0
 8002f30:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002f32:	2300      	movs	r3, #0
 8002f34:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8002f36:	8a3b      	ldrh	r3, [r7, #16]
 8002f38:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8002f3a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002f3e:	0fda      	lsrs	r2, r3, #31
 8002f40:	4413      	add	r3, r2
 8002f42:	105b      	asrs	r3, r3, #1
 8002f44:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8002f46:	89fb      	ldrh	r3, [r7, #14]
 8002f48:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8002f4a:	8a3b      	ldrh	r3, [r7, #16]
 8002f4c:	82bb      	strh	r3, [r7, #20]
 8002f4e:	e00f      	b.n	8002f70 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002f50:	2300      	movs	r3, #0
 8002f52:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002f54:	2300      	movs	r3, #0
 8002f56:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8002f58:	89fb      	ldrh	r3, [r7, #14]
 8002f5a:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8002f5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f60:	0fda      	lsrs	r2, r3, #31
 8002f62:	4413      	add	r3, r2
 8002f64:	105b      	asrs	r3, r3, #1
 8002f66:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8002f68:	8a3b      	ldrh	r3, [r7, #16]
 8002f6a:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8002f6c:	89fb      	ldrh	r3, [r7, #14]
 8002f6e:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002f70:	2300      	movs	r3, #0
 8002f72:	827b      	strh	r3, [r7, #18]
 8002f74:	e037      	b.n	8002fe6 <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002f76:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8002f78:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002f7a:	4b20      	ldr	r3, [pc, #128]	; (8002ffc <BSP_LCD_DrawLine+0x18c>)
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	4c20      	ldr	r4, [pc, #128]	; (8003000 <BSP_LCD_DrawLine+0x190>)
 8002f80:	4613      	mov	r3, r2
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4423      	add	r3, r4
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f000 faf3 	bl	8003578 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8002f92:	8b3a      	ldrh	r2, [r7, #24]
 8002f94:	8afb      	ldrh	r3, [r7, #22]
 8002f96:	4413      	add	r3, r2
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8002f9c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002fa0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	db0e      	blt.n	8002fc6 <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 8002fa8:	8b3a      	ldrh	r2, [r7, #24]
 8002faa:	8b7b      	ldrh	r3, [r7, #26]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8002fb2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002fb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002fb6:	4413      	add	r3, r2
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8002fbc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002fbe:	8bfb      	ldrh	r3, [r7, #30]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8002fc6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002fc8:	8c3b      	ldrh	r3, [r7, #32]
 8002fca:	4413      	add	r3, r2
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8002fd0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002fd2:	8bbb      	ldrh	r3, [r7, #28]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002fda:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	827b      	strh	r3, [r7, #18]
 8002fe6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002fea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	ddc1      	ble.n	8002f76 <BSP_LCD_DrawLine+0x106>
  }
}
 8002ff2:	bf00      	nop
 8002ff4:	bf00      	nop
 8002ff6:	372c      	adds	r7, #44	; 0x2c
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd90      	pop	{r4, r7, pc}
 8002ffc:	2000073c 	.word	0x2000073c
 8003000:	20000740 	.word	0x20000740

08003004 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003004:	b590      	push	{r4, r7, lr}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	80fb      	strh	r3, [r7, #6]
 800300e:	460b      	mov	r3, r1
 8003010:	80bb      	strh	r3, [r7, #4]
 8003012:	4613      	mov	r3, r2
 8003014:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8003016:	887b      	ldrh	r3, [r7, #2]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	f1c3 0303 	rsb	r3, r3, #3
 800301e:	617b      	str	r3, [r7, #20]
  curx = 0;
 8003020:	2300      	movs	r3, #0
 8003022:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003024:	887b      	ldrh	r3, [r7, #2]
 8003026:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8003028:	e0c7      	b.n	80031ba <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	b29a      	uxth	r2, r3
 800302e:	88fb      	ldrh	r3, [r7, #6]
 8003030:	4413      	add	r3, r2
 8003032:	b298      	uxth	r0, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	b29b      	uxth	r3, r3
 8003038:	88ba      	ldrh	r2, [r7, #4]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	b299      	uxth	r1, r3
 800303e:	4b64      	ldr	r3, [pc, #400]	; (80031d0 <BSP_LCD_DrawCircle+0x1cc>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	4c64      	ldr	r4, [pc, #400]	; (80031d4 <BSP_LCD_DrawCircle+0x1d0>)
 8003044:	4613      	mov	r3, r2
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	4413      	add	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4423      	add	r3, r4
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	461a      	mov	r2, r3
 8003052:	f000 fa91 	bl	8003578 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	b29b      	uxth	r3, r3
 800305a:	88fa      	ldrh	r2, [r7, #6]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	b298      	uxth	r0, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	b29b      	uxth	r3, r3
 8003064:	88ba      	ldrh	r2, [r7, #4]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	b299      	uxth	r1, r3
 800306a:	4b59      	ldr	r3, [pc, #356]	; (80031d0 <BSP_LCD_DrawCircle+0x1cc>)
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	4c59      	ldr	r4, [pc, #356]	; (80031d4 <BSP_LCD_DrawCircle+0x1d0>)
 8003070:	4613      	mov	r3, r2
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4423      	add	r3, r4
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	f000 fa7b 	bl	8003578 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	b29a      	uxth	r2, r3
 8003086:	88fb      	ldrh	r3, [r7, #6]
 8003088:	4413      	add	r3, r2
 800308a:	b298      	uxth	r0, r3
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	b29b      	uxth	r3, r3
 8003090:	88ba      	ldrh	r2, [r7, #4]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	b299      	uxth	r1, r3
 8003096:	4b4e      	ldr	r3, [pc, #312]	; (80031d0 <BSP_LCD_DrawCircle+0x1cc>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	4c4e      	ldr	r4, [pc, #312]	; (80031d4 <BSP_LCD_DrawCircle+0x1d0>)
 800309c:	4613      	mov	r3, r2
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4423      	add	r3, r4
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	f000 fa65 	bl	8003578 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	88fa      	ldrh	r2, [r7, #6]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	b298      	uxth	r0, r3
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	88ba      	ldrh	r2, [r7, #4]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	b299      	uxth	r1, r3
 80030c2:	4b43      	ldr	r3, [pc, #268]	; (80031d0 <BSP_LCD_DrawCircle+0x1cc>)
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	4c43      	ldr	r4, [pc, #268]	; (80031d4 <BSP_LCD_DrawCircle+0x1d0>)
 80030c8:	4613      	mov	r3, r2
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4423      	add	r3, r4
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	f000 fa4f 	bl	8003578 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	b29a      	uxth	r2, r3
 80030de:	88fb      	ldrh	r3, [r7, #6]
 80030e0:	4413      	add	r3, r2
 80030e2:	b298      	uxth	r0, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	88bb      	ldrh	r3, [r7, #4]
 80030ea:	4413      	add	r3, r2
 80030ec:	b299      	uxth	r1, r3
 80030ee:	4b38      	ldr	r3, [pc, #224]	; (80031d0 <BSP_LCD_DrawCircle+0x1cc>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	4c38      	ldr	r4, [pc, #224]	; (80031d4 <BSP_LCD_DrawCircle+0x1d0>)
 80030f4:	4613      	mov	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	4413      	add	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4423      	add	r3, r4
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	461a      	mov	r2, r3
 8003102:	f000 fa39 	bl	8003578 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	b29b      	uxth	r3, r3
 800310a:	88fa      	ldrh	r2, [r7, #6]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	b298      	uxth	r0, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	b29a      	uxth	r2, r3
 8003114:	88bb      	ldrh	r3, [r7, #4]
 8003116:	4413      	add	r3, r2
 8003118:	b299      	uxth	r1, r3
 800311a:	4b2d      	ldr	r3, [pc, #180]	; (80031d0 <BSP_LCD_DrawCircle+0x1cc>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	4c2d      	ldr	r4, [pc, #180]	; (80031d4 <BSP_LCD_DrawCircle+0x1d0>)
 8003120:	4613      	mov	r3, r2
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4423      	add	r3, r4
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	461a      	mov	r2, r3
 800312e:	f000 fa23 	bl	8003578 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	b29a      	uxth	r2, r3
 8003136:	88fb      	ldrh	r3, [r7, #6]
 8003138:	4413      	add	r3, r2
 800313a:	b298      	uxth	r0, r3
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	b29a      	uxth	r2, r3
 8003140:	88bb      	ldrh	r3, [r7, #4]
 8003142:	4413      	add	r3, r2
 8003144:	b299      	uxth	r1, r3
 8003146:	4b22      	ldr	r3, [pc, #136]	; (80031d0 <BSP_LCD_DrawCircle+0x1cc>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	4c22      	ldr	r4, [pc, #136]	; (80031d4 <BSP_LCD_DrawCircle+0x1d0>)
 800314c:	4613      	mov	r3, r2
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	4413      	add	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4423      	add	r3, r4
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	461a      	mov	r2, r3
 800315a:	f000 fa0d 	bl	8003578 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	b29b      	uxth	r3, r3
 8003162:	88fa      	ldrh	r2, [r7, #6]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	b298      	uxth	r0, r3
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	b29a      	uxth	r2, r3
 800316c:	88bb      	ldrh	r3, [r7, #4]
 800316e:	4413      	add	r3, r2
 8003170:	b299      	uxth	r1, r3
 8003172:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <BSP_LCD_DrawCircle+0x1cc>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	4c17      	ldr	r4, [pc, #92]	; (80031d4 <BSP_LCD_DrawCircle+0x1d0>)
 8003178:	4613      	mov	r3, r2
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4423      	add	r3, r4
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	461a      	mov	r2, r3
 8003186:	f000 f9f7 	bl	8003578 <BSP_LCD_DrawPixel>

    if (d < 0)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2b00      	cmp	r3, #0
 800318e:	da06      	bge.n	800319e <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	009a      	lsls	r2, r3, #2
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	4413      	add	r3, r2
 8003198:	3306      	adds	r3, #6
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	e00a      	b.n	80031b4 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	009a      	lsls	r2, r3, #2
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	4413      	add	r3, r2
 80031aa:	330a      	adds	r3, #10
 80031ac:	617b      	str	r3, [r7, #20]
      cury--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	3b01      	subs	r3, #1
 80031b2:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	3301      	adds	r3, #1
 80031b8:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	429a      	cmp	r2, r3
 80031c0:	f67f af33 	bls.w	800302a <BSP_LCD_DrawCircle+0x26>
  } 
}
 80031c4:	bf00      	nop
 80031c6:	bf00      	nop
 80031c8:	371c      	adds	r7, #28
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd90      	pop	{r4, r7, pc}
 80031ce:	bf00      	nop
 80031d0:	2000073c 	.word	0x2000073c
 80031d4:	20000740 	.word	0x20000740

080031d8 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80031d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031dc:	b086      	sub	sp, #24
 80031de:	af02      	add	r7, sp, #8
 80031e0:	4604      	mov	r4, r0
 80031e2:	4608      	mov	r0, r1
 80031e4:	4611      	mov	r1, r2
 80031e6:	461a      	mov	r2, r3
 80031e8:	4623      	mov	r3, r4
 80031ea:	80fb      	strh	r3, [r7, #6]
 80031ec:	4603      	mov	r3, r0
 80031ee:	80bb      	strh	r3, [r7, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	807b      	strh	r3, [r7, #2]
 80031f4:	4613      	mov	r3, r2
 80031f6:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80031fc:	4b20      	ldr	r3, [pc, #128]	; (8003280 <BSP_LCD_FillRect+0xa8>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	4920      	ldr	r1, [pc, #128]	; (8003284 <BSP_LCD_FillRect+0xac>)
 8003202:	4613      	mov	r3, r2
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff fd7c 	bl	8002d0c <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003214:	4b1a      	ldr	r3, [pc, #104]	; (8003280 <BSP_LCD_FillRect+0xa8>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a1b      	ldr	r2, [pc, #108]	; (8003288 <BSP_LCD_FillRect+0xb0>)
 800321a:	2134      	movs	r1, #52	; 0x34
 800321c:	fb01 f303 	mul.w	r3, r1, r3
 8003220:	4413      	add	r3, r2
 8003222:	335c      	adds	r3, #92	; 0x5c
 8003224:	681c      	ldr	r4, [r3, #0]
 8003226:	f7ff fcbb 	bl	8002ba0 <BSP_LCD_GetXSize>
 800322a:	4602      	mov	r2, r0
 800322c:	88bb      	ldrh	r3, [r7, #4]
 800322e:	fb03 f202 	mul.w	r2, r3, r2
 8003232:	88fb      	ldrh	r3, [r7, #6]
 8003234:	4413      	add	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4423      	add	r3, r4
 800323a:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800323c:	4b10      	ldr	r3, [pc, #64]	; (8003280 <BSP_LCD_FillRect+0xa8>)
 800323e:	681c      	ldr	r4, [r3, #0]
 8003240:	68fd      	ldr	r5, [r7, #12]
 8003242:	887e      	ldrh	r6, [r7, #2]
 8003244:	f8b7 8000 	ldrh.w	r8, [r7]
 8003248:	f7ff fcaa 	bl	8002ba0 <BSP_LCD_GetXSize>
 800324c:	4602      	mov	r2, r0
 800324e:	887b      	ldrh	r3, [r7, #2]
 8003250:	1ad1      	subs	r1, r2, r3
 8003252:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <BSP_LCD_FillRect+0xa8>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	480b      	ldr	r0, [pc, #44]	; (8003284 <BSP_LCD_FillRect+0xac>)
 8003258:	4613      	mov	r3, r2
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4403      	add	r3, r0
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	9301      	str	r3, [sp, #4]
 8003266:	9100      	str	r1, [sp, #0]
 8003268:	4643      	mov	r3, r8
 800326a:	4632      	mov	r2, r6
 800326c:	4629      	mov	r1, r5
 800326e:	4620      	mov	r0, r4
 8003270:	f000 f9a8 	bl	80035c4 <FillBuffer>
}
 8003274:	bf00      	nop
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800327e:	bf00      	nop
 8003280:	2000073c 	.word	0x2000073c
 8003284:	20000740 	.word	0x20000740
 8003288:	20000624 	.word	0x20000624

0800328c <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	80fb      	strh	r3, [r7, #6]
 8003296:	460b      	mov	r3, r1
 8003298:	80bb      	strh	r3, [r7, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 800329e:	887b      	ldrh	r3, [r7, #2]
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	f1c3 0303 	rsb	r3, r3, #3
 80032a6:	617b      	str	r3, [r7, #20]

  curx = 0;
 80032a8:	2300      	movs	r3, #0
 80032aa:	613b      	str	r3, [r7, #16]
  cury = Radius;
 80032ac:	887b      	ldrh	r3, [r7, #2]
 80032ae:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80032b0:	4b44      	ldr	r3, [pc, #272]	; (80033c4 <BSP_LCD_FillCircle+0x138>)
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	4944      	ldr	r1, [pc, #272]	; (80033c8 <BSP_LCD_FillCircle+0x13c>)
 80032b6:	4613      	mov	r3, r2
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff fd22 	bl	8002d0c <BSP_LCD_SetTextColor>

  while (curx <= cury)
 80032c8:	e061      	b.n	800338e <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d021      	beq.n	8003314 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	88fa      	ldrh	r2, [r7, #6]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	b298      	uxth	r0, r3
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	b29a      	uxth	r2, r3
 80032de:	88bb      	ldrh	r3, [r7, #4]
 80032e0:	4413      	add	r3, r2
 80032e2:	b299      	uxth	r1, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	461a      	mov	r2, r3
 80032ee:	f7ff fd81 	bl	8002df4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	88fa      	ldrh	r2, [r7, #6]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	b298      	uxth	r0, r3
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	88ba      	ldrh	r2, [r7, #4]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	b299      	uxth	r1, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	b29b      	uxth	r3, r3
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	b29b      	uxth	r3, r3
 800330e:	461a      	mov	r2, r3
 8003310:	f7ff fd70 	bl	8002df4 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d021      	beq.n	800335e <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	b29b      	uxth	r3, r3
 800331e:	88fa      	ldrh	r2, [r7, #6]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	b298      	uxth	r0, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	b29b      	uxth	r3, r3
 8003328:	88ba      	ldrh	r2, [r7, #4]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	b299      	uxth	r1, r3
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	b29b      	uxth	r3, r3
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	b29b      	uxth	r3, r3
 8003336:	461a      	mov	r2, r3
 8003338:	f7ff fd5c 	bl	8002df4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	b29b      	uxth	r3, r3
 8003340:	88fa      	ldrh	r2, [r7, #6]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	b298      	uxth	r0, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	b29a      	uxth	r2, r3
 800334a:	88bb      	ldrh	r3, [r7, #4]
 800334c:	4413      	add	r3, r2
 800334e:	b299      	uxth	r1, r3
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	b29b      	uxth	r3, r3
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	b29b      	uxth	r3, r3
 8003358:	461a      	mov	r2, r3
 800335a:	f7ff fd4b 	bl	8002df4 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2b00      	cmp	r3, #0
 8003362:	da06      	bge.n	8003372 <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	009a      	lsls	r2, r3, #2
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	4413      	add	r3, r2
 800336c:	3306      	adds	r3, #6
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	e00a      	b.n	8003388 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	009a      	lsls	r2, r3, #2
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	4413      	add	r3, r2
 800337e:	330a      	adds	r3, #10
 8003380:	617b      	str	r3, [r7, #20]
      cury--;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	3b01      	subs	r3, #1
 8003386:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	3301      	adds	r3, #1
 800338c:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	429a      	cmp	r2, r3
 8003394:	d999      	bls.n	80032ca <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003396:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <BSP_LCD_FillCircle+0x138>)
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	490b      	ldr	r1, [pc, #44]	; (80033c8 <BSP_LCD_FillCircle+0x13c>)
 800339c:	4613      	mov	r3, r2
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff fcaf 	bl	8002d0c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80033ae:	887a      	ldrh	r2, [r7, #2]
 80033b0:	88b9      	ldrh	r1, [r7, #4]
 80033b2:	88fb      	ldrh	r3, [r7, #6]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff fe25 	bl	8003004 <BSP_LCD_DrawCircle>
}
 80033ba:	bf00      	nop
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	2000073c 	.word	0x2000073c
 80033c8:	20000740 	.word	0x20000740

080033cc <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08e      	sub	sp, #56	; 0x38
 80033d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80033d2:	2300      	movs	r3, #0
 80033d4:	623b      	str	r3, [r7, #32]
 80033d6:	4b61      	ldr	r3, [pc, #388]	; (800355c <BSP_LCD_MspInit+0x190>)
 80033d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033da:	4a60      	ldr	r2, [pc, #384]	; (800355c <BSP_LCD_MspInit+0x190>)
 80033dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033e0:	6453      	str	r3, [r2, #68]	; 0x44
 80033e2:	4b5e      	ldr	r3, [pc, #376]	; (800355c <BSP_LCD_MspInit+0x190>)
 80033e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033ea:	623b      	str	r3, [r7, #32]
 80033ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80033ee:	2300      	movs	r3, #0
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	4b5a      	ldr	r3, [pc, #360]	; (800355c <BSP_LCD_MspInit+0x190>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	4a59      	ldr	r2, [pc, #356]	; (800355c <BSP_LCD_MspInit+0x190>)
 80033f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033fc:	6313      	str	r3, [r2, #48]	; 0x30
 80033fe:	4b57      	ldr	r3, [pc, #348]	; (800355c <BSP_LCD_MspInit+0x190>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003406:	61fb      	str	r3, [r7, #28]
 8003408:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	61bb      	str	r3, [r7, #24]
 800340e:	4b53      	ldr	r3, [pc, #332]	; (800355c <BSP_LCD_MspInit+0x190>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	4a52      	ldr	r2, [pc, #328]	; (800355c <BSP_LCD_MspInit+0x190>)
 8003414:	f043 0301 	orr.w	r3, r3, #1
 8003418:	6313      	str	r3, [r2, #48]	; 0x30
 800341a:	4b50      	ldr	r3, [pc, #320]	; (800355c <BSP_LCD_MspInit+0x190>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	61bb      	str	r3, [r7, #24]
 8003424:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	4b4c      	ldr	r3, [pc, #304]	; (800355c <BSP_LCD_MspInit+0x190>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	4a4b      	ldr	r2, [pc, #300]	; (800355c <BSP_LCD_MspInit+0x190>)
 8003430:	f043 0302 	orr.w	r3, r3, #2
 8003434:	6313      	str	r3, [r2, #48]	; 0x30
 8003436:	4b49      	ldr	r3, [pc, #292]	; (800355c <BSP_LCD_MspInit+0x190>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003442:	2300      	movs	r3, #0
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	4b45      	ldr	r3, [pc, #276]	; (800355c <BSP_LCD_MspInit+0x190>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	4a44      	ldr	r2, [pc, #272]	; (800355c <BSP_LCD_MspInit+0x190>)
 800344c:	f043 0304 	orr.w	r3, r3, #4
 8003450:	6313      	str	r3, [r2, #48]	; 0x30
 8003452:	4b42      	ldr	r3, [pc, #264]	; (800355c <BSP_LCD_MspInit+0x190>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	f003 0304 	and.w	r3, r3, #4
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	4b3e      	ldr	r3, [pc, #248]	; (800355c <BSP_LCD_MspInit+0x190>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	4a3d      	ldr	r2, [pc, #244]	; (800355c <BSP_LCD_MspInit+0x190>)
 8003468:	f043 0308 	orr.w	r3, r3, #8
 800346c:	6313      	str	r3, [r2, #48]	; 0x30
 800346e:	4b3b      	ldr	r3, [pc, #236]	; (800355c <BSP_LCD_MspInit+0x190>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800347a:	2300      	movs	r3, #0
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	4b37      	ldr	r3, [pc, #220]	; (800355c <BSP_LCD_MspInit+0x190>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	4a36      	ldr	r2, [pc, #216]	; (800355c <BSP_LCD_MspInit+0x190>)
 8003484:	f043 0320 	orr.w	r3, r3, #32
 8003488:	6313      	str	r3, [r2, #48]	; 0x30
 800348a:	4b34      	ldr	r3, [pc, #208]	; (800355c <BSP_LCD_MspInit+0x190>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	f003 0320 	and.w	r3, r3, #32
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003496:	2300      	movs	r3, #0
 8003498:	607b      	str	r3, [r7, #4]
 800349a:	4b30      	ldr	r3, [pc, #192]	; (800355c <BSP_LCD_MspInit+0x190>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	4a2f      	ldr	r2, [pc, #188]	; (800355c <BSP_LCD_MspInit+0x190>)
 80034a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034a4:	6313      	str	r3, [r2, #48]	; 0x30
 80034a6:	4b2d      	ldr	r3, [pc, #180]	; (800355c <BSP_LCD_MspInit+0x190>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ae:	607b      	str	r3, [r7, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80034b2:	f641 0358 	movw	r3, #6232	; 0x1858
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80034b8:	2302      	movs	r3, #2
 80034ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80034bc:	2300      	movs	r3, #0
 80034be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80034c0:	2302      	movs	r3, #2
 80034c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80034c4:	230e      	movs	r3, #14
 80034c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80034c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034cc:	4619      	mov	r1, r3
 80034ce:	4824      	ldr	r0, [pc, #144]	; (8003560 <BSP_LCD_MspInit+0x194>)
 80034d0:	f001 f91c 	bl	800470c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80034d4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80034da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034de:	4619      	mov	r1, r3
 80034e0:	4820      	ldr	r0, [pc, #128]	; (8003564 <BSP_LCD_MspInit+0x198>)
 80034e2:	f001 f913 	bl	800470c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80034e6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80034ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80034ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034f0:	4619      	mov	r1, r3
 80034f2:	481d      	ldr	r0, [pc, #116]	; (8003568 <BSP_LCD_MspInit+0x19c>)
 80034f4:	f001 f90a 	bl	800470c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80034f8:	2348      	movs	r3, #72	; 0x48
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80034fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003500:	4619      	mov	r1, r3
 8003502:	481a      	ldr	r0, [pc, #104]	; (800356c <BSP_LCD_MspInit+0x1a0>)
 8003504:	f001 f902 	bl	800470c <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003508:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800350c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800350e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003512:	4619      	mov	r1, r3
 8003514:	4816      	ldr	r0, [pc, #88]	; (8003570 <BSP_LCD_MspInit+0x1a4>)
 8003516:	f001 f8f9 	bl	800470c <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800351a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800351e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003524:	4619      	mov	r1, r3
 8003526:	4813      	ldr	r0, [pc, #76]	; (8003574 <BSP_LCD_MspInit+0x1a8>)
 8003528:	f001 f8f0 	bl	800470c <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800352c:	2303      	movs	r3, #3
 800352e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003530:	2309      	movs	r3, #9
 8003532:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003538:	4619      	mov	r1, r3
 800353a:	480a      	ldr	r0, [pc, #40]	; (8003564 <BSP_LCD_MspInit+0x198>)
 800353c:	f001 f8e6 	bl	800470c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003540:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800354a:	4619      	mov	r1, r3
 800354c:	4809      	ldr	r0, [pc, #36]	; (8003574 <BSP_LCD_MspInit+0x1a8>)
 800354e:	f001 f8dd 	bl	800470c <HAL_GPIO_Init>
}
 8003552:	bf00      	nop
 8003554:	3738      	adds	r7, #56	; 0x38
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40023800 	.word	0x40023800
 8003560:	40020000 	.word	0x40020000
 8003564:	40020400 	.word	0x40020400
 8003568:	40020800 	.word	0x40020800
 800356c:	40020c00 	.word	0x40020c00
 8003570:	40021400 	.word	0x40021400
 8003574:	40021800 	.word	0x40021800

08003578 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003578:	b5b0      	push	{r4, r5, r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	603a      	str	r2, [r7, #0]
 8003582:	80fb      	strh	r3, [r7, #6]
 8003584:	460b      	mov	r3, r1
 8003586:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003588:	4b0c      	ldr	r3, [pc, #48]	; (80035bc <BSP_LCD_DrawPixel+0x44>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a0c      	ldr	r2, [pc, #48]	; (80035c0 <BSP_LCD_DrawPixel+0x48>)
 800358e:	2134      	movs	r1, #52	; 0x34
 8003590:	fb01 f303 	mul.w	r3, r1, r3
 8003594:	4413      	add	r3, r2
 8003596:	335c      	adds	r3, #92	; 0x5c
 8003598:	681c      	ldr	r4, [r3, #0]
 800359a:	88bd      	ldrh	r5, [r7, #4]
 800359c:	f7ff fb00 	bl	8002ba0 <BSP_LCD_GetXSize>
 80035a0:	4603      	mov	r3, r0
 80035a2:	fb03 f205 	mul.w	r2, r3, r5
 80035a6:	88fb      	ldrh	r3, [r7, #6]
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4423      	add	r3, r4
 80035ae:	461a      	mov	r2, r3
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	6013      	str	r3, [r2, #0]
}
 80035b4:	bf00      	nop
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bdb0      	pop	{r4, r5, r7, pc}
 80035bc:	2000073c 	.word	0x2000073c
 80035c0:	20000624 	.word	0x20000624

080035c4 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af02      	add	r7, sp, #8
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
 80035d0:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80035d2:	4b16      	ldr	r3, [pc, #88]	; (800362c <FillBuffer+0x68>)
 80035d4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80035d8:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80035da:	4b14      	ldr	r3, [pc, #80]	; (800362c <FillBuffer+0x68>)
 80035dc:	2200      	movs	r2, #0
 80035de:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80035e0:	4a12      	ldr	r2, [pc, #72]	; (800362c <FillBuffer+0x68>)
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80035e6:	4b11      	ldr	r3, [pc, #68]	; (800362c <FillBuffer+0x68>)
 80035e8:	4a11      	ldr	r2, [pc, #68]	; (8003630 <FillBuffer+0x6c>)
 80035ea:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80035ec:	480f      	ldr	r0, [pc, #60]	; (800362c <FillBuffer+0x68>)
 80035ee:	f000 fcf1 	bl	8003fd4 <HAL_DMA2D_Init>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d115      	bne.n	8003624 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80035f8:	68f9      	ldr	r1, [r7, #12]
 80035fa:	480c      	ldr	r0, [pc, #48]	; (800362c <FillBuffer+0x68>)
 80035fc:	f000 ff58 	bl	80044b0 <HAL_DMA2D_ConfigLayer>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10e      	bne.n	8003624 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	69f9      	ldr	r1, [r7, #28]
 8003610:	4806      	ldr	r0, [pc, #24]	; (800362c <FillBuffer+0x68>)
 8003612:	f000 fd28 	bl	8004066 <HAL_DMA2D_Start>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d103      	bne.n	8003624 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 800361c:	210a      	movs	r1, #10
 800361e:	4803      	ldr	r0, [pc, #12]	; (800362c <FillBuffer+0x68>)
 8003620:	f000 fd4c 	bl	80040bc <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003624:	bf00      	nop
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	200006cc 	.word	0x200006cc
 8003630:	4002b000 	.word	0x4002b000

08003634 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003638:	4b29      	ldr	r3, [pc, #164]	; (80036e0 <BSP_SDRAM_Init+0xac>)
 800363a:	4a2a      	ldr	r2, [pc, #168]	; (80036e4 <BSP_SDRAM_Init+0xb0>)
 800363c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800363e:	4b2a      	ldr	r3, [pc, #168]	; (80036e8 <BSP_SDRAM_Init+0xb4>)
 8003640:	2202      	movs	r2, #2
 8003642:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003644:	4b28      	ldr	r3, [pc, #160]	; (80036e8 <BSP_SDRAM_Init+0xb4>)
 8003646:	2207      	movs	r2, #7
 8003648:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800364a:	4b27      	ldr	r3, [pc, #156]	; (80036e8 <BSP_SDRAM_Init+0xb4>)
 800364c:	2204      	movs	r2, #4
 800364e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003650:	4b25      	ldr	r3, [pc, #148]	; (80036e8 <BSP_SDRAM_Init+0xb4>)
 8003652:	2207      	movs	r2, #7
 8003654:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003656:	4b24      	ldr	r3, [pc, #144]	; (80036e8 <BSP_SDRAM_Init+0xb4>)
 8003658:	2202      	movs	r2, #2
 800365a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 800365c:	4b22      	ldr	r3, [pc, #136]	; (80036e8 <BSP_SDRAM_Init+0xb4>)
 800365e:	2202      	movs	r2, #2
 8003660:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003662:	4b21      	ldr	r3, [pc, #132]	; (80036e8 <BSP_SDRAM_Init+0xb4>)
 8003664:	2202      	movs	r2, #2
 8003666:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003668:	4b1d      	ldr	r3, [pc, #116]	; (80036e0 <BSP_SDRAM_Init+0xac>)
 800366a:	2201      	movs	r2, #1
 800366c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800366e:	4b1c      	ldr	r3, [pc, #112]	; (80036e0 <BSP_SDRAM_Init+0xac>)
 8003670:	2200      	movs	r2, #0
 8003672:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003674:	4b1a      	ldr	r3, [pc, #104]	; (80036e0 <BSP_SDRAM_Init+0xac>)
 8003676:	2204      	movs	r2, #4
 8003678:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800367a:	4b19      	ldr	r3, [pc, #100]	; (80036e0 <BSP_SDRAM_Init+0xac>)
 800367c:	2210      	movs	r2, #16
 800367e:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003680:	4b17      	ldr	r3, [pc, #92]	; (80036e0 <BSP_SDRAM_Init+0xac>)
 8003682:	2240      	movs	r2, #64	; 0x40
 8003684:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003686:	4b16      	ldr	r3, [pc, #88]	; (80036e0 <BSP_SDRAM_Init+0xac>)
 8003688:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800368c:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800368e:	4b14      	ldr	r3, [pc, #80]	; (80036e0 <BSP_SDRAM_Init+0xac>)
 8003690:	2200      	movs	r2, #0
 8003692:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003694:	4b12      	ldr	r3, [pc, #72]	; (80036e0 <BSP_SDRAM_Init+0xac>)
 8003696:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800369a:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 800369c:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <BSP_SDRAM_Init+0xac>)
 800369e:	2200      	movs	r2, #0
 80036a0:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80036a2:	4b0f      	ldr	r3, [pc, #60]	; (80036e0 <BSP_SDRAM_Init+0xac>)
 80036a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036a8:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80036aa:	2100      	movs	r1, #0
 80036ac:	480c      	ldr	r0, [pc, #48]	; (80036e0 <BSP_SDRAM_Init+0xac>)
 80036ae:	f000 f87f 	bl	80037b0 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80036b2:	490d      	ldr	r1, [pc, #52]	; (80036e8 <BSP_SDRAM_Init+0xb4>)
 80036b4:	480a      	ldr	r0, [pc, #40]	; (80036e0 <BSP_SDRAM_Init+0xac>)
 80036b6:	f003 ff97 	bl	80075e8 <HAL_SDRAM_Init>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80036c0:	4b0a      	ldr	r3, [pc, #40]	; (80036ec <BSP_SDRAM_Init+0xb8>)
 80036c2:	2201      	movs	r2, #1
 80036c4:	701a      	strb	r2, [r3, #0]
 80036c6:	e002      	b.n	80036ce <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80036c8:	4b08      	ldr	r3, [pc, #32]	; (80036ec <BSP_SDRAM_Init+0xb8>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80036ce:	f240 506a 	movw	r0, #1386	; 0x56a
 80036d2:	f000 f80d 	bl	80036f0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80036d6:	4b05      	ldr	r3, [pc, #20]	; (80036ec <BSP_SDRAM_Init+0xb8>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	2000075c 	.word	0x2000075c
 80036e4:	a0000140 	.word	0xa0000140
 80036e8:	20000790 	.word	0x20000790
 80036ec:	20000048 	.word	0x20000048

080036f0 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80036fc:	4b2a      	ldr	r3, [pc, #168]	; (80037a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036fe:	2201      	movs	r2, #1
 8003700:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003702:	4b29      	ldr	r3, [pc, #164]	; (80037a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003704:	2208      	movs	r2, #8
 8003706:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003708:	4b27      	ldr	r3, [pc, #156]	; (80037a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800370a:	2201      	movs	r2, #1
 800370c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800370e:	4b26      	ldr	r3, [pc, #152]	; (80037a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003710:	2200      	movs	r2, #0
 8003712:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003714:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003718:	4923      	ldr	r1, [pc, #140]	; (80037a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800371a:	4824      	ldr	r0, [pc, #144]	; (80037ac <BSP_SDRAM_Initialization_sequence+0xbc>)
 800371c:	f003 ff98 	bl	8007650 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003720:	2001      	movs	r0, #1
 8003722:	f000 f993 	bl	8003a4c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003726:	4b20      	ldr	r3, [pc, #128]	; (80037a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003728:	2202      	movs	r2, #2
 800372a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800372c:	4b1e      	ldr	r3, [pc, #120]	; (80037a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800372e:	2208      	movs	r2, #8
 8003730:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003732:	4b1d      	ldr	r3, [pc, #116]	; (80037a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003734:	2201      	movs	r2, #1
 8003736:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003738:	4b1b      	ldr	r3, [pc, #108]	; (80037a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800373a:	2200      	movs	r2, #0
 800373c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800373e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003742:	4919      	ldr	r1, [pc, #100]	; (80037a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003744:	4819      	ldr	r0, [pc, #100]	; (80037ac <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003746:	f003 ff83 	bl	8007650 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800374a:	4b17      	ldr	r3, [pc, #92]	; (80037a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800374c:	2203      	movs	r2, #3
 800374e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003750:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003752:	2208      	movs	r2, #8
 8003754:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003756:	4b14      	ldr	r3, [pc, #80]	; (80037a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003758:	2204      	movs	r2, #4
 800375a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800375c:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800375e:	2200      	movs	r2, #0
 8003760:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003762:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003766:	4910      	ldr	r1, [pc, #64]	; (80037a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003768:	4810      	ldr	r0, [pc, #64]	; (80037ac <BSP_SDRAM_Initialization_sequence+0xbc>)
 800376a:	f003 ff71 	bl	8007650 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800376e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003772:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003776:	2204      	movs	r2, #4
 8003778:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800377a:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800377c:	2208      	movs	r2, #8
 800377e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003780:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003782:	2201      	movs	r2, #1
 8003784:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	4a07      	ldr	r2, [pc, #28]	; (80037a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800378a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800378c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003790:	4905      	ldr	r1, [pc, #20]	; (80037a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003792:	4806      	ldr	r0, [pc, #24]	; (80037ac <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003794:	f003 ff5c 	bl	8007650 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	4804      	ldr	r0, [pc, #16]	; (80037ac <BSP_SDRAM_Initialization_sequence+0xbc>)
 800379c:	f003 ff8d 	bl	80076ba <HAL_SDRAM_ProgramRefreshRate>
}
 80037a0:	bf00      	nop
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	200007ac 	.word	0x200007ac
 80037ac:	2000075c 	.word	0x2000075c

080037b0 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b090      	sub	sp, #64	; 0x40
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 80ec 	beq.w	800399a <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80037c2:	2300      	movs	r3, #0
 80037c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80037c6:	4b77      	ldr	r3, [pc, #476]	; (80039a4 <BSP_SDRAM_MspInit+0x1f4>)
 80037c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ca:	4a76      	ldr	r2, [pc, #472]	; (80039a4 <BSP_SDRAM_MspInit+0x1f4>)
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	6393      	str	r3, [r2, #56]	; 0x38
 80037d2:	4b74      	ldr	r3, [pc, #464]	; (80039a4 <BSP_SDRAM_MspInit+0x1f4>)
 80037d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	62bb      	str	r3, [r7, #40]	; 0x28
 80037dc:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80037de:	2300      	movs	r3, #0
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24
 80037e2:	4b70      	ldr	r3, [pc, #448]	; (80039a4 <BSP_SDRAM_MspInit+0x1f4>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	4a6f      	ldr	r2, [pc, #444]	; (80039a4 <BSP_SDRAM_MspInit+0x1f4>)
 80037e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037ec:	6313      	str	r3, [r2, #48]	; 0x30
 80037ee:	4b6d      	ldr	r3, [pc, #436]	; (80039a4 <BSP_SDRAM_MspInit+0x1f4>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f6:	627b      	str	r3, [r7, #36]	; 0x24
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037fa:	2300      	movs	r3, #0
 80037fc:	623b      	str	r3, [r7, #32]
 80037fe:	4b69      	ldr	r3, [pc, #420]	; (80039a4 <BSP_SDRAM_MspInit+0x1f4>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	4a68      	ldr	r2, [pc, #416]	; (80039a4 <BSP_SDRAM_MspInit+0x1f4>)
 8003804:	f043 0302 	orr.w	r3, r3, #2
 8003808:	6313      	str	r3, [r2, #48]	; 0x30
 800380a:	4b66      	ldr	r3, [pc, #408]	; (80039a4 <BSP_SDRAM_MspInit+0x1f4>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	623b      	str	r3, [r7, #32]
 8003814:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003816:	2300      	movs	r3, #0
 8003818:	61fb      	str	r3, [r7, #28]
 800381a:	4b62      	ldr	r3, [pc, #392]	; (80039a4 <BSP_SDRAM_MspInit+0x1f4>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	4a61      	ldr	r2, [pc, #388]	; (80039a4 <BSP_SDRAM_MspInit+0x1f4>)
 8003820:	f043 0304 	orr.w	r3, r3, #4
 8003824:	6313      	str	r3, [r2, #48]	; 0x30
 8003826:	4b5f      	ldr	r3, [pc, #380]	; (80039a4 <BSP_SDRAM_MspInit+0x1f4>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	61fb      	str	r3, [r7, #28]
 8003830:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	61bb      	str	r3, [r7, #24]
 8003836:	4b5b      	ldr	r3, [pc, #364]	; (80039a4 <BSP_SDRAM_MspInit+0x1f4>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	4a5a      	ldr	r2, [pc, #360]	; (80039a4 <BSP_SDRAM_MspInit+0x1f4>)
 800383c:	f043 0308 	orr.w	r3, r3, #8
 8003840:	6313      	str	r3, [r2, #48]	; 0x30
 8003842:	4b58      	ldr	r3, [pc, #352]	; (80039a4 <BSP_SDRAM_MspInit+0x1f4>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	61bb      	str	r3, [r7, #24]
 800384c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]
 8003852:	4b54      	ldr	r3, [pc, #336]	; (80039a4 <BSP_SDRAM_MspInit+0x1f4>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	4a53      	ldr	r2, [pc, #332]	; (80039a4 <BSP_SDRAM_MspInit+0x1f4>)
 8003858:	f043 0310 	orr.w	r3, r3, #16
 800385c:	6313      	str	r3, [r2, #48]	; 0x30
 800385e:	4b51      	ldr	r3, [pc, #324]	; (80039a4 <BSP_SDRAM_MspInit+0x1f4>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	f003 0310 	and.w	r3, r3, #16
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800386a:	2300      	movs	r3, #0
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	4b4d      	ldr	r3, [pc, #308]	; (80039a4 <BSP_SDRAM_MspInit+0x1f4>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	4a4c      	ldr	r2, [pc, #304]	; (80039a4 <BSP_SDRAM_MspInit+0x1f4>)
 8003874:	f043 0320 	orr.w	r3, r3, #32
 8003878:	6313      	str	r3, [r2, #48]	; 0x30
 800387a:	4b4a      	ldr	r3, [pc, #296]	; (80039a4 <BSP_SDRAM_MspInit+0x1f4>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	f003 0320 	and.w	r3, r3, #32
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	4b46      	ldr	r3, [pc, #280]	; (80039a4 <BSP_SDRAM_MspInit+0x1f4>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	4a45      	ldr	r2, [pc, #276]	; (80039a4 <BSP_SDRAM_MspInit+0x1f4>)
 8003890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003894:	6313      	str	r3, [r2, #48]	; 0x30
 8003896:	4b43      	ldr	r3, [pc, #268]	; (80039a4 <BSP_SDRAM_MspInit+0x1f4>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80038a2:	2302      	movs	r3, #2
 80038a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80038a6:	2302      	movs	r3, #2
 80038a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80038ae:	230c      	movs	r3, #12
 80038b0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80038b2:	2360      	movs	r3, #96	; 0x60
 80038b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80038b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038ba:	4619      	mov	r1, r3
 80038bc:	483a      	ldr	r0, [pc, #232]	; (80039a8 <BSP_SDRAM_MspInit+0x1f8>)
 80038be:	f000 ff25 	bl	800470c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80038c2:	2301      	movs	r3, #1
 80038c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80038c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038ca:	4619      	mov	r1, r3
 80038cc:	4837      	ldr	r0, [pc, #220]	; (80039ac <BSP_SDRAM_MspInit+0x1fc>)
 80038ce:	f000 ff1d 	bl	800470c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80038d2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80038d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80038d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038dc:	4619      	mov	r1, r3
 80038de:	4834      	ldr	r0, [pc, #208]	; (80039b0 <BSP_SDRAM_MspInit+0x200>)
 80038e0:	f000 ff14 	bl	800470c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80038e4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80038e8:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80038ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038ee:	4619      	mov	r1, r3
 80038f0:	4830      	ldr	r0, [pc, #192]	; (80039b4 <BSP_SDRAM_MspInit+0x204>)
 80038f2:	f000 ff0b 	bl	800470c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80038f6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80038fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80038fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003900:	4619      	mov	r1, r3
 8003902:	482d      	ldr	r0, [pc, #180]	; (80039b8 <BSP_SDRAM_MspInit+0x208>)
 8003904:	f000 ff02 	bl	800470c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003908:	f248 1333 	movw	r3, #33075	; 0x8133
 800390c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800390e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003912:	4619      	mov	r1, r3
 8003914:	4829      	ldr	r0, [pc, #164]	; (80039bc <BSP_SDRAM_MspInit+0x20c>)
 8003916:	f000 fef9 	bl	800470c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800391a:	4b29      	ldr	r3, [pc, #164]	; (80039c0 <BSP_SDRAM_MspInit+0x210>)
 800391c:	2200      	movs	r2, #0
 800391e:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003920:	4b27      	ldr	r3, [pc, #156]	; (80039c0 <BSP_SDRAM_MspInit+0x210>)
 8003922:	2280      	movs	r2, #128	; 0x80
 8003924:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003926:	4b26      	ldr	r3, [pc, #152]	; (80039c0 <BSP_SDRAM_MspInit+0x210>)
 8003928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800392c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800392e:	4b24      	ldr	r3, [pc, #144]	; (80039c0 <BSP_SDRAM_MspInit+0x210>)
 8003930:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003934:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003936:	4b22      	ldr	r3, [pc, #136]	; (80039c0 <BSP_SDRAM_MspInit+0x210>)
 8003938:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800393c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800393e:	4b20      	ldr	r3, [pc, #128]	; (80039c0 <BSP_SDRAM_MspInit+0x210>)
 8003940:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003944:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003946:	4b1e      	ldr	r3, [pc, #120]	; (80039c0 <BSP_SDRAM_MspInit+0x210>)
 8003948:	2200      	movs	r2, #0
 800394a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800394c:	4b1c      	ldr	r3, [pc, #112]	; (80039c0 <BSP_SDRAM_MspInit+0x210>)
 800394e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003952:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003954:	4b1a      	ldr	r3, [pc, #104]	; (80039c0 <BSP_SDRAM_MspInit+0x210>)
 8003956:	2200      	movs	r2, #0
 8003958:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800395a:	4b19      	ldr	r3, [pc, #100]	; (80039c0 <BSP_SDRAM_MspInit+0x210>)
 800395c:	2203      	movs	r2, #3
 800395e:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003960:	4b17      	ldr	r3, [pc, #92]	; (80039c0 <BSP_SDRAM_MspInit+0x210>)
 8003962:	2200      	movs	r2, #0
 8003964:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003966:	4b16      	ldr	r3, [pc, #88]	; (80039c0 <BSP_SDRAM_MspInit+0x210>)
 8003968:	2200      	movs	r2, #0
 800396a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 800396c:	4b14      	ldr	r3, [pc, #80]	; (80039c0 <BSP_SDRAM_MspInit+0x210>)
 800396e:	4a15      	ldr	r2, [pc, #84]	; (80039c4 <BSP_SDRAM_MspInit+0x214>)
 8003970:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a12      	ldr	r2, [pc, #72]	; (80039c0 <BSP_SDRAM_MspInit+0x210>)
 8003976:	631a      	str	r2, [r3, #48]	; 0x30
 8003978:	4a11      	ldr	r2, [pc, #68]	; (80039c0 <BSP_SDRAM_MspInit+0x210>)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800397e:	4810      	ldr	r0, [pc, #64]	; (80039c0 <BSP_SDRAM_MspInit+0x210>)
 8003980:	f000 fa18 	bl	8003db4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003984:	480e      	ldr	r0, [pc, #56]	; (80039c0 <BSP_SDRAM_MspInit+0x210>)
 8003986:	f000 f967 	bl	8003c58 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800398a:	2200      	movs	r2, #0
 800398c:	210f      	movs	r1, #15
 800398e:	2038      	movs	r0, #56	; 0x38
 8003990:	f000 f938 	bl	8003c04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003994:	2038      	movs	r0, #56	; 0x38
 8003996:	f000 f951 	bl	8003c3c <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800399a:	bf00      	nop
 800399c:	3740      	adds	r7, #64	; 0x40
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40023800 	.word	0x40023800
 80039a8:	40020400 	.word	0x40020400
 80039ac:	40020800 	.word	0x40020800
 80039b0:	40020c00 	.word	0x40020c00
 80039b4:	40021000 	.word	0x40021000
 80039b8:	40021400 	.word	0x40021400
 80039bc:	40021800 	.word	0x40021800
 80039c0:	200007bc 	.word	0x200007bc
 80039c4:	40026410 	.word	0x40026410

080039c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039cc:	4b0e      	ldr	r3, [pc, #56]	; (8003a08 <HAL_Init+0x40>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a0d      	ldr	r2, [pc, #52]	; (8003a08 <HAL_Init+0x40>)
 80039d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039d8:	4b0b      	ldr	r3, [pc, #44]	; (8003a08 <HAL_Init+0x40>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a0a      	ldr	r2, [pc, #40]	; (8003a08 <HAL_Init+0x40>)
 80039de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039e4:	4b08      	ldr	r3, [pc, #32]	; (8003a08 <HAL_Init+0x40>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a07      	ldr	r2, [pc, #28]	; (8003a08 <HAL_Init+0x40>)
 80039ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039f0:	2003      	movs	r0, #3
 80039f2:	f000 f8fc 	bl	8003bee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039f6:	200f      	movs	r0, #15
 80039f8:	f7fe fb30 	bl	800205c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039fc:	f7fe fb02 	bl	8002004 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40023c00 	.word	0x40023c00

08003a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a10:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <HAL_IncTick+0x20>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	461a      	mov	r2, r3
 8003a16:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <HAL_IncTick+0x24>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	4a04      	ldr	r2, [pc, #16]	; (8003a30 <HAL_IncTick+0x24>)
 8003a1e:	6013      	str	r3, [r2, #0]
}
 8003a20:	bf00      	nop
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	20000050 	.word	0x20000050
 8003a30:	2000081c 	.word	0x2000081c

08003a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  return uwTick;
 8003a38:	4b03      	ldr	r3, [pc, #12]	; (8003a48 <HAL_GetTick+0x14>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	2000081c 	.word	0x2000081c

08003a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a54:	f7ff ffee 	bl	8003a34 <HAL_GetTick>
 8003a58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a64:	d005      	beq.n	8003a72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a66:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <HAL_Delay+0x44>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4413      	add	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a72:	bf00      	nop
 8003a74:	f7ff ffde 	bl	8003a34 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d8f7      	bhi.n	8003a74 <HAL_Delay+0x28>
  {
  }
}
 8003a84:	bf00      	nop
 8003a86:	bf00      	nop
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000050 	.word	0x20000050

08003a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aa4:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ac6:	4a04      	ldr	r2, [pc, #16]	; (8003ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	60d3      	str	r3, [r2, #12]
}
 8003acc:	bf00      	nop
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	e000ed00 	.word	0xe000ed00

08003adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ae0:	4b04      	ldr	r3, [pc, #16]	; (8003af4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	0a1b      	lsrs	r3, r3, #8
 8003ae6:	f003 0307 	and.w	r3, r3, #7
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	e000ed00 	.word	0xe000ed00

08003af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	db0b      	blt.n	8003b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	f003 021f 	and.w	r2, r3, #31
 8003b10:	4907      	ldr	r1, [pc, #28]	; (8003b30 <__NVIC_EnableIRQ+0x38>)
 8003b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b16:	095b      	lsrs	r3, r3, #5
 8003b18:	2001      	movs	r0, #1
 8003b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	e000e100 	.word	0xe000e100

08003b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	6039      	str	r1, [r7, #0]
 8003b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	db0a      	blt.n	8003b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	490c      	ldr	r1, [pc, #48]	; (8003b80 <__NVIC_SetPriority+0x4c>)
 8003b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b52:	0112      	lsls	r2, r2, #4
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	440b      	add	r3, r1
 8003b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b5c:	e00a      	b.n	8003b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	4908      	ldr	r1, [pc, #32]	; (8003b84 <__NVIC_SetPriority+0x50>)
 8003b64:	79fb      	ldrb	r3, [r7, #7]
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	3b04      	subs	r3, #4
 8003b6c:	0112      	lsls	r2, r2, #4
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	440b      	add	r3, r1
 8003b72:	761a      	strb	r2, [r3, #24]
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	e000e100 	.word	0xe000e100
 8003b84:	e000ed00 	.word	0xe000ed00

08003b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b089      	sub	sp, #36	; 0x24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f003 0307 	and.w	r3, r3, #7
 8003b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f1c3 0307 	rsb	r3, r3, #7
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	bf28      	it	cs
 8003ba6:	2304      	movcs	r3, #4
 8003ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	3304      	adds	r3, #4
 8003bae:	2b06      	cmp	r3, #6
 8003bb0:	d902      	bls.n	8003bb8 <NVIC_EncodePriority+0x30>
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	3b03      	subs	r3, #3
 8003bb6:	e000      	b.n	8003bba <NVIC_EncodePriority+0x32>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc6:	43da      	mvns	r2, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	401a      	ands	r2, r3
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bda:	43d9      	mvns	r1, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be0:	4313      	orrs	r3, r2
         );
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3724      	adds	r7, #36	; 0x24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b082      	sub	sp, #8
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7ff ff4c 	bl	8003a94 <__NVIC_SetPriorityGrouping>
}
 8003bfc:	bf00      	nop
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c16:	f7ff ff61 	bl	8003adc <__NVIC_GetPriorityGrouping>
 8003c1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	68b9      	ldr	r1, [r7, #8]
 8003c20:	6978      	ldr	r0, [r7, #20]
 8003c22:	f7ff ffb1 	bl	8003b88 <NVIC_EncodePriority>
 8003c26:	4602      	mov	r2, r0
 8003c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c2c:	4611      	mov	r1, r2
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff ff80 	bl	8003b34 <__NVIC_SetPriority>
}
 8003c34:	bf00      	nop
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	4603      	mov	r3, r0
 8003c44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff ff54 	bl	8003af8 <__NVIC_EnableIRQ>
}
 8003c50:	bf00      	nop
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c64:	f7ff fee6 	bl	8003a34 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e099      	b.n	8003da8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0201 	bic.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c94:	e00f      	b.n	8003cb6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c96:	f7ff fecd 	bl	8003a34 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b05      	cmp	r3, #5
 8003ca2:	d908      	bls.n	8003cb6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2203      	movs	r2, #3
 8003cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e078      	b.n	8003da8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1e8      	bne.n	8003c96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	4b38      	ldr	r3, [pc, #224]	; (8003db0 <HAL_DMA_Init+0x158>)
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ce2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d107      	bne.n	8003d20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f023 0307 	bic.w	r3, r3, #7
 8003d36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d117      	bne.n	8003d7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00e      	beq.n	8003d7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f8bd 	bl	8003edc <DMA_CheckFifoParam>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d008      	beq.n	8003d7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2240      	movs	r2, #64	; 0x40
 8003d6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d76:	2301      	movs	r3, #1
 8003d78:	e016      	b.n	8003da8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f874 	bl	8003e70 <DMA_CalcBaseAndBitshift>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d90:	223f      	movs	r2, #63	; 0x3f
 8003d92:	409a      	lsls	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	f010803f 	.word	0xf010803f

08003db4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e050      	b.n	8003e68 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d101      	bne.n	8003dd6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e048      	b.n	8003e68 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0201 	bic.w	r2, r2, #1
 8003de4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2200      	movs	r2, #0
 8003df4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2200      	movs	r2, #0
 8003e04:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2221      	movs	r2, #33	; 0x21
 8003e14:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f82a 	bl	8003e70 <DMA_CalcBaseAndBitshift>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e48:	223f      	movs	r2, #63	; 0x3f
 8003e4a:	409a      	lsls	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	3b10      	subs	r3, #16
 8003e80:	4a14      	ldr	r2, [pc, #80]	; (8003ed4 <DMA_CalcBaseAndBitshift+0x64>)
 8003e82:	fba2 2303 	umull	r2, r3, r2, r3
 8003e86:	091b      	lsrs	r3, r3, #4
 8003e88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e8a:	4a13      	ldr	r2, [pc, #76]	; (8003ed8 <DMA_CalcBaseAndBitshift+0x68>)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4413      	add	r3, r2
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d909      	bls.n	8003eb2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ea6:	f023 0303 	bic.w	r3, r3, #3
 8003eaa:	1d1a      	adds	r2, r3, #4
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	659a      	str	r2, [r3, #88]	; 0x58
 8003eb0:	e007      	b.n	8003ec2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003eba:	f023 0303 	bic.w	r3, r3, #3
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	aaaaaaab 	.word	0xaaaaaaab
 8003ed8:	08011930 	.word	0x08011930

08003edc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d11f      	bne.n	8003f36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b03      	cmp	r3, #3
 8003efa:	d856      	bhi.n	8003faa <DMA_CheckFifoParam+0xce>
 8003efc:	a201      	add	r2, pc, #4	; (adr r2, 8003f04 <DMA_CheckFifoParam+0x28>)
 8003efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f02:	bf00      	nop
 8003f04:	08003f15 	.word	0x08003f15
 8003f08:	08003f27 	.word	0x08003f27
 8003f0c:	08003f15 	.word	0x08003f15
 8003f10:	08003fab 	.word	0x08003fab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d046      	beq.n	8003fae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f24:	e043      	b.n	8003fae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f2e:	d140      	bne.n	8003fb2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f34:	e03d      	b.n	8003fb2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f3e:	d121      	bne.n	8003f84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b03      	cmp	r3, #3
 8003f44:	d837      	bhi.n	8003fb6 <DMA_CheckFifoParam+0xda>
 8003f46:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <DMA_CheckFifoParam+0x70>)
 8003f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4c:	08003f5d 	.word	0x08003f5d
 8003f50:	08003f63 	.word	0x08003f63
 8003f54:	08003f5d 	.word	0x08003f5d
 8003f58:	08003f75 	.word	0x08003f75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f60:	e030      	b.n	8003fc4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d025      	beq.n	8003fba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f72:	e022      	b.n	8003fba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f7c:	d11f      	bne.n	8003fbe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f82:	e01c      	b.n	8003fbe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d903      	bls.n	8003f92 <DMA_CheckFifoParam+0xb6>
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2b03      	cmp	r3, #3
 8003f8e:	d003      	beq.n	8003f98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f90:	e018      	b.n	8003fc4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	73fb      	strb	r3, [r7, #15]
      break;
 8003f96:	e015      	b.n	8003fc4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00e      	beq.n	8003fc2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8003fa8:	e00b      	b.n	8003fc2 <DMA_CheckFifoParam+0xe6>
      break;
 8003faa:	bf00      	nop
 8003fac:	e00a      	b.n	8003fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8003fae:	bf00      	nop
 8003fb0:	e008      	b.n	8003fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8003fb2:	bf00      	nop
 8003fb4:	e006      	b.n	8003fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8003fb6:	bf00      	nop
 8003fb8:	e004      	b.n	8003fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8003fba:	bf00      	nop
 8003fbc:	e002      	b.n	8003fc4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003fbe:	bf00      	nop
 8003fc0:	e000      	b.n	8003fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8003fc2:	bf00      	nop
    }
  } 
  
  return status; 
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop

08003fd4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e03b      	b.n	800405e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d106      	bne.n	8004000 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7fd f996 	bl	800132c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004024:	f023 0107 	bic.w	r1, r3, #7
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800403e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	68d1      	ldr	r1, [r2, #12]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6812      	ldr	r2, [r2, #0]
 800404a:	430b      	orrs	r3, r1
 800404c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b086      	sub	sp, #24
 800406a:	af02      	add	r7, sp, #8
 800406c:	60f8      	str	r0, [r7, #12]
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	607a      	str	r2, [r7, #4]
 8004072:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800407a:	2b01      	cmp	r3, #1
 800407c:	d101      	bne.n	8004082 <HAL_DMA2D_Start+0x1c>
 800407e:	2302      	movs	r3, #2
 8004080:	e018      	b.n	80040b4 <HAL_DMA2D_Start+0x4e>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2202      	movs	r2, #2
 800408e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	68b9      	ldr	r1, [r7, #8]
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 fa99 	bl	80045d4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f042 0201 	orr.w	r2, r2, #1
 80040b0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d056      	beq.n	8004186 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80040d8:	f7ff fcac 	bl	8003a34 <HAL_GetTick>
 80040dc:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80040de:	e04b      	b.n	8004178 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d023      	beq.n	800413a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004100:	f043 0202 	orr.w	r2, r3, #2
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d005      	beq.n	800411e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004116:	f043 0201 	orr.w	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2221      	movs	r2, #33	; 0x21
 8004124:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2204      	movs	r2, #4
 800412a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e0a5      	b.n	8004286 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004140:	d01a      	beq.n	8004178 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004142:	f7ff fc77 	bl	8003a34 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d302      	bcc.n	8004158 <HAL_DMA2D_PollForTransfer+0x9c>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10f      	bne.n	8004178 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415c:	f043 0220 	orr.w	r2, r3, #32
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2203      	movs	r2, #3
 8004168:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e086      	b.n	8004286 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0ac      	beq.n	80040e0 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	f003 0320 	and.w	r3, r3, #32
 8004190:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	f003 0320 	and.w	r3, r3, #32
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4313      	orrs	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d061      	beq.n	800426c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80041a8:	f7ff fc44 	bl	8003a34 <HAL_GetTick>
 80041ac:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80041ae:	e056      	b.n	800425e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d02e      	beq.n	8004220 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f003 0308 	and.w	r3, r3, #8
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d005      	beq.n	80041d8 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d0:	f043 0204 	orr.w	r2, r3, #4
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f003 0320 	and.w	r3, r3, #32
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e6:	f043 0202 	orr.w	r2, r3, #2
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d005      	beq.n	8004204 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fc:	f043 0201 	orr.w	r2, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2229      	movs	r2, #41	; 0x29
 800420a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2204      	movs	r2, #4
 8004210:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e032      	b.n	8004286 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004226:	d01a      	beq.n	800425e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004228:	f7ff fc04 	bl	8003a34 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d302      	bcc.n	800423e <HAL_DMA2D_PollForTransfer+0x182>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10f      	bne.n	800425e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004242:	f043 0220 	orr.w	r2, r3, #32
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2203      	movs	r2, #3
 800424e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e013      	b.n	8004286 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f003 0310 	and.w	r3, r3, #16
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0a1      	beq.n	80041b0 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2212      	movs	r2, #18
 8004272:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d026      	beq.n	80042fe <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d021      	beq.n	80042fe <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042c8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ce:	f043 0201 	orr.w	r2, r3, #1
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2201      	movs	r2, #1
 80042dc:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2204      	movs	r2, #4
 80042e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f003 0320 	and.w	r3, r3, #32
 8004304:	2b00      	cmp	r3, #0
 8004306:	d026      	beq.n	8004356 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d021      	beq.n	8004356 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004320:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2220      	movs	r2, #32
 8004328:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432e:	f043 0202 	orr.w	r2, r3, #2
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2204      	movs	r2, #4
 800433a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	d026      	beq.n	80043ae <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004366:	2b00      	cmp	r3, #0
 8004368:	d021      	beq.n	80043ae <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004378:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2208      	movs	r2, #8
 8004380:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004386:	f043 0204 	orr.w	r2, r3, #4
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2204      	movs	r2, #4
 8004392:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d013      	beq.n	80043e0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00e      	beq.n	80043e0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2204      	movs	r2, #4
 80043d8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f853 	bl	8004486 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d024      	beq.n	8004434 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d01f      	beq.n	8004434 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004402:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2202      	movs	r2, #2
 800440a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 0310 	and.w	r3, r3, #16
 800443a:	2b00      	cmp	r3, #0
 800443c:	d01f      	beq.n	800447e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d01a      	beq.n	800447e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004456:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2210      	movs	r2, #16
 800445e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f80e 	bl	800449a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800447e:	bf00      	nop
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
	...

080044b0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <HAL_DMA2D_ConfigLayer+0x20>
 80044cc:	2302      	movs	r3, #2
 80044ce:	e079      	b.n	80045c4 <HAL_DMA2D_ConfigLayer+0x114>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2202      	movs	r2, #2
 80044dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	3318      	adds	r3, #24
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	4413      	add	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	041b      	lsls	r3, r3, #16
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80044fa:	4b35      	ldr	r3, [pc, #212]	; (80045d0 <HAL_DMA2D_ConfigLayer+0x120>)
 80044fc:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2b0a      	cmp	r3, #10
 8004504:	d003      	beq.n	800450e <HAL_DMA2D_ConfigLayer+0x5e>
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2b09      	cmp	r3, #9
 800450c:	d107      	bne.n	800451e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	4313      	orrs	r3, r2
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	e005      	b.n	800452a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	061b      	lsls	r3, r3, #24
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	4313      	orrs	r3, r2
 8004528:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d120      	bne.n	8004572 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	43db      	mvns	r3, r3
 800453a:	ea02 0103 	and.w	r1, r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	430a      	orrs	r2, r1
 8004546:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b0a      	cmp	r3, #10
 8004558:	d003      	beq.n	8004562 <HAL_DMA2D_ConfigLayer+0xb2>
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b09      	cmp	r3, #9
 8004560:	d127      	bne.n	80045b2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800456e:	629a      	str	r2, [r3, #40]	; 0x28
 8004570:	e01f      	b.n	80045b2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	69da      	ldr	r2, [r3, #28]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	43db      	mvns	r3, r3
 800457c:	ea02 0103 	and.w	r1, r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	430a      	orrs	r2, r1
 8004588:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	6812      	ldr	r2, [r2, #0]
 8004592:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b0a      	cmp	r3, #10
 800459a:	d003      	beq.n	80045a4 <HAL_DMA2D_ConfigLayer+0xf4>
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b09      	cmp	r3, #9
 80045a2:	d106      	bne.n	80045b2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80045b0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	371c      	adds	r7, #28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	ff03000f 	.word	0xff03000f

080045d4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b08b      	sub	sp, #44	; 0x2c
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
 80045e0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	041a      	lsls	r2, r3, #16
 80045f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f2:	431a      	orrs	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800460c:	d174      	bne.n	80046f8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004614:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800461c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004624:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d108      	bne.n	8004646 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	431a      	orrs	r2, r3
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	4313      	orrs	r3, r2
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	4313      	orrs	r3, r2
 8004642:	627b      	str	r3, [r7, #36]	; 0x24
 8004644:	e053      	b.n	80046ee <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d106      	bne.n	800465c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	4313      	orrs	r3, r2
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	627b      	str	r3, [r7, #36]	; 0x24
 800465a:	e048      	b.n	80046ee <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2b02      	cmp	r3, #2
 8004662:	d111      	bne.n	8004688 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	0cdb      	lsrs	r3, r3, #19
 8004668:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	0a9b      	lsrs	r3, r3, #10
 800466e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	08db      	lsrs	r3, r3, #3
 8004674:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	02db      	lsls	r3, r3, #11
 800467e:	4313      	orrs	r3, r2
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	4313      	orrs	r3, r2
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
 8004686:	e032      	b.n	80046ee <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	2b03      	cmp	r3, #3
 800468e:	d117      	bne.n	80046c0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	0fdb      	lsrs	r3, r3, #31
 8004694:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	0cdb      	lsrs	r3, r3, #19
 800469a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	0adb      	lsrs	r3, r3, #11
 80046a0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	08db      	lsrs	r3, r3, #3
 80046a6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	029b      	lsls	r3, r3, #10
 80046b0:	431a      	orrs	r2, r3
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	03db      	lsls	r3, r3, #15
 80046b6:	4313      	orrs	r3, r2
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24
 80046be:	e016      	b.n	80046ee <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	0f1b      	lsrs	r3, r3, #28
 80046c4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	0d1b      	lsrs	r3, r3, #20
 80046ca:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	0b1b      	lsrs	r3, r3, #12
 80046d0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	091b      	lsrs	r3, r3, #4
 80046d6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	011a      	lsls	r2, r3, #4
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	021b      	lsls	r3, r3, #8
 80046e0:	431a      	orrs	r2, r3
 80046e2:	6a3b      	ldr	r3, [r7, #32]
 80046e4:	031b      	lsls	r3, r3, #12
 80046e6:	4313      	orrs	r3, r2
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80046f6:	e003      	b.n	8004700 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	60da      	str	r2, [r3, #12]
}
 8004700:	bf00      	nop
 8004702:	372c      	adds	r7, #44	; 0x2c
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800470c:	b480      	push	{r7}
 800470e:	b089      	sub	sp, #36	; 0x24
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004716:	2300      	movs	r3, #0
 8004718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800471a:	2300      	movs	r3, #0
 800471c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800471e:	2300      	movs	r3, #0
 8004720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004722:	2300      	movs	r3, #0
 8004724:	61fb      	str	r3, [r7, #28]
 8004726:	e177      	b.n	8004a18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004728:	2201      	movs	r2, #1
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	4013      	ands	r3, r2
 800473a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	429a      	cmp	r2, r3
 8004742:	f040 8166 	bne.w	8004a12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	2b01      	cmp	r3, #1
 8004750:	d005      	beq.n	800475e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800475a:	2b02      	cmp	r3, #2
 800475c:	d130      	bne.n	80047c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	2203      	movs	r2, #3
 800476a:	fa02 f303 	lsl.w	r3, r2, r3
 800476e:	43db      	mvns	r3, r3
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	4013      	ands	r3, r2
 8004774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68da      	ldr	r2, [r3, #12]
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	4313      	orrs	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004794:	2201      	movs	r2, #1
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	43db      	mvns	r3, r3
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	4013      	ands	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	091b      	lsrs	r3, r3, #4
 80047aa:	f003 0201 	and.w	r2, r3, #1
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f003 0303 	and.w	r3, r3, #3
 80047c8:	2b03      	cmp	r3, #3
 80047ca:	d017      	beq.n	80047fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	2203      	movs	r2, #3
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	43db      	mvns	r3, r3
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	4013      	ands	r3, r2
 80047e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f003 0303 	and.w	r3, r3, #3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d123      	bne.n	8004850 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	08da      	lsrs	r2, r3, #3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3208      	adds	r2, #8
 8004810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004814:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	220f      	movs	r2, #15
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	43db      	mvns	r3, r3
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	4013      	ands	r3, r2
 800482a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	691a      	ldr	r2, [r3, #16]
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	4313      	orrs	r3, r2
 8004840:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	08da      	lsrs	r2, r3, #3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3208      	adds	r2, #8
 800484a:	69b9      	ldr	r1, [r7, #24]
 800484c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	2203      	movs	r2, #3
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	43db      	mvns	r3, r3
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	4013      	ands	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f003 0203 	and.w	r2, r3, #3
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4313      	orrs	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 80c0 	beq.w	8004a12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004892:	2300      	movs	r3, #0
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	4b66      	ldr	r3, [pc, #408]	; (8004a30 <HAL_GPIO_Init+0x324>)
 8004898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489a:	4a65      	ldr	r2, [pc, #404]	; (8004a30 <HAL_GPIO_Init+0x324>)
 800489c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048a0:	6453      	str	r3, [r2, #68]	; 0x44
 80048a2:	4b63      	ldr	r3, [pc, #396]	; (8004a30 <HAL_GPIO_Init+0x324>)
 80048a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048ae:	4a61      	ldr	r2, [pc, #388]	; (8004a34 <HAL_GPIO_Init+0x328>)
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	089b      	lsrs	r3, r3, #2
 80048b4:	3302      	adds	r3, #2
 80048b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	220f      	movs	r2, #15
 80048c6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ca:	43db      	mvns	r3, r3
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	4013      	ands	r3, r2
 80048d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a58      	ldr	r2, [pc, #352]	; (8004a38 <HAL_GPIO_Init+0x32c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d037      	beq.n	800494a <HAL_GPIO_Init+0x23e>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a57      	ldr	r2, [pc, #348]	; (8004a3c <HAL_GPIO_Init+0x330>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d031      	beq.n	8004946 <HAL_GPIO_Init+0x23a>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a56      	ldr	r2, [pc, #344]	; (8004a40 <HAL_GPIO_Init+0x334>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d02b      	beq.n	8004942 <HAL_GPIO_Init+0x236>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a55      	ldr	r2, [pc, #340]	; (8004a44 <HAL_GPIO_Init+0x338>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d025      	beq.n	800493e <HAL_GPIO_Init+0x232>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a54      	ldr	r2, [pc, #336]	; (8004a48 <HAL_GPIO_Init+0x33c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d01f      	beq.n	800493a <HAL_GPIO_Init+0x22e>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a53      	ldr	r2, [pc, #332]	; (8004a4c <HAL_GPIO_Init+0x340>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d019      	beq.n	8004936 <HAL_GPIO_Init+0x22a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a52      	ldr	r2, [pc, #328]	; (8004a50 <HAL_GPIO_Init+0x344>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d013      	beq.n	8004932 <HAL_GPIO_Init+0x226>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a51      	ldr	r2, [pc, #324]	; (8004a54 <HAL_GPIO_Init+0x348>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00d      	beq.n	800492e <HAL_GPIO_Init+0x222>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a50      	ldr	r2, [pc, #320]	; (8004a58 <HAL_GPIO_Init+0x34c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d007      	beq.n	800492a <HAL_GPIO_Init+0x21e>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a4f      	ldr	r2, [pc, #316]	; (8004a5c <HAL_GPIO_Init+0x350>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d101      	bne.n	8004926 <HAL_GPIO_Init+0x21a>
 8004922:	2309      	movs	r3, #9
 8004924:	e012      	b.n	800494c <HAL_GPIO_Init+0x240>
 8004926:	230a      	movs	r3, #10
 8004928:	e010      	b.n	800494c <HAL_GPIO_Init+0x240>
 800492a:	2308      	movs	r3, #8
 800492c:	e00e      	b.n	800494c <HAL_GPIO_Init+0x240>
 800492e:	2307      	movs	r3, #7
 8004930:	e00c      	b.n	800494c <HAL_GPIO_Init+0x240>
 8004932:	2306      	movs	r3, #6
 8004934:	e00a      	b.n	800494c <HAL_GPIO_Init+0x240>
 8004936:	2305      	movs	r3, #5
 8004938:	e008      	b.n	800494c <HAL_GPIO_Init+0x240>
 800493a:	2304      	movs	r3, #4
 800493c:	e006      	b.n	800494c <HAL_GPIO_Init+0x240>
 800493e:	2303      	movs	r3, #3
 8004940:	e004      	b.n	800494c <HAL_GPIO_Init+0x240>
 8004942:	2302      	movs	r3, #2
 8004944:	e002      	b.n	800494c <HAL_GPIO_Init+0x240>
 8004946:	2301      	movs	r3, #1
 8004948:	e000      	b.n	800494c <HAL_GPIO_Init+0x240>
 800494a:	2300      	movs	r3, #0
 800494c:	69fa      	ldr	r2, [r7, #28]
 800494e:	f002 0203 	and.w	r2, r2, #3
 8004952:	0092      	lsls	r2, r2, #2
 8004954:	4093      	lsls	r3, r2
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	4313      	orrs	r3, r2
 800495a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800495c:	4935      	ldr	r1, [pc, #212]	; (8004a34 <HAL_GPIO_Init+0x328>)
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	089b      	lsrs	r3, r3, #2
 8004962:	3302      	adds	r3, #2
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800496a:	4b3d      	ldr	r3, [pc, #244]	; (8004a60 <HAL_GPIO_Init+0x354>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	43db      	mvns	r3, r3
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	4013      	ands	r3, r2
 8004978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	4313      	orrs	r3, r2
 800498c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800498e:	4a34      	ldr	r2, [pc, #208]	; (8004a60 <HAL_GPIO_Init+0x354>)
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004994:	4b32      	ldr	r3, [pc, #200]	; (8004a60 <HAL_GPIO_Init+0x354>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	43db      	mvns	r3, r3
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	4013      	ands	r3, r2
 80049a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049b8:	4a29      	ldr	r2, [pc, #164]	; (8004a60 <HAL_GPIO_Init+0x354>)
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049be:	4b28      	ldr	r3, [pc, #160]	; (8004a60 <HAL_GPIO_Init+0x354>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	43db      	mvns	r3, r3
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	4013      	ands	r3, r2
 80049cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	4313      	orrs	r3, r2
 80049e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049e2:	4a1f      	ldr	r2, [pc, #124]	; (8004a60 <HAL_GPIO_Init+0x354>)
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049e8:	4b1d      	ldr	r3, [pc, #116]	; (8004a60 <HAL_GPIO_Init+0x354>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	43db      	mvns	r3, r3
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	4013      	ands	r3, r2
 80049f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a0c:	4a14      	ldr	r2, [pc, #80]	; (8004a60 <HAL_GPIO_Init+0x354>)
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	3301      	adds	r3, #1
 8004a16:	61fb      	str	r3, [r7, #28]
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	2b0f      	cmp	r3, #15
 8004a1c:	f67f ae84 	bls.w	8004728 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a20:	bf00      	nop
 8004a22:	bf00      	nop
 8004a24:	3724      	adds	r7, #36	; 0x24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	40023800 	.word	0x40023800
 8004a34:	40013800 	.word	0x40013800
 8004a38:	40020000 	.word	0x40020000
 8004a3c:	40020400 	.word	0x40020400
 8004a40:	40020800 	.word	0x40020800
 8004a44:	40020c00 	.word	0x40020c00
 8004a48:	40021000 	.word	0x40021000
 8004a4c:	40021400 	.word	0x40021400
 8004a50:	40021800 	.word	0x40021800
 8004a54:	40021c00 	.word	0x40021c00
 8004a58:	40022000 	.word	0x40022000
 8004a5c:	40022400 	.word	0x40022400
 8004a60:	40013c00 	.word	0x40013c00

08004a64 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	e0d9      	b.n	8004c34 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a80:	2201      	movs	r2, #1
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	f040 80c9 	bne.w	8004c2e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004a9c:	4a6b      	ldr	r2, [pc, #428]	; (8004c4c <HAL_GPIO_DeInit+0x1e8>)
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	089b      	lsrs	r3, r3, #2
 8004aa2:	3302      	adds	r3, #2
 8004aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aa8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f003 0303 	and.w	r3, r3, #3
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	220f      	movs	r2, #15
 8004ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	4013      	ands	r3, r2
 8004abc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a63      	ldr	r2, [pc, #396]	; (8004c50 <HAL_GPIO_DeInit+0x1ec>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d037      	beq.n	8004b36 <HAL_GPIO_DeInit+0xd2>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a62      	ldr	r2, [pc, #392]	; (8004c54 <HAL_GPIO_DeInit+0x1f0>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d031      	beq.n	8004b32 <HAL_GPIO_DeInit+0xce>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a61      	ldr	r2, [pc, #388]	; (8004c58 <HAL_GPIO_DeInit+0x1f4>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d02b      	beq.n	8004b2e <HAL_GPIO_DeInit+0xca>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a60      	ldr	r2, [pc, #384]	; (8004c5c <HAL_GPIO_DeInit+0x1f8>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d025      	beq.n	8004b2a <HAL_GPIO_DeInit+0xc6>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a5f      	ldr	r2, [pc, #380]	; (8004c60 <HAL_GPIO_DeInit+0x1fc>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d01f      	beq.n	8004b26 <HAL_GPIO_DeInit+0xc2>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a5e      	ldr	r2, [pc, #376]	; (8004c64 <HAL_GPIO_DeInit+0x200>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d019      	beq.n	8004b22 <HAL_GPIO_DeInit+0xbe>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a5d      	ldr	r2, [pc, #372]	; (8004c68 <HAL_GPIO_DeInit+0x204>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d013      	beq.n	8004b1e <HAL_GPIO_DeInit+0xba>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a5c      	ldr	r2, [pc, #368]	; (8004c6c <HAL_GPIO_DeInit+0x208>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d00d      	beq.n	8004b1a <HAL_GPIO_DeInit+0xb6>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a5b      	ldr	r2, [pc, #364]	; (8004c70 <HAL_GPIO_DeInit+0x20c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d007      	beq.n	8004b16 <HAL_GPIO_DeInit+0xb2>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a5a      	ldr	r2, [pc, #360]	; (8004c74 <HAL_GPIO_DeInit+0x210>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d101      	bne.n	8004b12 <HAL_GPIO_DeInit+0xae>
 8004b0e:	2309      	movs	r3, #9
 8004b10:	e012      	b.n	8004b38 <HAL_GPIO_DeInit+0xd4>
 8004b12:	230a      	movs	r3, #10
 8004b14:	e010      	b.n	8004b38 <HAL_GPIO_DeInit+0xd4>
 8004b16:	2308      	movs	r3, #8
 8004b18:	e00e      	b.n	8004b38 <HAL_GPIO_DeInit+0xd4>
 8004b1a:	2307      	movs	r3, #7
 8004b1c:	e00c      	b.n	8004b38 <HAL_GPIO_DeInit+0xd4>
 8004b1e:	2306      	movs	r3, #6
 8004b20:	e00a      	b.n	8004b38 <HAL_GPIO_DeInit+0xd4>
 8004b22:	2305      	movs	r3, #5
 8004b24:	e008      	b.n	8004b38 <HAL_GPIO_DeInit+0xd4>
 8004b26:	2304      	movs	r3, #4
 8004b28:	e006      	b.n	8004b38 <HAL_GPIO_DeInit+0xd4>
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e004      	b.n	8004b38 <HAL_GPIO_DeInit+0xd4>
 8004b2e:	2302      	movs	r3, #2
 8004b30:	e002      	b.n	8004b38 <HAL_GPIO_DeInit+0xd4>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e000      	b.n	8004b38 <HAL_GPIO_DeInit+0xd4>
 8004b36:	2300      	movs	r3, #0
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	f002 0203 	and.w	r2, r2, #3
 8004b3e:	0092      	lsls	r2, r2, #2
 8004b40:	4093      	lsls	r3, r2
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d132      	bne.n	8004bae <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004b48:	4b4b      	ldr	r3, [pc, #300]	; (8004c78 <HAL_GPIO_DeInit+0x214>)
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	43db      	mvns	r3, r3
 8004b50:	4949      	ldr	r1, [pc, #292]	; (8004c78 <HAL_GPIO_DeInit+0x214>)
 8004b52:	4013      	ands	r3, r2
 8004b54:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004b56:	4b48      	ldr	r3, [pc, #288]	; (8004c78 <HAL_GPIO_DeInit+0x214>)
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	43db      	mvns	r3, r3
 8004b5e:	4946      	ldr	r1, [pc, #280]	; (8004c78 <HAL_GPIO_DeInit+0x214>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004b64:	4b44      	ldr	r3, [pc, #272]	; (8004c78 <HAL_GPIO_DeInit+0x214>)
 8004b66:	68da      	ldr	r2, [r3, #12]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	43db      	mvns	r3, r3
 8004b6c:	4942      	ldr	r1, [pc, #264]	; (8004c78 <HAL_GPIO_DeInit+0x214>)
 8004b6e:	4013      	ands	r3, r2
 8004b70:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004b72:	4b41      	ldr	r3, [pc, #260]	; (8004c78 <HAL_GPIO_DeInit+0x214>)
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	493f      	ldr	r1, [pc, #252]	; (8004c78 <HAL_GPIO_DeInit+0x214>)
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	220f      	movs	r2, #15
 8004b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004b90:	4a2e      	ldr	r2, [pc, #184]	; (8004c4c <HAL_GPIO_DeInit+0x1e8>)
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	089b      	lsrs	r3, r3, #2
 8004b96:	3302      	adds	r3, #2
 8004b98:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	43da      	mvns	r2, r3
 8004ba0:	482a      	ldr	r0, [pc, #168]	; (8004c4c <HAL_GPIO_DeInit+0x1e8>)
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	089b      	lsrs	r3, r3, #2
 8004ba6:	400a      	ands	r2, r1
 8004ba8:	3302      	adds	r3, #2
 8004baa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	2103      	movs	r1, #3
 8004bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bbc:	43db      	mvns	r3, r3
 8004bbe:	401a      	ands	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	08da      	lsrs	r2, r3, #3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3208      	adds	r2, #8
 8004bcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	220f      	movs	r2, #15
 8004bda:	fa02 f303 	lsl.w	r3, r2, r3
 8004bde:	43db      	mvns	r3, r3
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	08d2      	lsrs	r2, r2, #3
 8004be4:	4019      	ands	r1, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	3208      	adds	r2, #8
 8004bea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	2103      	movs	r1, #3
 8004bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bfc:	43db      	mvns	r3, r3
 8004bfe:	401a      	ands	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	2101      	movs	r1, #1
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c10:	43db      	mvns	r3, r3
 8004c12:	401a      	ands	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	2103      	movs	r1, #3
 8004c22:	fa01 f303 	lsl.w	r3, r1, r3
 8004c26:	43db      	mvns	r3, r3
 8004c28:	401a      	ands	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	3301      	adds	r3, #1
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	2b0f      	cmp	r3, #15
 8004c38:	f67f af22 	bls.w	8004a80 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004c3c:	bf00      	nop
 8004c3e:	bf00      	nop
 8004c40:	371c      	adds	r7, #28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	40013800 	.word	0x40013800
 8004c50:	40020000 	.word	0x40020000
 8004c54:	40020400 	.word	0x40020400
 8004c58:	40020800 	.word	0x40020800
 8004c5c:	40020c00 	.word	0x40020c00
 8004c60:	40021000 	.word	0x40021000
 8004c64:	40021400 	.word	0x40021400
 8004c68:	40021800 	.word	0x40021800
 8004c6c:	40021c00 	.word	0x40021c00
 8004c70:	40022000 	.word	0x40022000
 8004c74:	40022400 	.word	0x40022400
 8004c78:	40013c00 	.word	0x40013c00

08004c7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	460b      	mov	r3, r1
 8004c86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691a      	ldr	r2, [r3, #16]
 8004c8c:	887b      	ldrh	r3, [r7, #2]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c94:	2301      	movs	r3, #1
 8004c96:	73fb      	strb	r3, [r7, #15]
 8004c98:	e001      	b.n	8004c9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	807b      	strh	r3, [r7, #2]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cbc:	787b      	ldrb	r3, [r7, #1]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cc2:	887a      	ldrh	r2, [r7, #2]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004cc8:	e003      	b.n	8004cd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004cca:	887b      	ldrh	r3, [r7, #2]
 8004ccc:	041a      	lsls	r2, r3, #16
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	619a      	str	r2, [r3, #24]
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
	...

08004ce0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e0bf      	b.n	8004e72 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d106      	bne.n	8004d0c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7fc fef0 	bl	8001aec <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	699a      	ldr	r2, [r3, #24]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004d22:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6999      	ldr	r1, [r3, #24]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d38:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6899      	ldr	r1, [r3, #8]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	4b4a      	ldr	r3, [pc, #296]	; (8004e7c <HAL_LTDC_Init+0x19c>)
 8004d54:	400b      	ands	r3, r1
 8004d56:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	041b      	lsls	r3, r3, #16
 8004d5e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6899      	ldr	r1, [r3, #8]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	699a      	ldr	r2, [r3, #24]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68d9      	ldr	r1, [r3, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	4b3e      	ldr	r3, [pc, #248]	; (8004e7c <HAL_LTDC_Init+0x19c>)
 8004d82:	400b      	ands	r3, r1
 8004d84:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	041b      	lsls	r3, r3, #16
 8004d8c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68d9      	ldr	r1, [r3, #12]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a1a      	ldr	r2, [r3, #32]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6919      	ldr	r1, [r3, #16]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	4b33      	ldr	r3, [pc, #204]	; (8004e7c <HAL_LTDC_Init+0x19c>)
 8004db0:	400b      	ands	r3, r1
 8004db2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	041b      	lsls	r3, r3, #16
 8004dba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6919      	ldr	r1, [r3, #16]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6959      	ldr	r1, [r3, #20]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	4b27      	ldr	r3, [pc, #156]	; (8004e7c <HAL_LTDC_Init+0x19c>)
 8004dde:	400b      	ands	r3, r1
 8004de0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de6:	041b      	lsls	r3, r3, #16
 8004de8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6959      	ldr	r1, [r3, #20]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	431a      	orrs	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e06:	021b      	lsls	r3, r3, #8
 8004e08:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004e10:	041b      	lsls	r3, r3, #16
 8004e12:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004e22:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f042 0206 	orr.w	r2, r2, #6
 8004e4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699a      	ldr	r2, [r3, #24]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0201 	orr.w	r2, r2, #1
 8004e5e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	f000f800 	.word	0xf000f800

08004e80 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e96:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f003 0304 	and.w	r3, r3, #4
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d023      	beq.n	8004eea <HAL_LTDC_IRQHandler+0x6a>
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d01e      	beq.n	8004eea <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0204 	bic.w	r2, r2, #4
 8004eba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2204      	movs	r2, #4
 8004ec2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004eca:	f043 0201 	orr.w	r2, r3, #1
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2204      	movs	r2, #4
 8004ed8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f86f 	bl	8004fc8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d023      	beq.n	8004f3c <HAL_LTDC_IRQHandler+0xbc>
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d01e      	beq.n	8004f3c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0202 	bic.w	r2, r2, #2
 8004f0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2202      	movs	r2, #2
 8004f14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f1c:	f043 0202 	orr.w	r2, r3, #2
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2204      	movs	r2, #4
 8004f2a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f846 	bl	8004fc8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d01b      	beq.n	8004f7e <HAL_LTDC_IRQHandler+0xfe>
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d016      	beq.n	8004f7e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 0201 	bic.w	r2, r2, #1
 8004f5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2201      	movs	r2, #1
 8004f66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f82f 	bl	8004fdc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f003 0308 	and.w	r3, r3, #8
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01b      	beq.n	8004fc0 <HAL_LTDC_IRQHandler+0x140>
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f003 0308 	and.w	r3, r3, #8
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d016      	beq.n	8004fc0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 0208 	bic.w	r2, r2, #8
 8004fa0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2208      	movs	r2, #8
 8004fa8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f818 	bl	8004ff0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004fc0:	bf00      	nop
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005004:	b5b0      	push	{r4, r5, r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005016:	2b01      	cmp	r3, #1
 8005018:	d101      	bne.n	800501e <HAL_LTDC_ConfigLayer+0x1a>
 800501a:	2302      	movs	r3, #2
 800501c:	e02c      	b.n	8005078 <HAL_LTDC_ConfigLayer+0x74>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2202      	movs	r2, #2
 800502a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2134      	movs	r1, #52	; 0x34
 8005034:	fb01 f303 	mul.w	r3, r1, r3
 8005038:	4413      	add	r3, r2
 800503a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	4614      	mov	r4, r2
 8005042:	461d      	mov	r5, r3
 8005044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800504a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800504c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800504e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005050:	682b      	ldr	r3, [r5, #0]
 8005052:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	68b9      	ldr	r1, [r7, #8]
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 f83b 	bl	80050d4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2201      	movs	r2, #1
 8005064:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bdb0      	pop	{r4, r5, r7, pc}

08005080 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800508e:	2b01      	cmp	r3, #1
 8005090:	d101      	bne.n	8005096 <HAL_LTDC_EnableDither+0x16>
 8005092:	2302      	movs	r3, #2
 8005094:	e016      	b.n	80050c4 <HAL_LTDC_EnableDither+0x44>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2202      	movs	r2, #2
 80050a2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80050a6:	4b0a      	ldr	r3, [pc, #40]	; (80050d0 <HAL_LTDC_EnableDither+0x50>)
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	4a09      	ldr	r2, [pc, #36]	; (80050d0 <HAL_LTDC_EnableDither+0x50>)
 80050ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050b0:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	40016800 	.word	0x40016800

080050d4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b089      	sub	sp, #36	; 0x24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	0c1b      	lsrs	r3, r3, #16
 80050ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050f0:	4413      	add	r3, r2
 80050f2:	041b      	lsls	r3, r3, #16
 80050f4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	461a      	mov	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	01db      	lsls	r3, r3, #7
 8005100:	4413      	add	r3, r2
 8005102:	3384      	adds	r3, #132	; 0x84
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	6812      	ldr	r2, [r2, #0]
 800510a:	4611      	mov	r1, r2
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	01d2      	lsls	r2, r2, #7
 8005110:	440a      	add	r2, r1
 8005112:	3284      	adds	r2, #132	; 0x84
 8005114:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005118:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	0c1b      	lsrs	r3, r3, #16
 8005126:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800512a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800512c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4619      	mov	r1, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	01db      	lsls	r3, r3, #7
 8005138:	440b      	add	r3, r1
 800513a:	3384      	adds	r3, #132	; 0x84
 800513c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005142:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	68da      	ldr	r2, [r3, #12]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005152:	4413      	add	r3, r2
 8005154:	041b      	lsls	r3, r3, #16
 8005156:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	461a      	mov	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	01db      	lsls	r3, r3, #7
 8005162:	4413      	add	r3, r2
 8005164:	3384      	adds	r3, #132	; 0x84
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	6812      	ldr	r2, [r2, #0]
 800516c:	4611      	mov	r1, r2
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	01d2      	lsls	r2, r2, #7
 8005172:	440a      	add	r2, r1
 8005174:	3284      	adds	r2, #132	; 0x84
 8005176:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800517a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800518a:	4413      	add	r3, r2
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4619      	mov	r1, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	01db      	lsls	r3, r3, #7
 8005198:	440b      	add	r3, r1
 800519a:	3384      	adds	r3, #132	; 0x84
 800519c:	4619      	mov	r1, r3
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	461a      	mov	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	01db      	lsls	r3, r3, #7
 80051ae:	4413      	add	r3, r2
 80051b0:	3384      	adds	r3, #132	; 0x84
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	6812      	ldr	r2, [r2, #0]
 80051b8:	4611      	mov	r1, r2
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	01d2      	lsls	r2, r2, #7
 80051be:	440a      	add	r2, r1
 80051c0:	3284      	adds	r2, #132	; 0x84
 80051c2:	f023 0307 	bic.w	r3, r3, #7
 80051c6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	461a      	mov	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	01db      	lsls	r3, r3, #7
 80051d2:	4413      	add	r3, r2
 80051d4:	3384      	adds	r3, #132	; 0x84
 80051d6:	461a      	mov	r2, r3
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80051e4:	021b      	lsls	r3, r3, #8
 80051e6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80051ee:	041b      	lsls	r3, r3, #16
 80051f0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	061b      	lsls	r3, r3, #24
 80051f8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	461a      	mov	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	01db      	lsls	r3, r3, #7
 8005204:	4413      	add	r3, r2
 8005206:	3384      	adds	r3, #132	; 0x84
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	461a      	mov	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	01db      	lsls	r3, r3, #7
 8005214:	4413      	add	r3, r2
 8005216:	3384      	adds	r3, #132	; 0x84
 8005218:	461a      	mov	r2, r3
 800521a:	2300      	movs	r3, #0
 800521c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005224:	461a      	mov	r2, r3
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	431a      	orrs	r2, r3
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	431a      	orrs	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4619      	mov	r1, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	01db      	lsls	r3, r3, #7
 8005238:	440b      	add	r3, r1
 800523a:	3384      	adds	r3, #132	; 0x84
 800523c:	4619      	mov	r1, r3
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	4313      	orrs	r3, r2
 8005242:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	461a      	mov	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	01db      	lsls	r3, r3, #7
 800524e:	4413      	add	r3, r2
 8005250:	3384      	adds	r3, #132	; 0x84
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	6812      	ldr	r2, [r2, #0]
 8005258:	4611      	mov	r1, r2
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	01d2      	lsls	r2, r2, #7
 800525e:	440a      	add	r2, r1
 8005260:	3284      	adds	r2, #132	; 0x84
 8005262:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005266:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	461a      	mov	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	01db      	lsls	r3, r3, #7
 8005272:	4413      	add	r3, r2
 8005274:	3384      	adds	r3, #132	; 0x84
 8005276:	461a      	mov	r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	461a      	mov	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	01db      	lsls	r3, r3, #7
 8005288:	4413      	add	r3, r2
 800528a:	3384      	adds	r3, #132	; 0x84
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	6812      	ldr	r2, [r2, #0]
 8005292:	4611      	mov	r1, r2
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	01d2      	lsls	r2, r2, #7
 8005298:	440a      	add	r2, r1
 800529a:	3284      	adds	r2, #132	; 0x84
 800529c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80052a0:	f023 0307 	bic.w	r3, r3, #7
 80052a4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	69da      	ldr	r2, [r3, #28]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	68f9      	ldr	r1, [r7, #12]
 80052b0:	6809      	ldr	r1, [r1, #0]
 80052b2:	4608      	mov	r0, r1
 80052b4:	6879      	ldr	r1, [r7, #4]
 80052b6:	01c9      	lsls	r1, r1, #7
 80052b8:	4401      	add	r1, r0
 80052ba:	3184      	adds	r1, #132	; 0x84
 80052bc:	4313      	orrs	r3, r2
 80052be:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	461a      	mov	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	01db      	lsls	r3, r3, #7
 80052ca:	4413      	add	r3, r2
 80052cc:	3384      	adds	r3, #132	; 0x84
 80052ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	461a      	mov	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	01db      	lsls	r3, r3, #7
 80052da:	4413      	add	r3, r2
 80052dc:	3384      	adds	r3, #132	; 0x84
 80052de:	461a      	mov	r2, r3
 80052e0:	2300      	movs	r3, #0
 80052e2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	461a      	mov	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	01db      	lsls	r3, r3, #7
 80052ee:	4413      	add	r3, r2
 80052f0:	3384      	adds	r3, #132	; 0x84
 80052f2:	461a      	mov	r2, r3
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d102      	bne.n	8005308 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005302:	2304      	movs	r3, #4
 8005304:	61fb      	str	r3, [r7, #28]
 8005306:	e01b      	b.n	8005340 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d102      	bne.n	8005316 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005310:	2303      	movs	r3, #3
 8005312:	61fb      	str	r3, [r7, #28]
 8005314:	e014      	b.n	8005340 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	2b04      	cmp	r3, #4
 800531c:	d00b      	beq.n	8005336 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005322:	2b02      	cmp	r3, #2
 8005324:	d007      	beq.n	8005336 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800532a:	2b03      	cmp	r3, #3
 800532c:	d003      	beq.n	8005336 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005332:	2b07      	cmp	r3, #7
 8005334:	d102      	bne.n	800533c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005336:	2302      	movs	r3, #2
 8005338:	61fb      	str	r3, [r7, #28]
 800533a:	e001      	b.n	8005340 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800533c:	2301      	movs	r3, #1
 800533e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	461a      	mov	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	01db      	lsls	r3, r3, #7
 800534a:	4413      	add	r3, r2
 800534c:	3384      	adds	r3, #132	; 0x84
 800534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	6812      	ldr	r2, [r2, #0]
 8005354:	4611      	mov	r1, r2
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	01d2      	lsls	r2, r2, #7
 800535a:	440a      	add	r2, r1
 800535c:	3284      	adds	r2, #132	; 0x84
 800535e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005362:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005368:	69fa      	ldr	r2, [r7, #28]
 800536a:	fb02 f303 	mul.w	r3, r2, r3
 800536e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	6859      	ldr	r1, [r3, #4]
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	1acb      	subs	r3, r1, r3
 800537a:	69f9      	ldr	r1, [r7, #28]
 800537c:	fb01 f303 	mul.w	r3, r1, r3
 8005380:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005382:	68f9      	ldr	r1, [r7, #12]
 8005384:	6809      	ldr	r1, [r1, #0]
 8005386:	4608      	mov	r0, r1
 8005388:	6879      	ldr	r1, [r7, #4]
 800538a:	01c9      	lsls	r1, r1, #7
 800538c:	4401      	add	r1, r0
 800538e:	3184      	adds	r1, #132	; 0x84
 8005390:	4313      	orrs	r3, r2
 8005392:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	461a      	mov	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	01db      	lsls	r3, r3, #7
 800539e:	4413      	add	r3, r2
 80053a0:	3384      	adds	r3, #132	; 0x84
 80053a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	6812      	ldr	r2, [r2, #0]
 80053a8:	4611      	mov	r1, r2
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	01d2      	lsls	r2, r2, #7
 80053ae:	440a      	add	r2, r1
 80053b0:	3284      	adds	r2, #132	; 0x84
 80053b2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80053b6:	f023 0307 	bic.w	r3, r3, #7
 80053ba:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	461a      	mov	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	01db      	lsls	r3, r3, #7
 80053c6:	4413      	add	r3, r2
 80053c8:	3384      	adds	r3, #132	; 0x84
 80053ca:	461a      	mov	r2, r3
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	461a      	mov	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	01db      	lsls	r3, r3, #7
 80053dc:	4413      	add	r3, r2
 80053de:	3384      	adds	r3, #132	; 0x84
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	6812      	ldr	r2, [r2, #0]
 80053e6:	4611      	mov	r1, r2
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	01d2      	lsls	r2, r2, #7
 80053ec:	440a      	add	r2, r1
 80053ee:	3284      	adds	r2, #132	; 0x84
 80053f0:	f043 0301 	orr.w	r3, r3, #1
 80053f4:	6013      	str	r3, [r2, #0]
}
 80053f6:	bf00      	nop
 80053f8:	3724      	adds	r7, #36	; 0x24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005402:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005404:	b08f      	sub	sp, #60	; 0x3c
 8005406:	af0a      	add	r7, sp, #40	; 0x28
 8005408:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e10f      	b.n	8005634 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d106      	bne.n	8005434 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f009 f858 	bl	800e4e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2203      	movs	r2, #3
 8005438:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005444:	2b00      	cmp	r3, #0
 8005446:	d102      	bne.n	800544e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f003 fc0b 	bl	8008c6e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	603b      	str	r3, [r7, #0]
 800545e:	687e      	ldr	r6, [r7, #4]
 8005460:	466d      	mov	r5, sp
 8005462:	f106 0410 	add.w	r4, r6, #16
 8005466:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005468:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800546a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800546c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800546e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005472:	e885 0003 	stmia.w	r5, {r0, r1}
 8005476:	1d33      	adds	r3, r6, #4
 8005478:	cb0e      	ldmia	r3, {r1, r2, r3}
 800547a:	6838      	ldr	r0, [r7, #0]
 800547c:	f003 fae2 	bl	8008a44 <USB_CoreInit>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d005      	beq.n	8005492 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2202      	movs	r2, #2
 800548a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e0d0      	b.n	8005634 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2100      	movs	r1, #0
 8005498:	4618      	mov	r0, r3
 800549a:	f003 fbf9 	bl	8008c90 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800549e:	2300      	movs	r3, #0
 80054a0:	73fb      	strb	r3, [r7, #15]
 80054a2:	e04a      	b.n	800553a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80054a4:	7bfa      	ldrb	r2, [r7, #15]
 80054a6:	6879      	ldr	r1, [r7, #4]
 80054a8:	4613      	mov	r3, r2
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	4413      	add	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	440b      	add	r3, r1
 80054b2:	333d      	adds	r3, #61	; 0x3d
 80054b4:	2201      	movs	r2, #1
 80054b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80054b8:	7bfa      	ldrb	r2, [r7, #15]
 80054ba:	6879      	ldr	r1, [r7, #4]
 80054bc:	4613      	mov	r3, r2
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	4413      	add	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	440b      	add	r3, r1
 80054c6:	333c      	adds	r3, #60	; 0x3c
 80054c8:	7bfa      	ldrb	r2, [r7, #15]
 80054ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80054cc:	7bfa      	ldrb	r2, [r7, #15]
 80054ce:	7bfb      	ldrb	r3, [r7, #15]
 80054d0:	b298      	uxth	r0, r3
 80054d2:	6879      	ldr	r1, [r7, #4]
 80054d4:	4613      	mov	r3, r2
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	4413      	add	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	440b      	add	r3, r1
 80054de:	3344      	adds	r3, #68	; 0x44
 80054e0:	4602      	mov	r2, r0
 80054e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80054e4:	7bfa      	ldrb	r2, [r7, #15]
 80054e6:	6879      	ldr	r1, [r7, #4]
 80054e8:	4613      	mov	r3, r2
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	4413      	add	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	440b      	add	r3, r1
 80054f2:	3340      	adds	r3, #64	; 0x40
 80054f4:	2200      	movs	r2, #0
 80054f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80054f8:	7bfa      	ldrb	r2, [r7, #15]
 80054fa:	6879      	ldr	r1, [r7, #4]
 80054fc:	4613      	mov	r3, r2
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	4413      	add	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	440b      	add	r3, r1
 8005506:	3348      	adds	r3, #72	; 0x48
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800550c:	7bfa      	ldrb	r2, [r7, #15]
 800550e:	6879      	ldr	r1, [r7, #4]
 8005510:	4613      	mov	r3, r2
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	4413      	add	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	440b      	add	r3, r1
 800551a:	334c      	adds	r3, #76	; 0x4c
 800551c:	2200      	movs	r2, #0
 800551e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005520:	7bfa      	ldrb	r2, [r7, #15]
 8005522:	6879      	ldr	r1, [r7, #4]
 8005524:	4613      	mov	r3, r2
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	4413      	add	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	440b      	add	r3, r1
 800552e:	3354      	adds	r3, #84	; 0x54
 8005530:	2200      	movs	r2, #0
 8005532:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005534:	7bfb      	ldrb	r3, [r7, #15]
 8005536:	3301      	adds	r3, #1
 8005538:	73fb      	strb	r3, [r7, #15]
 800553a:	7bfa      	ldrb	r2, [r7, #15]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	429a      	cmp	r2, r3
 8005542:	d3af      	bcc.n	80054a4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005544:	2300      	movs	r3, #0
 8005546:	73fb      	strb	r3, [r7, #15]
 8005548:	e044      	b.n	80055d4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800554a:	7bfa      	ldrb	r2, [r7, #15]
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	4613      	mov	r3, r2
 8005550:	00db      	lsls	r3, r3, #3
 8005552:	4413      	add	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	440b      	add	r3, r1
 8005558:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800555c:	2200      	movs	r2, #0
 800555e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005560:	7bfa      	ldrb	r2, [r7, #15]
 8005562:	6879      	ldr	r1, [r7, #4]
 8005564:	4613      	mov	r3, r2
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	4413      	add	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	440b      	add	r3, r1
 800556e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005572:	7bfa      	ldrb	r2, [r7, #15]
 8005574:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005576:	7bfa      	ldrb	r2, [r7, #15]
 8005578:	6879      	ldr	r1, [r7, #4]
 800557a:	4613      	mov	r3, r2
 800557c:	00db      	lsls	r3, r3, #3
 800557e:	4413      	add	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	440b      	add	r3, r1
 8005584:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005588:	2200      	movs	r2, #0
 800558a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800558c:	7bfa      	ldrb	r2, [r7, #15]
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	4613      	mov	r3, r2
 8005592:	00db      	lsls	r3, r3, #3
 8005594:	4413      	add	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	440b      	add	r3, r1
 800559a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800559e:	2200      	movs	r2, #0
 80055a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80055a2:	7bfa      	ldrb	r2, [r7, #15]
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	4613      	mov	r3, r2
 80055a8:	00db      	lsls	r3, r3, #3
 80055aa:	4413      	add	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	440b      	add	r3, r1
 80055b0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80055b8:	7bfa      	ldrb	r2, [r7, #15]
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	4613      	mov	r3, r2
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	4413      	add	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	440b      	add	r3, r1
 80055c6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80055ca:	2200      	movs	r2, #0
 80055cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
 80055d0:	3301      	adds	r3, #1
 80055d2:	73fb      	strb	r3, [r7, #15]
 80055d4:	7bfa      	ldrb	r2, [r7, #15]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d3b5      	bcc.n	800554a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	687e      	ldr	r6, [r7, #4]
 80055e6:	466d      	mov	r5, sp
 80055e8:	f106 0410 	add.w	r4, r6, #16
 80055ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80055f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80055fc:	1d33      	adds	r3, r6, #4
 80055fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005600:	6838      	ldr	r0, [r7, #0]
 8005602:	f003 fb91 	bl	8008d28 <USB_DevInit>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d005      	beq.n	8005618 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2202      	movs	r2, #2
 8005610:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e00d      	b.n	8005634 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4618      	mov	r0, r3
 800562e:	f004 fce0 	bl	8009ff2 <USB_DevDisconnect>

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800563c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005650:	2b01      	cmp	r3, #1
 8005652:	d101      	bne.n	8005658 <HAL_PCD_Start+0x1c>
 8005654:	2302      	movs	r3, #2
 8005656:	e020      	b.n	800569a <HAL_PCD_Start+0x5e>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005664:	2b01      	cmp	r3, #1
 8005666:	d109      	bne.n	800567c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800566c:	2b01      	cmp	r3, #1
 800566e:	d005      	beq.n	800567c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005674:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4618      	mov	r0, r3
 8005682:	f003 fae3 	bl	8008c4c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4618      	mov	r0, r3
 800568c:	f004 fc90 	bl	8009fb0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80056a2:	b590      	push	{r4, r7, lr}
 80056a4:	b08d      	sub	sp, #52	; 0x34
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f004 fd4e 	bl	800a15a <USB_GetMode>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f040 848a 	bne.w	8005fda <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f004 fcb2 	bl	800a034 <USB_ReadInterrupts>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 8480 	beq.w	8005fd8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	0a1b      	lsrs	r3, r3, #8
 80056e2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f004 fc9f 	bl	800a034 <USB_ReadInterrupts>
 80056f6:	4603      	mov	r3, r0
 80056f8:	f003 0302 	and.w	r3, r3, #2
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d107      	bne.n	8005710 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	695a      	ldr	r2, [r3, #20]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f002 0202 	and.w	r2, r2, #2
 800570e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4618      	mov	r0, r3
 8005716:	f004 fc8d 	bl	800a034 <USB_ReadInterrupts>
 800571a:	4603      	mov	r3, r0
 800571c:	f003 0310 	and.w	r3, r3, #16
 8005720:	2b10      	cmp	r3, #16
 8005722:	d161      	bne.n	80057e8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	699a      	ldr	r2, [r3, #24]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f022 0210 	bic.w	r2, r2, #16
 8005732:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	f003 020f 	and.w	r2, r3, #15
 8005740:	4613      	mov	r3, r2
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	4413      	add	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	4413      	add	r3, r2
 8005750:	3304      	adds	r3, #4
 8005752:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	0c5b      	lsrs	r3, r3, #17
 8005758:	f003 030f 	and.w	r3, r3, #15
 800575c:	2b02      	cmp	r3, #2
 800575e:	d124      	bne.n	80057aa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005766:	4013      	ands	r3, r2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d035      	beq.n	80057d8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	091b      	lsrs	r3, r3, #4
 8005774:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005776:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800577a:	b29b      	uxth	r3, r3
 800577c:	461a      	mov	r2, r3
 800577e:	6a38      	ldr	r0, [r7, #32]
 8005780:	f004 fac4 	bl	8009d0c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	691a      	ldr	r2, [r3, #16]
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	091b      	lsrs	r3, r3, #4
 800578c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005790:	441a      	add	r2, r3
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	6a1a      	ldr	r2, [r3, #32]
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	091b      	lsrs	r3, r3, #4
 800579e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057a2:	441a      	add	r2, r3
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	621a      	str	r2, [r3, #32]
 80057a8:	e016      	b.n	80057d8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	0c5b      	lsrs	r3, r3, #17
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	2b06      	cmp	r3, #6
 80057b4:	d110      	bne.n	80057d8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80057bc:	2208      	movs	r2, #8
 80057be:	4619      	mov	r1, r3
 80057c0:	6a38      	ldr	r0, [r7, #32]
 80057c2:	f004 faa3 	bl	8009d0c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	6a1a      	ldr	r2, [r3, #32]
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	091b      	lsrs	r3, r3, #4
 80057ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057d2:	441a      	add	r2, r3
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	699a      	ldr	r2, [r3, #24]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0210 	orr.w	r2, r2, #16
 80057e6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4618      	mov	r0, r3
 80057ee:	f004 fc21 	bl	800a034 <USB_ReadInterrupts>
 80057f2:	4603      	mov	r3, r0
 80057f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80057fc:	f040 80a7 	bne.w	800594e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4618      	mov	r0, r3
 800580a:	f004 fc26 	bl	800a05a <USB_ReadDevAllOutEpInterrupt>
 800580e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005810:	e099      	b.n	8005946 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 808e 	beq.w	800593a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005824:	b2d2      	uxtb	r2, r2
 8005826:	4611      	mov	r1, r2
 8005828:	4618      	mov	r0, r3
 800582a:	f004 fc4a 	bl	800a0c2 <USB_ReadDevOutEPInterrupt>
 800582e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00c      	beq.n	8005854 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005846:	461a      	mov	r2, r3
 8005848:	2301      	movs	r3, #1
 800584a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800584c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 fec2 	bl	80065d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	f003 0308 	and.w	r3, r3, #8
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00c      	beq.n	8005878 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	015a      	lsls	r2, r3, #5
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	4413      	add	r3, r2
 8005866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586a:	461a      	mov	r2, r3
 800586c:	2308      	movs	r3, #8
 800586e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005870:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 ff98 	bl	80067a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	f003 0310 	and.w	r3, r3, #16
 800587e:	2b00      	cmp	r3, #0
 8005880:	d008      	beq.n	8005894 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	015a      	lsls	r2, r3, #5
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	4413      	add	r3, r2
 800588a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800588e:	461a      	mov	r2, r3
 8005890:	2310      	movs	r3, #16
 8005892:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d030      	beq.n	8005900 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a6:	2b80      	cmp	r3, #128	; 0x80
 80058a8:	d109      	bne.n	80058be <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	69fa      	ldr	r2, [r7, #28]
 80058b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058bc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80058be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058c0:	4613      	mov	r3, r2
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	4413      	add	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	4413      	add	r3, r2
 80058d0:	3304      	adds	r3, #4
 80058d2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	78db      	ldrb	r3, [r3, #3]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d108      	bne.n	80058ee <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	2200      	movs	r2, #0
 80058e0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	4619      	mov	r1, r3
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f008 ff0b 	bl	800e704 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	015a      	lsls	r2, r3, #5
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fa:	461a      	mov	r2, r3
 80058fc:	2302      	movs	r3, #2
 80058fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	f003 0320 	and.w	r3, r3, #32
 8005906:	2b00      	cmp	r3, #0
 8005908:	d008      	beq.n	800591c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	4413      	add	r3, r2
 8005912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005916:	461a      	mov	r2, r3
 8005918:	2320      	movs	r3, #32
 800591a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d009      	beq.n	800593a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	4413      	add	r3, r2
 800592e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005932:	461a      	mov	r2, r3
 8005934:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005938:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	3301      	adds	r3, #1
 800593e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005942:	085b      	lsrs	r3, r3, #1
 8005944:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005948:	2b00      	cmp	r3, #0
 800594a:	f47f af62 	bne.w	8005812 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4618      	mov	r0, r3
 8005954:	f004 fb6e 	bl	800a034 <USB_ReadInterrupts>
 8005958:	4603      	mov	r3, r0
 800595a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800595e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005962:	f040 80db 	bne.w	8005b1c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4618      	mov	r0, r3
 800596c:	f004 fb8f 	bl	800a08e <USB_ReadDevAllInEpInterrupt>
 8005970:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005972:	2300      	movs	r3, #0
 8005974:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005976:	e0cd      	b.n	8005b14 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b00      	cmp	r3, #0
 8005980:	f000 80c2 	beq.w	8005b08 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800598a:	b2d2      	uxtb	r2, r2
 800598c:	4611      	mov	r1, r2
 800598e:	4618      	mov	r0, r3
 8005990:	f004 fbb5 	bl	800a0fe <USB_ReadDevInEPInterrupt>
 8005994:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	d057      	beq.n	8005a50 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	2201      	movs	r2, #1
 80059a8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ac:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	43db      	mvns	r3, r3
 80059ba:	69f9      	ldr	r1, [r7, #28]
 80059bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059c0:	4013      	ands	r3, r2
 80059c2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d0:	461a      	mov	r2, r3
 80059d2:	2301      	movs	r3, #1
 80059d4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d132      	bne.n	8005a44 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80059de:	6879      	ldr	r1, [r7, #4]
 80059e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e2:	4613      	mov	r3, r2
 80059e4:	00db      	lsls	r3, r3, #3
 80059e6:	4413      	add	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	440b      	add	r3, r1
 80059ec:	334c      	adds	r3, #76	; 0x4c
 80059ee:	6819      	ldr	r1, [r3, #0]
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059f4:	4613      	mov	r3, r2
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	4413      	add	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4403      	add	r3, r0
 80059fe:	3348      	adds	r3, #72	; 0x48
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4419      	add	r1, r3
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a08:	4613      	mov	r3, r2
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	4413      	add	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4403      	add	r3, r0
 8005a12:	334c      	adds	r3, #76	; 0x4c
 8005a14:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d113      	bne.n	8005a44 <HAL_PCD_IRQHandler+0x3a2>
 8005a1c:	6879      	ldr	r1, [r7, #4]
 8005a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a20:	4613      	mov	r3, r2
 8005a22:	00db      	lsls	r3, r3, #3
 8005a24:	4413      	add	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	440b      	add	r3, r1
 8005a2a:	3354      	adds	r3, #84	; 0x54
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d108      	bne.n	8005a44 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6818      	ldr	r0, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	2101      	movs	r1, #1
 8005a40:	f004 fbbc 	bl	800a1bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	4619      	mov	r1, r3
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f008 fdd5 	bl	800e5fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f003 0308 	and.w	r3, r3, #8
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d008      	beq.n	8005a6c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a66:	461a      	mov	r2, r3
 8005a68:	2308      	movs	r3, #8
 8005a6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	f003 0310 	and.w	r3, r3, #16
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d008      	beq.n	8005a88 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a82:	461a      	mov	r2, r3
 8005a84:	2310      	movs	r3, #16
 8005a86:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d008      	beq.n	8005aa4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	2340      	movs	r3, #64	; 0x40
 8005aa2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d023      	beq.n	8005af6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005aae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ab0:	6a38      	ldr	r0, [r7, #32]
 8005ab2:	f003 fa9d 	bl	8008ff0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab8:	4613      	mov	r3, r2
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	4413      	add	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	3338      	adds	r3, #56	; 0x38
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	3304      	adds	r3, #4
 8005ac8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	78db      	ldrb	r3, [r3, #3]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d108      	bne.n	8005ae4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	4619      	mov	r1, r3
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f008 fe22 	bl	800e728 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af0:	461a      	mov	r2, r3
 8005af2:	2302      	movs	r3, #2
 8005af4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d003      	beq.n	8005b08 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005b00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fcdb 	bl	80064be <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b10:	085b      	lsrs	r3, r3, #1
 8005b12:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f47f af2e 	bne.w	8005978 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f004 fa87 	bl	800a034 <USB_ReadInterrupts>
 8005b26:	4603      	mov	r3, r0
 8005b28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b30:	d122      	bne.n	8005b78 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	69fa      	ldr	r2, [r7, #28]
 8005b3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b40:	f023 0301 	bic.w	r3, r3, #1
 8005b44:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d108      	bne.n	8005b62 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005b58:	2100      	movs	r1, #0
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fec2 	bl	80068e4 <HAL_PCDEx_LPM_Callback>
 8005b60:	e002      	b.n	8005b68 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f008 fdc0 	bl	800e6e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	695a      	ldr	r2, [r3, #20]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005b76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f004 fa59 	bl	800a034 <USB_ReadInterrupts>
 8005b82:	4603      	mov	r3, r0
 8005b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b8c:	d112      	bne.n	8005bb4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d102      	bne.n	8005ba4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f008 fd7c 	bl	800e69c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	695a      	ldr	r2, [r3, #20]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005bb2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f004 fa3b 	bl	800a034 <USB_ReadInterrupts>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bc8:	f040 80b7 	bne.w	8005d3a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	69fa      	ldr	r2, [r7, #28]
 8005bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bda:	f023 0301 	bic.w	r3, r3, #1
 8005bde:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2110      	movs	r1, #16
 8005be6:	4618      	mov	r0, r3
 8005be8:	f003 fa02 	bl	8008ff0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bec:	2300      	movs	r3, #0
 8005bee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bf0:	e046      	b.n	8005c80 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c04:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c16:	0151      	lsls	r1, r2, #5
 8005c18:	69fa      	ldr	r2, [r7, #28]
 8005c1a:	440a      	add	r2, r1
 8005c1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c24:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c32:	461a      	mov	r2, r3
 8005c34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c38:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3c:	015a      	lsls	r2, r3, #5
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c4a:	0151      	lsls	r1, r2, #5
 8005c4c:	69fa      	ldr	r2, [r7, #28]
 8005c4e:	440a      	add	r2, r1
 8005c50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c58:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c6a:	0151      	lsls	r1, r2, #5
 8005c6c:	69fa      	ldr	r2, [r7, #28]
 8005c6e:	440a      	add	r2, r1
 8005c70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c78:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d3b3      	bcc.n	8005bf2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	69fa      	ldr	r2, [r7, #28]
 8005c94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c98:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005c9c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d016      	beq.n	8005cd4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cb0:	69fa      	ldr	r2, [r7, #28]
 8005cb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cb6:	f043 030b 	orr.w	r3, r3, #11
 8005cba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc6:	69fa      	ldr	r2, [r7, #28]
 8005cc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ccc:	f043 030b 	orr.w	r3, r3, #11
 8005cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8005cd2:	e015      	b.n	8005d00 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	69fa      	ldr	r2, [r7, #28]
 8005cde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ce2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005ce6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005cea:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	69fa      	ldr	r2, [r7, #28]
 8005cf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cfa:	f043 030b 	orr.w	r3, r3, #11
 8005cfe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	69fa      	ldr	r2, [r7, #28]
 8005d0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d0e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d12:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6818      	ldr	r0, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005d24:	461a      	mov	r2, r3
 8005d26:	f004 fa49 	bl	800a1bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	695a      	ldr	r2, [r3, #20]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005d38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f004 f978 	bl	800a034 <USB_ReadInterrupts>
 8005d44:	4603      	mov	r3, r0
 8005d46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d4e:	d124      	bne.n	8005d9a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4618      	mov	r0, r3
 8005d56:	f004 fa0e 	bl	800a176 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f003 f9c3 	bl	80090ea <USB_GetDevSpeed>
 8005d64:	4603      	mov	r3, r0
 8005d66:	461a      	mov	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681c      	ldr	r4, [r3, #0]
 8005d70:	f001 fa28 	bl	80071c4 <HAL_RCC_GetHCLKFreq>
 8005d74:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	4620      	mov	r0, r4
 8005d80:	f002 fec2 	bl	8008b08 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f008 fc60 	bl	800e64a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	695a      	ldr	r2, [r3, #20]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005d98:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f004 f948 	bl	800a034 <USB_ReadInterrupts>
 8005da4:	4603      	mov	r3, r0
 8005da6:	f003 0308 	and.w	r3, r3, #8
 8005daa:	2b08      	cmp	r3, #8
 8005dac:	d10a      	bne.n	8005dc4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f008 fc3d 	bl	800e62e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	695a      	ldr	r2, [r3, #20]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f002 0208 	and.w	r2, r2, #8
 8005dc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f004 f933 	bl	800a034 <USB_ReadInterrupts>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd4:	2b80      	cmp	r3, #128	; 0x80
 8005dd6:	d122      	bne.n	8005e1e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005de4:	2301      	movs	r3, #1
 8005de6:	627b      	str	r3, [r7, #36]	; 0x24
 8005de8:	e014      	b.n	8005e14 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005dea:	6879      	ldr	r1, [r7, #4]
 8005dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dee:	4613      	mov	r3, r2
 8005df0:	00db      	lsls	r3, r3, #3
 8005df2:	4413      	add	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	440b      	add	r3, r1
 8005df8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d105      	bne.n	8005e0e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	4619      	mov	r1, r3
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 fb27 	bl	800645c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	3301      	adds	r3, #1
 8005e12:	627b      	str	r3, [r7, #36]	; 0x24
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d3e5      	bcc.n	8005dea <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f004 f906 	bl	800a034 <USB_ReadInterrupts>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e32:	d13b      	bne.n	8005eac <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e34:	2301      	movs	r3, #1
 8005e36:	627b      	str	r3, [r7, #36]	; 0x24
 8005e38:	e02b      	b.n	8005e92 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005e4a:	6879      	ldr	r1, [r7, #4]
 8005e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e4e:	4613      	mov	r3, r2
 8005e50:	00db      	lsls	r3, r3, #3
 8005e52:	4413      	add	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	440b      	add	r3, r1
 8005e58:	3340      	adds	r3, #64	; 0x40
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d115      	bne.n	8005e8c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005e60:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	da12      	bge.n	8005e8c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005e66:	6879      	ldr	r1, [r7, #4]
 8005e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	00db      	lsls	r3, r3, #3
 8005e6e:	4413      	add	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	440b      	add	r3, r1
 8005e74:	333f      	adds	r3, #63	; 0x3f
 8005e76:	2201      	movs	r2, #1
 8005e78:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	4619      	mov	r1, r3
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fae8 	bl	800645c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8e:	3301      	adds	r3, #1
 8005e90:	627b      	str	r3, [r7, #36]	; 0x24
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d3ce      	bcc.n	8005e3a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	695a      	ldr	r2, [r3, #20]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005eaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f004 f8bf 	bl	800a034 <USB_ReadInterrupts>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ebc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ec0:	d155      	bne.n	8005f6e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ec6:	e045      	b.n	8005f54 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ed8:	6879      	ldr	r1, [r7, #4]
 8005eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005edc:	4613      	mov	r3, r2
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	4413      	add	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	440b      	add	r3, r1
 8005ee6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d12e      	bne.n	8005f4e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005ef0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	da2b      	bge.n	8005f4e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005f02:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d121      	bne.n	8005f4e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005f0a:	6879      	ldr	r1, [r7, #4]
 8005f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f0e:	4613      	mov	r3, r2
 8005f10:	00db      	lsls	r3, r3, #3
 8005f12:	4413      	add	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	440b      	add	r3, r1
 8005f18:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005f28:	6a3b      	ldr	r3, [r7, #32]
 8005f2a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10a      	bne.n	8005f4e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	69fa      	ldr	r2, [r7, #28]
 8005f42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f4a:	6053      	str	r3, [r2, #4]
            break;
 8005f4c:	e007      	b.n	8005f5e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	3301      	adds	r3, #1
 8005f52:	627b      	str	r3, [r7, #36]	; 0x24
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d3b4      	bcc.n	8005ec8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	695a      	ldr	r2, [r3, #20]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005f6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f004 f85e 	bl	800a034 <USB_ReadInterrupts>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f82:	d10a      	bne.n	8005f9a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f008 fbe1 	bl	800e74c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	695a      	ldr	r2, [r3, #20]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005f98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f004 f848 	bl	800a034 <USB_ReadInterrupts>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	f003 0304 	and.w	r3, r3, #4
 8005faa:	2b04      	cmp	r3, #4
 8005fac:	d115      	bne.n	8005fda <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	f003 0304 	and.w	r3, r3, #4
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d002      	beq.n	8005fc6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f008 fbd1 	bl	800e768 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6859      	ldr	r1, [r3, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	605a      	str	r2, [r3, #4]
 8005fd6:	e000      	b.n	8005fda <HAL_PCD_IRQHandler+0x938>
      return;
 8005fd8:	bf00      	nop
    }
  }
}
 8005fda:	3734      	adds	r7, #52	; 0x34
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd90      	pop	{r4, r7, pc}

08005fe0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d101      	bne.n	8005ffa <HAL_PCD_SetAddress+0x1a>
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	e013      	b.n	8006022 <HAL_PCD_SetAddress+0x42>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	78fa      	ldrb	r2, [r7, #3]
 8006006:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	78fa      	ldrb	r2, [r7, #3]
 8006010:	4611      	mov	r1, r2
 8006012:	4618      	mov	r0, r3
 8006014:	f003 ffa6 	bl	8009f64 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b084      	sub	sp, #16
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
 8006032:	4608      	mov	r0, r1
 8006034:	4611      	mov	r1, r2
 8006036:	461a      	mov	r2, r3
 8006038:	4603      	mov	r3, r0
 800603a:	70fb      	strb	r3, [r7, #3]
 800603c:	460b      	mov	r3, r1
 800603e:	803b      	strh	r3, [r7, #0]
 8006040:	4613      	mov	r3, r2
 8006042:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006048:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800604c:	2b00      	cmp	r3, #0
 800604e:	da0f      	bge.n	8006070 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	f003 020f 	and.w	r2, r3, #15
 8006056:	4613      	mov	r3, r2
 8006058:	00db      	lsls	r3, r3, #3
 800605a:	4413      	add	r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	3338      	adds	r3, #56	; 0x38
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	4413      	add	r3, r2
 8006064:	3304      	adds	r3, #4
 8006066:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2201      	movs	r2, #1
 800606c:	705a      	strb	r2, [r3, #1]
 800606e:	e00f      	b.n	8006090 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006070:	78fb      	ldrb	r3, [r7, #3]
 8006072:	f003 020f 	and.w	r2, r3, #15
 8006076:	4613      	mov	r3, r2
 8006078:	00db      	lsls	r3, r3, #3
 800607a:	4413      	add	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	4413      	add	r3, r2
 8006086:	3304      	adds	r3, #4
 8006088:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006090:	78fb      	ldrb	r3, [r7, #3]
 8006092:	f003 030f 	and.w	r3, r3, #15
 8006096:	b2da      	uxtb	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800609c:	883a      	ldrh	r2, [r7, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	78ba      	ldrb	r2, [r7, #2]
 80060a6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	785b      	ldrb	r3, [r3, #1]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d004      	beq.n	80060ba <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80060ba:	78bb      	ldrb	r3, [r7, #2]
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d102      	bne.n	80060c6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d101      	bne.n	80060d4 <HAL_PCD_EP_Open+0xaa>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e00e      	b.n	80060f2 <HAL_PCD_EP_Open+0xc8>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68f9      	ldr	r1, [r7, #12]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f003 f826 	bl	8009134 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80060f0:	7afb      	ldrb	r3, [r7, #11]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b084      	sub	sp, #16
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
 8006102:	460b      	mov	r3, r1
 8006104:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006106:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800610a:	2b00      	cmp	r3, #0
 800610c:	da0f      	bge.n	800612e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800610e:	78fb      	ldrb	r3, [r7, #3]
 8006110:	f003 020f 	and.w	r2, r3, #15
 8006114:	4613      	mov	r3, r2
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	4413      	add	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	3338      	adds	r3, #56	; 0x38
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	4413      	add	r3, r2
 8006122:	3304      	adds	r3, #4
 8006124:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2201      	movs	r2, #1
 800612a:	705a      	strb	r2, [r3, #1]
 800612c:	e00f      	b.n	800614e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800612e:	78fb      	ldrb	r3, [r7, #3]
 8006130:	f003 020f 	and.w	r2, r3, #15
 8006134:	4613      	mov	r3, r2
 8006136:	00db      	lsls	r3, r3, #3
 8006138:	4413      	add	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	4413      	add	r3, r2
 8006144:	3304      	adds	r3, #4
 8006146:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800614e:	78fb      	ldrb	r3, [r7, #3]
 8006150:	f003 030f 	and.w	r3, r3, #15
 8006154:	b2da      	uxtb	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006160:	2b01      	cmp	r3, #1
 8006162:	d101      	bne.n	8006168 <HAL_PCD_EP_Close+0x6e>
 8006164:	2302      	movs	r3, #2
 8006166:	e00e      	b.n	8006186 <HAL_PCD_EP_Close+0x8c>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68f9      	ldr	r1, [r7, #12]
 8006176:	4618      	mov	r0, r3
 8006178:	f003 f864 	bl	8009244 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b086      	sub	sp, #24
 8006192:	af00      	add	r7, sp, #0
 8006194:	60f8      	str	r0, [r7, #12]
 8006196:	607a      	str	r2, [r7, #4]
 8006198:	603b      	str	r3, [r7, #0]
 800619a:	460b      	mov	r3, r1
 800619c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800619e:	7afb      	ldrb	r3, [r7, #11]
 80061a0:	f003 020f 	and.w	r2, r3, #15
 80061a4:	4613      	mov	r3, r2
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	4413      	add	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	4413      	add	r3, r2
 80061b4:	3304      	adds	r3, #4
 80061b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	2200      	movs	r2, #0
 80061c8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2200      	movs	r2, #0
 80061ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061d0:	7afb      	ldrb	r3, [r7, #11]
 80061d2:	f003 030f 	and.w	r3, r3, #15
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d102      	bne.n	80061ea <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80061ea:	7afb      	ldrb	r3, [r7, #11]
 80061ec:	f003 030f 	and.w	r3, r3, #15
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d109      	bne.n	8006208 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6818      	ldr	r0, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	461a      	mov	r2, r3
 8006200:	6979      	ldr	r1, [r7, #20]
 8006202:	f003 fb43 	bl	800988c <USB_EP0StartXfer>
 8006206:	e008      	b.n	800621a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6818      	ldr	r0, [r3, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	b2db      	uxtb	r3, r3
 8006212:	461a      	mov	r2, r3
 8006214:	6979      	ldr	r1, [r7, #20]
 8006216:	f003 f8f1 	bl	80093fc <USB_EPStartXfer>
  }

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3718      	adds	r7, #24
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	460b      	mov	r3, r1
 800622e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006230:	78fb      	ldrb	r3, [r7, #3]
 8006232:	f003 020f 	and.w	r2, r3, #15
 8006236:	6879      	ldr	r1, [r7, #4]
 8006238:	4613      	mov	r3, r2
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	4413      	add	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	440b      	add	r3, r1
 8006242:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006246:	681b      	ldr	r3, [r3, #0]
}
 8006248:	4618      	mov	r0, r3
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	607a      	str	r2, [r7, #4]
 800625e:	603b      	str	r3, [r7, #0]
 8006260:	460b      	mov	r3, r1
 8006262:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006264:	7afb      	ldrb	r3, [r7, #11]
 8006266:	f003 020f 	and.w	r2, r3, #15
 800626a:	4613      	mov	r3, r2
 800626c:	00db      	lsls	r3, r3, #3
 800626e:	4413      	add	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	3338      	adds	r3, #56	; 0x38
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	4413      	add	r3, r2
 8006278:	3304      	adds	r3, #4
 800627a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	2200      	movs	r2, #0
 800628c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2201      	movs	r2, #1
 8006292:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006294:	7afb      	ldrb	r3, [r7, #11]
 8006296:	f003 030f 	and.w	r3, r3, #15
 800629a:	b2da      	uxtb	r2, r3
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d102      	bne.n	80062ae <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80062ae:	7afb      	ldrb	r3, [r7, #11]
 80062b0:	f003 030f 	and.w	r3, r3, #15
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d109      	bne.n	80062cc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6818      	ldr	r0, [r3, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	461a      	mov	r2, r3
 80062c4:	6979      	ldr	r1, [r7, #20]
 80062c6:	f003 fae1 	bl	800988c <USB_EP0StartXfer>
 80062ca:	e008      	b.n	80062de <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6818      	ldr	r0, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	461a      	mov	r2, r3
 80062d8:	6979      	ldr	r1, [r7, #20]
 80062da:	f003 f88f 	bl	80093fc <USB_EPStartXfer>
  }

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3718      	adds	r7, #24
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	460b      	mov	r3, r1
 80062f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80062f4:	78fb      	ldrb	r3, [r7, #3]
 80062f6:	f003 020f 	and.w	r2, r3, #15
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d901      	bls.n	8006306 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e050      	b.n	80063a8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006306:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800630a:	2b00      	cmp	r3, #0
 800630c:	da0f      	bge.n	800632e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800630e:	78fb      	ldrb	r3, [r7, #3]
 8006310:	f003 020f 	and.w	r2, r3, #15
 8006314:	4613      	mov	r3, r2
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	4413      	add	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	3338      	adds	r3, #56	; 0x38
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	4413      	add	r3, r2
 8006322:	3304      	adds	r3, #4
 8006324:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2201      	movs	r2, #1
 800632a:	705a      	strb	r2, [r3, #1]
 800632c:	e00d      	b.n	800634a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800632e:	78fa      	ldrb	r2, [r7, #3]
 8006330:	4613      	mov	r3, r2
 8006332:	00db      	lsls	r3, r3, #3
 8006334:	4413      	add	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	4413      	add	r3, r2
 8006340:	3304      	adds	r3, #4
 8006342:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2201      	movs	r2, #1
 800634e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006350:	78fb      	ldrb	r3, [r7, #3]
 8006352:	f003 030f 	and.w	r3, r3, #15
 8006356:	b2da      	uxtb	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006362:	2b01      	cmp	r3, #1
 8006364:	d101      	bne.n	800636a <HAL_PCD_EP_SetStall+0x82>
 8006366:	2302      	movs	r3, #2
 8006368:	e01e      	b.n	80063a8 <HAL_PCD_EP_SetStall+0xc0>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68f9      	ldr	r1, [r7, #12]
 8006378:	4618      	mov	r0, r3
 800637a:	f003 fd1f 	bl	8009dbc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800637e:	78fb      	ldrb	r3, [r7, #3]
 8006380:	f003 030f 	and.w	r3, r3, #15
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10a      	bne.n	800639e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6818      	ldr	r0, [r3, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	b2d9      	uxtb	r1, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006398:	461a      	mov	r2, r3
 800639a:	f003 ff0f 	bl	800a1bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	460b      	mov	r3, r1
 80063ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80063bc:	78fb      	ldrb	r3, [r7, #3]
 80063be:	f003 020f 	and.w	r2, r3, #15
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d901      	bls.n	80063ce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e042      	b.n	8006454 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80063ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	da0f      	bge.n	80063f6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063d6:	78fb      	ldrb	r3, [r7, #3]
 80063d8:	f003 020f 	and.w	r2, r3, #15
 80063dc:	4613      	mov	r3, r2
 80063de:	00db      	lsls	r3, r3, #3
 80063e0:	4413      	add	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	3338      	adds	r3, #56	; 0x38
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	4413      	add	r3, r2
 80063ea:	3304      	adds	r3, #4
 80063ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2201      	movs	r2, #1
 80063f2:	705a      	strb	r2, [r3, #1]
 80063f4:	e00f      	b.n	8006416 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063f6:	78fb      	ldrb	r3, [r7, #3]
 80063f8:	f003 020f 	and.w	r2, r3, #15
 80063fc:	4613      	mov	r3, r2
 80063fe:	00db      	lsls	r3, r3, #3
 8006400:	4413      	add	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	4413      	add	r3, r2
 800640c:	3304      	adds	r3, #4
 800640e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800641c:	78fb      	ldrb	r3, [r7, #3]
 800641e:	f003 030f 	and.w	r3, r3, #15
 8006422:	b2da      	uxtb	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800642e:	2b01      	cmp	r3, #1
 8006430:	d101      	bne.n	8006436 <HAL_PCD_EP_ClrStall+0x86>
 8006432:	2302      	movs	r3, #2
 8006434:	e00e      	b.n	8006454 <HAL_PCD_EP_ClrStall+0xa4>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68f9      	ldr	r1, [r7, #12]
 8006444:	4618      	mov	r0, r3
 8006446:	f003 fd27 	bl	8009e98 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	460b      	mov	r3, r1
 8006466:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006468:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800646c:	2b00      	cmp	r3, #0
 800646e:	da0c      	bge.n	800648a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006470:	78fb      	ldrb	r3, [r7, #3]
 8006472:	f003 020f 	and.w	r2, r3, #15
 8006476:	4613      	mov	r3, r2
 8006478:	00db      	lsls	r3, r3, #3
 800647a:	4413      	add	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	3338      	adds	r3, #56	; 0x38
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	4413      	add	r3, r2
 8006484:	3304      	adds	r3, #4
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	e00c      	b.n	80064a4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800648a:	78fb      	ldrb	r3, [r7, #3]
 800648c:	f003 020f 	and.w	r2, r3, #15
 8006490:	4613      	mov	r3, r2
 8006492:	00db      	lsls	r3, r3, #3
 8006494:	4413      	add	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	4413      	add	r3, r2
 80064a0:	3304      	adds	r3, #4
 80064a2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68f9      	ldr	r1, [r7, #12]
 80064aa:	4618      	mov	r0, r3
 80064ac:	f003 fb46 	bl	8009b3c <USB_EPStopXfer>
 80064b0:	4603      	mov	r3, r0
 80064b2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80064b4:	7afb      	ldrb	r3, [r7, #11]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b08a      	sub	sp, #40	; 0x28
 80064c2:	af02      	add	r7, sp, #8
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	4613      	mov	r3, r2
 80064d6:	00db      	lsls	r3, r3, #3
 80064d8:	4413      	add	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	3338      	adds	r3, #56	; 0x38
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	4413      	add	r3, r2
 80064e2:	3304      	adds	r3, #4
 80064e4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6a1a      	ldr	r2, [r3, #32]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d901      	bls.n	80064f6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e06c      	b.n	80065d0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	699a      	ldr	r2, [r3, #24]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	69fa      	ldr	r2, [r7, #28]
 8006508:	429a      	cmp	r2, r3
 800650a:	d902      	bls.n	8006512 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	3303      	adds	r3, #3
 8006516:	089b      	lsrs	r3, r3, #2
 8006518:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800651a:	e02b      	b.n	8006574 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	699a      	ldr	r2, [r3, #24]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	69fa      	ldr	r2, [r7, #28]
 800652e:	429a      	cmp	r2, r3
 8006530:	d902      	bls.n	8006538 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	3303      	adds	r3, #3
 800653c:	089b      	lsrs	r3, r3, #2
 800653e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6919      	ldr	r1, [r3, #16]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	b2da      	uxtb	r2, r3
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006550:	b2db      	uxtb	r3, r3
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	4603      	mov	r3, r0
 8006556:	6978      	ldr	r0, [r7, #20]
 8006558:	f003 fb9a 	bl	8009c90 <USB_WritePacket>

    ep->xfer_buff  += len;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	691a      	ldr	r2, [r3, #16]
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	441a      	add	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6a1a      	ldr	r2, [r3, #32]
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	441a      	add	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	429a      	cmp	r2, r3
 8006588:	d809      	bhi.n	800659e <PCD_WriteEmptyTxFifo+0xe0>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6a1a      	ldr	r2, [r3, #32]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006592:	429a      	cmp	r2, r3
 8006594:	d203      	bcs.n	800659e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1be      	bne.n	800651c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	699a      	ldr	r2, [r3, #24]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d811      	bhi.n	80065ce <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	f003 030f 	and.w	r3, r3, #15
 80065b0:	2201      	movs	r2, #1
 80065b2:	fa02 f303 	lsl.w	r3, r2, r3
 80065b6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	43db      	mvns	r3, r3
 80065c4:	6939      	ldr	r1, [r7, #16]
 80065c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065ca:	4013      	ands	r3, r2
 80065cc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3720      	adds	r7, #32
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b088      	sub	sp, #32
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	333c      	adds	r3, #60	; 0x3c
 80065f0:	3304      	adds	r3, #4
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	2b01      	cmp	r3, #1
 800660c:	d17b      	bne.n	8006706 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	f003 0308 	and.w	r3, r3, #8
 8006614:	2b00      	cmp	r3, #0
 8006616:	d015      	beq.n	8006644 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	4a61      	ldr	r2, [pc, #388]	; (80067a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800661c:	4293      	cmp	r3, r2
 800661e:	f240 80b9 	bls.w	8006794 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 80b3 	beq.w	8006794 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	015a      	lsls	r2, r3, #5
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	4413      	add	r3, r2
 8006636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800663a:	461a      	mov	r2, r3
 800663c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006640:	6093      	str	r3, [r2, #8]
 8006642:	e0a7      	b.n	8006794 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	f003 0320 	and.w	r3, r3, #32
 800664a:	2b00      	cmp	r3, #0
 800664c:	d009      	beq.n	8006662 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	4413      	add	r3, r2
 8006656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665a:	461a      	mov	r2, r3
 800665c:	2320      	movs	r3, #32
 800665e:	6093      	str	r3, [r2, #8]
 8006660:	e098      	b.n	8006794 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006668:	2b00      	cmp	r3, #0
 800666a:	f040 8093 	bne.w	8006794 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	4a4b      	ldr	r2, [pc, #300]	; (80067a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d90f      	bls.n	8006696 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00a      	beq.n	8006696 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	4413      	add	r3, r2
 8006688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800668c:	461a      	mov	r2, r3
 800668e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006692:	6093      	str	r3, [r2, #8]
 8006694:	e07e      	b.n	8006794 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006696:	683a      	ldr	r2, [r7, #0]
 8006698:	4613      	mov	r3, r2
 800669a:	00db      	lsls	r3, r3, #3
 800669c:	4413      	add	r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	4413      	add	r3, r2
 80066a8:	3304      	adds	r3, #4
 80066aa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	69da      	ldr	r2, [r3, #28]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	0159      	lsls	r1, r3, #5
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	440b      	add	r3, r1
 80066b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066c2:	1ad2      	subs	r2, r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d114      	bne.n	80066f8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d109      	bne.n	80066ea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6818      	ldr	r0, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80066e0:	461a      	mov	r2, r3
 80066e2:	2101      	movs	r1, #1
 80066e4:	f003 fd6a 	bl	800a1bc <USB_EP0_OutStart>
 80066e8:	e006      	b.n	80066f8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	691a      	ldr	r2, [r3, #16]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	441a      	add	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	4619      	mov	r1, r3
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f007 ff60 	bl	800e5c4 <HAL_PCD_DataOutStageCallback>
 8006704:	e046      	b.n	8006794 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	4a26      	ldr	r2, [pc, #152]	; (80067a4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d124      	bne.n	8006758 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00a      	beq.n	800672e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006724:	461a      	mov	r2, r3
 8006726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800672a:	6093      	str	r3, [r2, #8]
 800672c:	e032      	b.n	8006794 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f003 0320 	and.w	r3, r3, #32
 8006734:	2b00      	cmp	r3, #0
 8006736:	d008      	beq.n	800674a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	4413      	add	r3, r2
 8006740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006744:	461a      	mov	r2, r3
 8006746:	2320      	movs	r3, #32
 8006748:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	b2db      	uxtb	r3, r3
 800674e:	4619      	mov	r1, r3
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f007 ff37 	bl	800e5c4 <HAL_PCD_DataOutStageCallback>
 8006756:	e01d      	b.n	8006794 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d114      	bne.n	8006788 <PCD_EP_OutXfrComplete_int+0x1b0>
 800675e:	6879      	ldr	r1, [r7, #4]
 8006760:	683a      	ldr	r2, [r7, #0]
 8006762:	4613      	mov	r3, r2
 8006764:	00db      	lsls	r3, r3, #3
 8006766:	4413      	add	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	440b      	add	r3, r1
 800676c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d108      	bne.n	8006788 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6818      	ldr	r0, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006780:	461a      	mov	r2, r3
 8006782:	2100      	movs	r1, #0
 8006784:	f003 fd1a 	bl	800a1bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	b2db      	uxtb	r3, r3
 800678c:	4619      	mov	r1, r3
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f007 ff18 	bl	800e5c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3720      	adds	r7, #32
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	4f54300a 	.word	0x4f54300a
 80067a4:	4f54310a 	.word	0x4f54310a

080067a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	333c      	adds	r3, #60	; 0x3c
 80067c0:	3304      	adds	r3, #4
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	4a15      	ldr	r2, [pc, #84]	; (8006830 <PCD_EP_OutSetupPacket_int+0x88>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d90e      	bls.n	80067fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d009      	beq.n	80067fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f4:	461a      	mov	r2, r3
 80067f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f007 fecf 	bl	800e5a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	4a0a      	ldr	r2, [pc, #40]	; (8006830 <PCD_EP_OutSetupPacket_int+0x88>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d90c      	bls.n	8006824 <PCD_EP_OutSetupPacket_int+0x7c>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d108      	bne.n	8006824 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6818      	ldr	r0, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800681c:	461a      	mov	r2, r3
 800681e:	2101      	movs	r1, #1
 8006820:	f003 fccc 	bl	800a1bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3718      	adds	r7, #24
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	4f54300a 	.word	0x4f54300a

08006834 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	70fb      	strb	r3, [r7, #3]
 8006840:	4613      	mov	r3, r2
 8006842:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800684c:	78fb      	ldrb	r3, [r7, #3]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d107      	bne.n	8006862 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006852:	883b      	ldrh	r3, [r7, #0]
 8006854:	0419      	lsls	r1, r3, #16
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	430a      	orrs	r2, r1
 800685e:	629a      	str	r2, [r3, #40]	; 0x28
 8006860:	e028      	b.n	80068b4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006868:	0c1b      	lsrs	r3, r3, #16
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	4413      	add	r3, r2
 800686e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006870:	2300      	movs	r3, #0
 8006872:	73fb      	strb	r3, [r7, #15]
 8006874:	e00d      	b.n	8006892 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	7bfb      	ldrb	r3, [r7, #15]
 800687c:	3340      	adds	r3, #64	; 0x40
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	0c1b      	lsrs	r3, r3, #16
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	4413      	add	r3, r2
 800688a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800688c:	7bfb      	ldrb	r3, [r7, #15]
 800688e:	3301      	adds	r3, #1
 8006890:	73fb      	strb	r3, [r7, #15]
 8006892:	7bfa      	ldrb	r2, [r7, #15]
 8006894:	78fb      	ldrb	r3, [r7, #3]
 8006896:	3b01      	subs	r3, #1
 8006898:	429a      	cmp	r2, r3
 800689a:	d3ec      	bcc.n	8006876 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800689c:	883b      	ldrh	r3, [r7, #0]
 800689e:	0418      	lsls	r0, r3, #16
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6819      	ldr	r1, [r3, #0]
 80068a4:	78fb      	ldrb	r3, [r7, #3]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	4302      	orrs	r2, r0
 80068ac:	3340      	adds	r3, #64	; 0x40
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	440b      	add	r3, r1
 80068b2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3714      	adds	r7, #20
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b083      	sub	sp, #12
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	460b      	mov	r3, r1
 80068cc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	887a      	ldrh	r2, [r7, #2]
 80068d4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	460b      	mov	r3, r1
 80068ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e267      	b.n	8006dde <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d075      	beq.n	8006a06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800691a:	4b88      	ldr	r3, [pc, #544]	; (8006b3c <HAL_RCC_OscConfig+0x240>)
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f003 030c 	and.w	r3, r3, #12
 8006922:	2b04      	cmp	r3, #4
 8006924:	d00c      	beq.n	8006940 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006926:	4b85      	ldr	r3, [pc, #532]	; (8006b3c <HAL_RCC_OscConfig+0x240>)
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800692e:	2b08      	cmp	r3, #8
 8006930:	d112      	bne.n	8006958 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006932:	4b82      	ldr	r3, [pc, #520]	; (8006b3c <HAL_RCC_OscConfig+0x240>)
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800693a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800693e:	d10b      	bne.n	8006958 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006940:	4b7e      	ldr	r3, [pc, #504]	; (8006b3c <HAL_RCC_OscConfig+0x240>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d05b      	beq.n	8006a04 <HAL_RCC_OscConfig+0x108>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d157      	bne.n	8006a04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e242      	b.n	8006dde <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006960:	d106      	bne.n	8006970 <HAL_RCC_OscConfig+0x74>
 8006962:	4b76      	ldr	r3, [pc, #472]	; (8006b3c <HAL_RCC_OscConfig+0x240>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a75      	ldr	r2, [pc, #468]	; (8006b3c <HAL_RCC_OscConfig+0x240>)
 8006968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800696c:	6013      	str	r3, [r2, #0]
 800696e:	e01d      	b.n	80069ac <HAL_RCC_OscConfig+0xb0>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006978:	d10c      	bne.n	8006994 <HAL_RCC_OscConfig+0x98>
 800697a:	4b70      	ldr	r3, [pc, #448]	; (8006b3c <HAL_RCC_OscConfig+0x240>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a6f      	ldr	r2, [pc, #444]	; (8006b3c <HAL_RCC_OscConfig+0x240>)
 8006980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006984:	6013      	str	r3, [r2, #0]
 8006986:	4b6d      	ldr	r3, [pc, #436]	; (8006b3c <HAL_RCC_OscConfig+0x240>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a6c      	ldr	r2, [pc, #432]	; (8006b3c <HAL_RCC_OscConfig+0x240>)
 800698c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006990:	6013      	str	r3, [r2, #0]
 8006992:	e00b      	b.n	80069ac <HAL_RCC_OscConfig+0xb0>
 8006994:	4b69      	ldr	r3, [pc, #420]	; (8006b3c <HAL_RCC_OscConfig+0x240>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a68      	ldr	r2, [pc, #416]	; (8006b3c <HAL_RCC_OscConfig+0x240>)
 800699a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800699e:	6013      	str	r3, [r2, #0]
 80069a0:	4b66      	ldr	r3, [pc, #408]	; (8006b3c <HAL_RCC_OscConfig+0x240>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a65      	ldr	r2, [pc, #404]	; (8006b3c <HAL_RCC_OscConfig+0x240>)
 80069a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d013      	beq.n	80069dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069b4:	f7fd f83e 	bl	8003a34 <HAL_GetTick>
 80069b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ba:	e008      	b.n	80069ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069bc:	f7fd f83a 	bl	8003a34 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	2b64      	cmp	r3, #100	; 0x64
 80069c8:	d901      	bls.n	80069ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e207      	b.n	8006dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ce:	4b5b      	ldr	r3, [pc, #364]	; (8006b3c <HAL_RCC_OscConfig+0x240>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d0f0      	beq.n	80069bc <HAL_RCC_OscConfig+0xc0>
 80069da:	e014      	b.n	8006a06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069dc:	f7fd f82a 	bl	8003a34 <HAL_GetTick>
 80069e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069e2:	e008      	b.n	80069f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069e4:	f7fd f826 	bl	8003a34 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b64      	cmp	r3, #100	; 0x64
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e1f3      	b.n	8006dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069f6:	4b51      	ldr	r3, [pc, #324]	; (8006b3c <HAL_RCC_OscConfig+0x240>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1f0      	bne.n	80069e4 <HAL_RCC_OscConfig+0xe8>
 8006a02:	e000      	b.n	8006a06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0302 	and.w	r3, r3, #2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d063      	beq.n	8006ada <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a12:	4b4a      	ldr	r3, [pc, #296]	; (8006b3c <HAL_RCC_OscConfig+0x240>)
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f003 030c 	and.w	r3, r3, #12
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00b      	beq.n	8006a36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a1e:	4b47      	ldr	r3, [pc, #284]	; (8006b3c <HAL_RCC_OscConfig+0x240>)
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a26:	2b08      	cmp	r3, #8
 8006a28:	d11c      	bne.n	8006a64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a2a:	4b44      	ldr	r3, [pc, #272]	; (8006b3c <HAL_RCC_OscConfig+0x240>)
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d116      	bne.n	8006a64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a36:	4b41      	ldr	r3, [pc, #260]	; (8006b3c <HAL_RCC_OscConfig+0x240>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d005      	beq.n	8006a4e <HAL_RCC_OscConfig+0x152>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d001      	beq.n	8006a4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e1c7      	b.n	8006dde <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a4e:	4b3b      	ldr	r3, [pc, #236]	; (8006b3c <HAL_RCC_OscConfig+0x240>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	00db      	lsls	r3, r3, #3
 8006a5c:	4937      	ldr	r1, [pc, #220]	; (8006b3c <HAL_RCC_OscConfig+0x240>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a62:	e03a      	b.n	8006ada <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d020      	beq.n	8006aae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a6c:	4b34      	ldr	r3, [pc, #208]	; (8006b40 <HAL_RCC_OscConfig+0x244>)
 8006a6e:	2201      	movs	r2, #1
 8006a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a72:	f7fc ffdf 	bl	8003a34 <HAL_GetTick>
 8006a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a78:	e008      	b.n	8006a8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a7a:	f7fc ffdb 	bl	8003a34 <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d901      	bls.n	8006a8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e1a8      	b.n	8006dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a8c:	4b2b      	ldr	r3, [pc, #172]	; (8006b3c <HAL_RCC_OscConfig+0x240>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0302 	and.w	r3, r3, #2
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d0f0      	beq.n	8006a7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a98:	4b28      	ldr	r3, [pc, #160]	; (8006b3c <HAL_RCC_OscConfig+0x240>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	00db      	lsls	r3, r3, #3
 8006aa6:	4925      	ldr	r1, [pc, #148]	; (8006b3c <HAL_RCC_OscConfig+0x240>)
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	600b      	str	r3, [r1, #0]
 8006aac:	e015      	b.n	8006ada <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006aae:	4b24      	ldr	r3, [pc, #144]	; (8006b40 <HAL_RCC_OscConfig+0x244>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab4:	f7fc ffbe 	bl	8003a34 <HAL_GetTick>
 8006ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006aba:	e008      	b.n	8006ace <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006abc:	f7fc ffba 	bl	8003a34 <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d901      	bls.n	8006ace <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e187      	b.n	8006dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ace:	4b1b      	ldr	r3, [pc, #108]	; (8006b3c <HAL_RCC_OscConfig+0x240>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1f0      	bne.n	8006abc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0308 	and.w	r3, r3, #8
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d036      	beq.n	8006b54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d016      	beq.n	8006b1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006aee:	4b15      	ldr	r3, [pc, #84]	; (8006b44 <HAL_RCC_OscConfig+0x248>)
 8006af0:	2201      	movs	r2, #1
 8006af2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006af4:	f7fc ff9e 	bl	8003a34 <HAL_GetTick>
 8006af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006afa:	e008      	b.n	8006b0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006afc:	f7fc ff9a 	bl	8003a34 <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d901      	bls.n	8006b0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e167      	b.n	8006dde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b0e:	4b0b      	ldr	r3, [pc, #44]	; (8006b3c <HAL_RCC_OscConfig+0x240>)
 8006b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b12:	f003 0302 	and.w	r3, r3, #2
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d0f0      	beq.n	8006afc <HAL_RCC_OscConfig+0x200>
 8006b1a:	e01b      	b.n	8006b54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b1c:	4b09      	ldr	r3, [pc, #36]	; (8006b44 <HAL_RCC_OscConfig+0x248>)
 8006b1e:	2200      	movs	r2, #0
 8006b20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b22:	f7fc ff87 	bl	8003a34 <HAL_GetTick>
 8006b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b28:	e00e      	b.n	8006b48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b2a:	f7fc ff83 	bl	8003a34 <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d907      	bls.n	8006b48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e150      	b.n	8006dde <HAL_RCC_OscConfig+0x4e2>
 8006b3c:	40023800 	.word	0x40023800
 8006b40:	42470000 	.word	0x42470000
 8006b44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b48:	4b88      	ldr	r3, [pc, #544]	; (8006d6c <HAL_RCC_OscConfig+0x470>)
 8006b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b4c:	f003 0302 	and.w	r3, r3, #2
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1ea      	bne.n	8006b2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0304 	and.w	r3, r3, #4
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 8097 	beq.w	8006c90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b62:	2300      	movs	r3, #0
 8006b64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b66:	4b81      	ldr	r3, [pc, #516]	; (8006d6c <HAL_RCC_OscConfig+0x470>)
 8006b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10f      	bne.n	8006b92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b72:	2300      	movs	r3, #0
 8006b74:	60bb      	str	r3, [r7, #8]
 8006b76:	4b7d      	ldr	r3, [pc, #500]	; (8006d6c <HAL_RCC_OscConfig+0x470>)
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	4a7c      	ldr	r2, [pc, #496]	; (8006d6c <HAL_RCC_OscConfig+0x470>)
 8006b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b80:	6413      	str	r3, [r2, #64]	; 0x40
 8006b82:	4b7a      	ldr	r3, [pc, #488]	; (8006d6c <HAL_RCC_OscConfig+0x470>)
 8006b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b8a:	60bb      	str	r3, [r7, #8]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b92:	4b77      	ldr	r3, [pc, #476]	; (8006d70 <HAL_RCC_OscConfig+0x474>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d118      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b9e:	4b74      	ldr	r3, [pc, #464]	; (8006d70 <HAL_RCC_OscConfig+0x474>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a73      	ldr	r2, [pc, #460]	; (8006d70 <HAL_RCC_OscConfig+0x474>)
 8006ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006baa:	f7fc ff43 	bl	8003a34 <HAL_GetTick>
 8006bae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bb0:	e008      	b.n	8006bc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bb2:	f7fc ff3f 	bl	8003a34 <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d901      	bls.n	8006bc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e10c      	b.n	8006dde <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bc4:	4b6a      	ldr	r3, [pc, #424]	; (8006d70 <HAL_RCC_OscConfig+0x474>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d0f0      	beq.n	8006bb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d106      	bne.n	8006be6 <HAL_RCC_OscConfig+0x2ea>
 8006bd8:	4b64      	ldr	r3, [pc, #400]	; (8006d6c <HAL_RCC_OscConfig+0x470>)
 8006bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bdc:	4a63      	ldr	r2, [pc, #396]	; (8006d6c <HAL_RCC_OscConfig+0x470>)
 8006bde:	f043 0301 	orr.w	r3, r3, #1
 8006be2:	6713      	str	r3, [r2, #112]	; 0x70
 8006be4:	e01c      	b.n	8006c20 <HAL_RCC_OscConfig+0x324>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	2b05      	cmp	r3, #5
 8006bec:	d10c      	bne.n	8006c08 <HAL_RCC_OscConfig+0x30c>
 8006bee:	4b5f      	ldr	r3, [pc, #380]	; (8006d6c <HAL_RCC_OscConfig+0x470>)
 8006bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf2:	4a5e      	ldr	r2, [pc, #376]	; (8006d6c <HAL_RCC_OscConfig+0x470>)
 8006bf4:	f043 0304 	orr.w	r3, r3, #4
 8006bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8006bfa:	4b5c      	ldr	r3, [pc, #368]	; (8006d6c <HAL_RCC_OscConfig+0x470>)
 8006bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bfe:	4a5b      	ldr	r2, [pc, #364]	; (8006d6c <HAL_RCC_OscConfig+0x470>)
 8006c00:	f043 0301 	orr.w	r3, r3, #1
 8006c04:	6713      	str	r3, [r2, #112]	; 0x70
 8006c06:	e00b      	b.n	8006c20 <HAL_RCC_OscConfig+0x324>
 8006c08:	4b58      	ldr	r3, [pc, #352]	; (8006d6c <HAL_RCC_OscConfig+0x470>)
 8006c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c0c:	4a57      	ldr	r2, [pc, #348]	; (8006d6c <HAL_RCC_OscConfig+0x470>)
 8006c0e:	f023 0301 	bic.w	r3, r3, #1
 8006c12:	6713      	str	r3, [r2, #112]	; 0x70
 8006c14:	4b55      	ldr	r3, [pc, #340]	; (8006d6c <HAL_RCC_OscConfig+0x470>)
 8006c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c18:	4a54      	ldr	r2, [pc, #336]	; (8006d6c <HAL_RCC_OscConfig+0x470>)
 8006c1a:	f023 0304 	bic.w	r3, r3, #4
 8006c1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d015      	beq.n	8006c54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c28:	f7fc ff04 	bl	8003a34 <HAL_GetTick>
 8006c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c2e:	e00a      	b.n	8006c46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c30:	f7fc ff00 	bl	8003a34 <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d901      	bls.n	8006c46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e0cb      	b.n	8006dde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c46:	4b49      	ldr	r3, [pc, #292]	; (8006d6c <HAL_RCC_OscConfig+0x470>)
 8006c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d0ee      	beq.n	8006c30 <HAL_RCC_OscConfig+0x334>
 8006c52:	e014      	b.n	8006c7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c54:	f7fc feee 	bl	8003a34 <HAL_GetTick>
 8006c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c5a:	e00a      	b.n	8006c72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c5c:	f7fc feea 	bl	8003a34 <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d901      	bls.n	8006c72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e0b5      	b.n	8006dde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c72:	4b3e      	ldr	r3, [pc, #248]	; (8006d6c <HAL_RCC_OscConfig+0x470>)
 8006c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c76:	f003 0302 	and.w	r3, r3, #2
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1ee      	bne.n	8006c5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c7e:	7dfb      	ldrb	r3, [r7, #23]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d105      	bne.n	8006c90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c84:	4b39      	ldr	r3, [pc, #228]	; (8006d6c <HAL_RCC_OscConfig+0x470>)
 8006c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c88:	4a38      	ldr	r2, [pc, #224]	; (8006d6c <HAL_RCC_OscConfig+0x470>)
 8006c8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 80a1 	beq.w	8006ddc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c9a:	4b34      	ldr	r3, [pc, #208]	; (8006d6c <HAL_RCC_OscConfig+0x470>)
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f003 030c 	and.w	r3, r3, #12
 8006ca2:	2b08      	cmp	r3, #8
 8006ca4:	d05c      	beq.n	8006d60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d141      	bne.n	8006d32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cae:	4b31      	ldr	r3, [pc, #196]	; (8006d74 <HAL_RCC_OscConfig+0x478>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cb4:	f7fc febe 	bl	8003a34 <HAL_GetTick>
 8006cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cba:	e008      	b.n	8006cce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cbc:	f7fc feba 	bl	8003a34 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d901      	bls.n	8006cce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e087      	b.n	8006dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cce:	4b27      	ldr	r3, [pc, #156]	; (8006d6c <HAL_RCC_OscConfig+0x470>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1f0      	bne.n	8006cbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	69da      	ldr	r2, [r3, #28]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	431a      	orrs	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce8:	019b      	lsls	r3, r3, #6
 8006cea:	431a      	orrs	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf0:	085b      	lsrs	r3, r3, #1
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	041b      	lsls	r3, r3, #16
 8006cf6:	431a      	orrs	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfc:	061b      	lsls	r3, r3, #24
 8006cfe:	491b      	ldr	r1, [pc, #108]	; (8006d6c <HAL_RCC_OscConfig+0x470>)
 8006d00:	4313      	orrs	r3, r2
 8006d02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d04:	4b1b      	ldr	r3, [pc, #108]	; (8006d74 <HAL_RCC_OscConfig+0x478>)
 8006d06:	2201      	movs	r2, #1
 8006d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d0a:	f7fc fe93 	bl	8003a34 <HAL_GetTick>
 8006d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d10:	e008      	b.n	8006d24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d12:	f7fc fe8f 	bl	8003a34 <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d901      	bls.n	8006d24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e05c      	b.n	8006dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d24:	4b11      	ldr	r3, [pc, #68]	; (8006d6c <HAL_RCC_OscConfig+0x470>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d0f0      	beq.n	8006d12 <HAL_RCC_OscConfig+0x416>
 8006d30:	e054      	b.n	8006ddc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d32:	4b10      	ldr	r3, [pc, #64]	; (8006d74 <HAL_RCC_OscConfig+0x478>)
 8006d34:	2200      	movs	r2, #0
 8006d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d38:	f7fc fe7c 	bl	8003a34 <HAL_GetTick>
 8006d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d3e:	e008      	b.n	8006d52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d40:	f7fc fe78 	bl	8003a34 <HAL_GetTick>
 8006d44:	4602      	mov	r2, r0
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d901      	bls.n	8006d52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e045      	b.n	8006dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d52:	4b06      	ldr	r3, [pc, #24]	; (8006d6c <HAL_RCC_OscConfig+0x470>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1f0      	bne.n	8006d40 <HAL_RCC_OscConfig+0x444>
 8006d5e:	e03d      	b.n	8006ddc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d107      	bne.n	8006d78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e038      	b.n	8006dde <HAL_RCC_OscConfig+0x4e2>
 8006d6c:	40023800 	.word	0x40023800
 8006d70:	40007000 	.word	0x40007000
 8006d74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d78:	4b1b      	ldr	r3, [pc, #108]	; (8006de8 <HAL_RCC_OscConfig+0x4ec>)
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d028      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d121      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d11a      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006da8:	4013      	ands	r3, r2
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006dae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d111      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dbe:	085b      	lsrs	r3, r3, #1
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d107      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d001      	beq.n	8006ddc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e000      	b.n	8006dde <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3718      	adds	r7, #24
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	40023800 	.word	0x40023800

08006dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d101      	bne.n	8006e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e0cc      	b.n	8006f9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e00:	4b68      	ldr	r3, [pc, #416]	; (8006fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 030f 	and.w	r3, r3, #15
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d90c      	bls.n	8006e28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e0e:	4b65      	ldr	r3, [pc, #404]	; (8006fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8006e10:	683a      	ldr	r2, [r7, #0]
 8006e12:	b2d2      	uxtb	r2, r2
 8006e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e16:	4b63      	ldr	r3, [pc, #396]	; (8006fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 030f 	and.w	r3, r3, #15
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d001      	beq.n	8006e28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e0b8      	b.n	8006f9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0302 	and.w	r3, r3, #2
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d020      	beq.n	8006e76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0304 	and.w	r3, r3, #4
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d005      	beq.n	8006e4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e40:	4b59      	ldr	r3, [pc, #356]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	4a58      	ldr	r2, [pc, #352]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0308 	and.w	r3, r3, #8
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d005      	beq.n	8006e64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e58:	4b53      	ldr	r3, [pc, #332]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	4a52      	ldr	r2, [pc, #328]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e64:	4b50      	ldr	r3, [pc, #320]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	494d      	ldr	r1, [pc, #308]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d044      	beq.n	8006f0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d107      	bne.n	8006e9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e8a:	4b47      	ldr	r3, [pc, #284]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d119      	bne.n	8006eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e07f      	b.n	8006f9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d003      	beq.n	8006eaa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ea6:	2b03      	cmp	r3, #3
 8006ea8:	d107      	bne.n	8006eba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eaa:	4b3f      	ldr	r3, [pc, #252]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d109      	bne.n	8006eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e06f      	b.n	8006f9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eba:	4b3b      	ldr	r3, [pc, #236]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0302 	and.w	r3, r3, #2
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e067      	b.n	8006f9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006eca:	4b37      	ldr	r3, [pc, #220]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f023 0203 	bic.w	r2, r3, #3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	4934      	ldr	r1, [pc, #208]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006edc:	f7fc fdaa 	bl	8003a34 <HAL_GetTick>
 8006ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ee2:	e00a      	b.n	8006efa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ee4:	f7fc fda6 	bl	8003a34 <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d901      	bls.n	8006efa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e04f      	b.n	8006f9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006efa:	4b2b      	ldr	r3, [pc, #172]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f003 020c 	and.w	r2, r3, #12
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d1eb      	bne.n	8006ee4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f0c:	4b25      	ldr	r3, [pc, #148]	; (8006fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 030f 	and.w	r3, r3, #15
 8006f14:	683a      	ldr	r2, [r7, #0]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d20c      	bcs.n	8006f34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f1a:	4b22      	ldr	r3, [pc, #136]	; (8006fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8006f1c:	683a      	ldr	r2, [r7, #0]
 8006f1e:	b2d2      	uxtb	r2, r2
 8006f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f22:	4b20      	ldr	r3, [pc, #128]	; (8006fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 030f 	and.w	r3, r3, #15
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d001      	beq.n	8006f34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e032      	b.n	8006f9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0304 	and.w	r3, r3, #4
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d008      	beq.n	8006f52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f40:	4b19      	ldr	r3, [pc, #100]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	4916      	ldr	r1, [pc, #88]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0308 	and.w	r3, r3, #8
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d009      	beq.n	8006f72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f5e:	4b12      	ldr	r3, [pc, #72]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	00db      	lsls	r3, r3, #3
 8006f6c:	490e      	ldr	r1, [pc, #56]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f72:	f000 f821 	bl	8006fb8 <HAL_RCC_GetSysClockFreq>
 8006f76:	4602      	mov	r2, r0
 8006f78:	4b0b      	ldr	r3, [pc, #44]	; (8006fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	091b      	lsrs	r3, r3, #4
 8006f7e:	f003 030f 	and.w	r3, r3, #15
 8006f82:	490a      	ldr	r1, [pc, #40]	; (8006fac <HAL_RCC_ClockConfig+0x1c0>)
 8006f84:	5ccb      	ldrb	r3, [r1, r3]
 8006f86:	fa22 f303 	lsr.w	r3, r2, r3
 8006f8a:	4a09      	ldr	r2, [pc, #36]	; (8006fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006f8e:	4b09      	ldr	r3, [pc, #36]	; (8006fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fb f862 	bl	800205c <HAL_InitTick>

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	40023c00 	.word	0x40023c00
 8006fa8:	40023800 	.word	0x40023800
 8006fac:	0800fe60 	.word	0x0800fe60
 8006fb0:	20000000 	.word	0x20000000
 8006fb4:	2000004c 	.word	0x2000004c

08006fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fbc:	b094      	sub	sp, #80	; 0x50
 8006fbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	647b      	str	r3, [r7, #68]	; 0x44
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fc8:	2300      	movs	r3, #0
 8006fca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fd0:	4b79      	ldr	r3, [pc, #484]	; (80071b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f003 030c 	and.w	r3, r3, #12
 8006fd8:	2b08      	cmp	r3, #8
 8006fda:	d00d      	beq.n	8006ff8 <HAL_RCC_GetSysClockFreq+0x40>
 8006fdc:	2b08      	cmp	r3, #8
 8006fde:	f200 80e1 	bhi.w	80071a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d002      	beq.n	8006fec <HAL_RCC_GetSysClockFreq+0x34>
 8006fe6:	2b04      	cmp	r3, #4
 8006fe8:	d003      	beq.n	8006ff2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006fea:	e0db      	b.n	80071a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006fec:	4b73      	ldr	r3, [pc, #460]	; (80071bc <HAL_RCC_GetSysClockFreq+0x204>)
 8006fee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006ff0:	e0db      	b.n	80071aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ff2:	4b73      	ldr	r3, [pc, #460]	; (80071c0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006ff4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006ff6:	e0d8      	b.n	80071aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ff8:	4b6f      	ldr	r3, [pc, #444]	; (80071b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007000:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007002:	4b6d      	ldr	r3, [pc, #436]	; (80071b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d063      	beq.n	80070d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800700e:	4b6a      	ldr	r3, [pc, #424]	; (80071b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	099b      	lsrs	r3, r3, #6
 8007014:	2200      	movs	r2, #0
 8007016:	63bb      	str	r3, [r7, #56]	; 0x38
 8007018:	63fa      	str	r2, [r7, #60]	; 0x3c
 800701a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007020:	633b      	str	r3, [r7, #48]	; 0x30
 8007022:	2300      	movs	r3, #0
 8007024:	637b      	str	r3, [r7, #52]	; 0x34
 8007026:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800702a:	4622      	mov	r2, r4
 800702c:	462b      	mov	r3, r5
 800702e:	f04f 0000 	mov.w	r0, #0
 8007032:	f04f 0100 	mov.w	r1, #0
 8007036:	0159      	lsls	r1, r3, #5
 8007038:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800703c:	0150      	lsls	r0, r2, #5
 800703e:	4602      	mov	r2, r0
 8007040:	460b      	mov	r3, r1
 8007042:	4621      	mov	r1, r4
 8007044:	1a51      	subs	r1, r2, r1
 8007046:	6139      	str	r1, [r7, #16]
 8007048:	4629      	mov	r1, r5
 800704a:	eb63 0301 	sbc.w	r3, r3, r1
 800704e:	617b      	str	r3, [r7, #20]
 8007050:	f04f 0200 	mov.w	r2, #0
 8007054:	f04f 0300 	mov.w	r3, #0
 8007058:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800705c:	4659      	mov	r1, fp
 800705e:	018b      	lsls	r3, r1, #6
 8007060:	4651      	mov	r1, sl
 8007062:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007066:	4651      	mov	r1, sl
 8007068:	018a      	lsls	r2, r1, #6
 800706a:	4651      	mov	r1, sl
 800706c:	ebb2 0801 	subs.w	r8, r2, r1
 8007070:	4659      	mov	r1, fp
 8007072:	eb63 0901 	sbc.w	r9, r3, r1
 8007076:	f04f 0200 	mov.w	r2, #0
 800707a:	f04f 0300 	mov.w	r3, #0
 800707e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007082:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007086:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800708a:	4690      	mov	r8, r2
 800708c:	4699      	mov	r9, r3
 800708e:	4623      	mov	r3, r4
 8007090:	eb18 0303 	adds.w	r3, r8, r3
 8007094:	60bb      	str	r3, [r7, #8]
 8007096:	462b      	mov	r3, r5
 8007098:	eb49 0303 	adc.w	r3, r9, r3
 800709c:	60fb      	str	r3, [r7, #12]
 800709e:	f04f 0200 	mov.w	r2, #0
 80070a2:	f04f 0300 	mov.w	r3, #0
 80070a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80070aa:	4629      	mov	r1, r5
 80070ac:	024b      	lsls	r3, r1, #9
 80070ae:	4621      	mov	r1, r4
 80070b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80070b4:	4621      	mov	r1, r4
 80070b6:	024a      	lsls	r2, r1, #9
 80070b8:	4610      	mov	r0, r2
 80070ba:	4619      	mov	r1, r3
 80070bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070be:	2200      	movs	r2, #0
 80070c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80070c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80070c8:	f7f9 fd6e 	bl	8000ba8 <__aeabi_uldivmod>
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	4613      	mov	r3, r2
 80070d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070d4:	e058      	b.n	8007188 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070d6:	4b38      	ldr	r3, [pc, #224]	; (80071b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	099b      	lsrs	r3, r3, #6
 80070dc:	2200      	movs	r2, #0
 80070de:	4618      	mov	r0, r3
 80070e0:	4611      	mov	r1, r2
 80070e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80070e6:	623b      	str	r3, [r7, #32]
 80070e8:	2300      	movs	r3, #0
 80070ea:	627b      	str	r3, [r7, #36]	; 0x24
 80070ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80070f0:	4642      	mov	r2, r8
 80070f2:	464b      	mov	r3, r9
 80070f4:	f04f 0000 	mov.w	r0, #0
 80070f8:	f04f 0100 	mov.w	r1, #0
 80070fc:	0159      	lsls	r1, r3, #5
 80070fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007102:	0150      	lsls	r0, r2, #5
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	4641      	mov	r1, r8
 800710a:	ebb2 0a01 	subs.w	sl, r2, r1
 800710e:	4649      	mov	r1, r9
 8007110:	eb63 0b01 	sbc.w	fp, r3, r1
 8007114:	f04f 0200 	mov.w	r2, #0
 8007118:	f04f 0300 	mov.w	r3, #0
 800711c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007120:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007124:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007128:	ebb2 040a 	subs.w	r4, r2, sl
 800712c:	eb63 050b 	sbc.w	r5, r3, fp
 8007130:	f04f 0200 	mov.w	r2, #0
 8007134:	f04f 0300 	mov.w	r3, #0
 8007138:	00eb      	lsls	r3, r5, #3
 800713a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800713e:	00e2      	lsls	r2, r4, #3
 8007140:	4614      	mov	r4, r2
 8007142:	461d      	mov	r5, r3
 8007144:	4643      	mov	r3, r8
 8007146:	18e3      	adds	r3, r4, r3
 8007148:	603b      	str	r3, [r7, #0]
 800714a:	464b      	mov	r3, r9
 800714c:	eb45 0303 	adc.w	r3, r5, r3
 8007150:	607b      	str	r3, [r7, #4]
 8007152:	f04f 0200 	mov.w	r2, #0
 8007156:	f04f 0300 	mov.w	r3, #0
 800715a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800715e:	4629      	mov	r1, r5
 8007160:	028b      	lsls	r3, r1, #10
 8007162:	4621      	mov	r1, r4
 8007164:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007168:	4621      	mov	r1, r4
 800716a:	028a      	lsls	r2, r1, #10
 800716c:	4610      	mov	r0, r2
 800716e:	4619      	mov	r1, r3
 8007170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007172:	2200      	movs	r2, #0
 8007174:	61bb      	str	r3, [r7, #24]
 8007176:	61fa      	str	r2, [r7, #28]
 8007178:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800717c:	f7f9 fd14 	bl	8000ba8 <__aeabi_uldivmod>
 8007180:	4602      	mov	r2, r0
 8007182:	460b      	mov	r3, r1
 8007184:	4613      	mov	r3, r2
 8007186:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007188:	4b0b      	ldr	r3, [pc, #44]	; (80071b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	0c1b      	lsrs	r3, r3, #16
 800718e:	f003 0303 	and.w	r3, r3, #3
 8007192:	3301      	adds	r3, #1
 8007194:	005b      	lsls	r3, r3, #1
 8007196:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007198:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800719a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800719c:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80071a2:	e002      	b.n	80071aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80071a4:	4b05      	ldr	r3, [pc, #20]	; (80071bc <HAL_RCC_GetSysClockFreq+0x204>)
 80071a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80071a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3750      	adds	r7, #80	; 0x50
 80071b0:	46bd      	mov	sp, r7
 80071b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071b6:	bf00      	nop
 80071b8:	40023800 	.word	0x40023800
 80071bc:	00f42400 	.word	0x00f42400
 80071c0:	007a1200 	.word	0x007a1200

080071c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071c4:	b480      	push	{r7}
 80071c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071c8:	4b03      	ldr	r3, [pc, #12]	; (80071d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80071ca:	681b      	ldr	r3, [r3, #0]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	20000000 	.word	0x20000000

080071dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80071e0:	f7ff fff0 	bl	80071c4 <HAL_RCC_GetHCLKFreq>
 80071e4:	4602      	mov	r2, r0
 80071e6:	4b05      	ldr	r3, [pc, #20]	; (80071fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	0a9b      	lsrs	r3, r3, #10
 80071ec:	f003 0307 	and.w	r3, r3, #7
 80071f0:	4903      	ldr	r1, [pc, #12]	; (8007200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071f2:	5ccb      	ldrb	r3, [r1, r3]
 80071f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	40023800 	.word	0x40023800
 8007200:	0800fe70 	.word	0x0800fe70

08007204 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	220f      	movs	r2, #15
 8007212:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007214:	4b12      	ldr	r3, [pc, #72]	; (8007260 <HAL_RCC_GetClockConfig+0x5c>)
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	f003 0203 	and.w	r2, r3, #3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007220:	4b0f      	ldr	r3, [pc, #60]	; (8007260 <HAL_RCC_GetClockConfig+0x5c>)
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800722c:	4b0c      	ldr	r3, [pc, #48]	; (8007260 <HAL_RCC_GetClockConfig+0x5c>)
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007238:	4b09      	ldr	r3, [pc, #36]	; (8007260 <HAL_RCC_GetClockConfig+0x5c>)
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	08db      	lsrs	r3, r3, #3
 800723e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007246:	4b07      	ldr	r3, [pc, #28]	; (8007264 <HAL_RCC_GetClockConfig+0x60>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 020f 	and.w	r2, r3, #15
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	601a      	str	r2, [r3, #0]
}
 8007252:	bf00      	nop
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	40023800 	.word	0x40023800
 8007264:	40023c00 	.word	0x40023c00

08007268 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007270:	2300      	movs	r3, #0
 8007272:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007274:	2300      	movs	r3, #0
 8007276:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10b      	bne.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800728c:	2b00      	cmp	r3, #0
 800728e:	d105      	bne.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007298:	2b00      	cmp	r3, #0
 800729a:	d075      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800729c:	4b91      	ldr	r3, [pc, #580]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800729e:	2200      	movs	r2, #0
 80072a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80072a2:	f7fc fbc7 	bl	8003a34 <HAL_GetTick>
 80072a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072a8:	e008      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80072aa:	f7fc fbc3 	bl	8003a34 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d901      	bls.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e189      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072bc:	4b8a      	ldr	r3, [pc, #552]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1f0      	bne.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0301 	and.w	r3, r3, #1
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d009      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	019a      	lsls	r2, r3, #6
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	071b      	lsls	r3, r3, #28
 80072e0:	4981      	ldr	r1, [pc, #516]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d01f      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80072f4:	4b7c      	ldr	r3, [pc, #496]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072fa:	0f1b      	lsrs	r3, r3, #28
 80072fc:	f003 0307 	and.w	r3, r3, #7
 8007300:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	019a      	lsls	r2, r3, #6
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	061b      	lsls	r3, r3, #24
 800730e:	431a      	orrs	r2, r3
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	071b      	lsls	r3, r3, #28
 8007314:	4974      	ldr	r1, [pc, #464]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007316:	4313      	orrs	r3, r2
 8007318:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800731c:	4b72      	ldr	r3, [pc, #456]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800731e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007322:	f023 021f 	bic.w	r2, r3, #31
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	69db      	ldr	r3, [r3, #28]
 800732a:	3b01      	subs	r3, #1
 800732c:	496e      	ldr	r1, [pc, #440]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800732e:	4313      	orrs	r3, r2
 8007330:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00d      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	019a      	lsls	r2, r3, #6
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	061b      	lsls	r3, r3, #24
 800734c:	431a      	orrs	r2, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	071b      	lsls	r3, r3, #28
 8007354:	4964      	ldr	r1, [pc, #400]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007356:	4313      	orrs	r3, r2
 8007358:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800735c:	4b61      	ldr	r3, [pc, #388]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800735e:	2201      	movs	r2, #1
 8007360:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007362:	f7fc fb67 	bl	8003a34 <HAL_GetTick>
 8007366:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007368:	e008      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800736a:	f7fc fb63 	bl	8003a34 <HAL_GetTick>
 800736e:	4602      	mov	r2, r0
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	2b02      	cmp	r3, #2
 8007376:	d901      	bls.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e129      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800737c:	4b5a      	ldr	r3, [pc, #360]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d0f0      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 0304 	and.w	r3, r3, #4
 8007390:	2b00      	cmp	r3, #0
 8007392:	d105      	bne.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800739c:	2b00      	cmp	r3, #0
 800739e:	d079      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80073a0:	4b52      	ldr	r3, [pc, #328]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073a6:	f7fc fb45 	bl	8003a34 <HAL_GetTick>
 80073aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80073ac:	e008      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80073ae:	f7fc fb41 	bl	8003a34 <HAL_GetTick>
 80073b2:	4602      	mov	r2, r0
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d901      	bls.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	e107      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80073c0:	4b49      	ldr	r3, [pc, #292]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073cc:	d0ef      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 0304 	and.w	r3, r3, #4
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d020      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80073da:	4b43      	ldr	r3, [pc, #268]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073e0:	0f1b      	lsrs	r3, r3, #28
 80073e2:	f003 0307 	and.w	r3, r3, #7
 80073e6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	019a      	lsls	r2, r3, #6
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	061b      	lsls	r3, r3, #24
 80073f4:	431a      	orrs	r2, r3
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	071b      	lsls	r3, r3, #28
 80073fa:	493b      	ldr	r1, [pc, #236]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073fc:	4313      	orrs	r3, r2
 80073fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007402:	4b39      	ldr	r3, [pc, #228]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007408:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a1b      	ldr	r3, [r3, #32]
 8007410:	3b01      	subs	r3, #1
 8007412:	021b      	lsls	r3, r3, #8
 8007414:	4934      	ldr	r1, [pc, #208]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007416:	4313      	orrs	r3, r2
 8007418:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0308 	and.w	r3, r3, #8
 8007424:	2b00      	cmp	r3, #0
 8007426:	d01e      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007428:	4b2f      	ldr	r3, [pc, #188]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800742a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800742e:	0e1b      	lsrs	r3, r3, #24
 8007430:	f003 030f 	and.w	r3, r3, #15
 8007434:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	019a      	lsls	r2, r3, #6
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	061b      	lsls	r3, r3, #24
 8007440:	431a      	orrs	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	071b      	lsls	r3, r3, #28
 8007448:	4927      	ldr	r1, [pc, #156]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800744a:	4313      	orrs	r3, r2
 800744c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007450:	4b25      	ldr	r3, [pc, #148]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007452:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007456:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745e:	4922      	ldr	r1, [pc, #136]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007460:	4313      	orrs	r3, r2
 8007462:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007466:	4b21      	ldr	r3, [pc, #132]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007468:	2201      	movs	r2, #1
 800746a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800746c:	f7fc fae2 	bl	8003a34 <HAL_GetTick>
 8007470:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007472:	e008      	b.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007474:	f7fc fade 	bl	8003a34 <HAL_GetTick>
 8007478:	4602      	mov	r2, r0
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	2b02      	cmp	r3, #2
 8007480:	d901      	bls.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e0a4      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007486:	4b18      	ldr	r3, [pc, #96]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800748e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007492:	d1ef      	bne.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0320 	and.w	r3, r3, #32
 800749c:	2b00      	cmp	r3, #0
 800749e:	f000 808b 	beq.w	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80074a2:	2300      	movs	r3, #0
 80074a4:	60fb      	str	r3, [r7, #12]
 80074a6:	4b10      	ldr	r3, [pc, #64]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074aa:	4a0f      	ldr	r2, [pc, #60]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074b0:	6413      	str	r3, [r2, #64]	; 0x40
 80074b2:	4b0d      	ldr	r3, [pc, #52]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074ba:	60fb      	str	r3, [r7, #12]
 80074bc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80074be:	4b0c      	ldr	r3, [pc, #48]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a0b      	ldr	r2, [pc, #44]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80074c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80074ca:	f7fc fab3 	bl	8003a34 <HAL_GetTick>
 80074ce:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80074d0:	e010      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80074d2:	f7fc faaf 	bl	8003a34 <HAL_GetTick>
 80074d6:	4602      	mov	r2, r0
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d909      	bls.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e075      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80074e4:	42470068 	.word	0x42470068
 80074e8:	40023800 	.word	0x40023800
 80074ec:	42470070 	.word	0x42470070
 80074f0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80074f4:	4b38      	ldr	r3, [pc, #224]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d0e8      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007500:	4b36      	ldr	r3, [pc, #216]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007504:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007508:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d02f      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	429a      	cmp	r2, r3
 800751c:	d028      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800751e:	4b2f      	ldr	r3, [pc, #188]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007526:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007528:	4b2d      	ldr	r3, [pc, #180]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800752a:	2201      	movs	r2, #1
 800752c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800752e:	4b2c      	ldr	r3, [pc, #176]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007530:	2200      	movs	r2, #0
 8007532:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007534:	4a29      	ldr	r2, [pc, #164]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800753a:	4b28      	ldr	r3, [pc, #160]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800753c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	2b01      	cmp	r3, #1
 8007544:	d114      	bne.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007546:	f7fc fa75 	bl	8003a34 <HAL_GetTick>
 800754a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800754c:	e00a      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800754e:	f7fc fa71 	bl	8003a34 <HAL_GetTick>
 8007552:	4602      	mov	r2, r0
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	1ad3      	subs	r3, r2, r3
 8007558:	f241 3288 	movw	r2, #5000	; 0x1388
 800755c:	4293      	cmp	r3, r2
 800755e:	d901      	bls.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e035      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007564:	4b1d      	ldr	r3, [pc, #116]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007568:	f003 0302 	and.w	r3, r3, #2
 800756c:	2b00      	cmp	r3, #0
 800756e:	d0ee      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007574:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007578:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800757c:	d10d      	bne.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800757e:	4b17      	ldr	r3, [pc, #92]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800758e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007592:	4912      	ldr	r1, [pc, #72]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007594:	4313      	orrs	r3, r2
 8007596:	608b      	str	r3, [r1, #8]
 8007598:	e005      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800759a:	4b10      	ldr	r3, [pc, #64]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	4a0f      	ldr	r2, [pc, #60]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80075a0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80075a4:	6093      	str	r3, [r2, #8]
 80075a6:	4b0d      	ldr	r3, [pc, #52]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80075a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075b2:	490a      	ldr	r1, [pc, #40]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0310 	and.w	r3, r3, #16
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d004      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80075ca:	4b06      	ldr	r3, [pc, #24]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80075cc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3718      	adds	r7, #24
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	40007000 	.word	0x40007000
 80075dc:	40023800 	.word	0x40023800
 80075e0:	42470e40 	.word	0x42470e40
 80075e4:	424711e0 	.word	0x424711e0

080075e8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d101      	bne.n	80075fc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e025      	b.n	8007648 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	d106      	bne.n	8007616 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f7f9 ff45 	bl	80014a0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2202      	movs	r2, #2
 800761a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	3304      	adds	r3, #4
 8007626:	4619      	mov	r1, r3
 8007628:	4610      	mov	r0, r2
 800762a:	f001 f8f1 	bl	8008810 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6818      	ldr	r0, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	461a      	mov	r2, r3
 8007638:	6839      	ldr	r1, [r7, #0]
 800763a:	f001 f946 	bl	80088ca <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3708      	adds	r7, #8
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007662:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007664:	7dfb      	ldrb	r3, [r7, #23]
 8007666:	2b02      	cmp	r3, #2
 8007668:	d101      	bne.n	800766e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800766a:	2302      	movs	r3, #2
 800766c:	e021      	b.n	80076b2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800766e:	7dfb      	ldrb	r3, [r7, #23]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d002      	beq.n	800767a <HAL_SDRAM_SendCommand+0x2a>
 8007674:	7dfb      	ldrb	r3, [r7, #23]
 8007676:	2b05      	cmp	r3, #5
 8007678:	d118      	bne.n	80076ac <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2202      	movs	r2, #2
 800767e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	68b9      	ldr	r1, [r7, #8]
 800768a:	4618      	mov	r0, r3
 800768c:	f001 f986 	bl	800899c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b02      	cmp	r3, #2
 8007696:	d104      	bne.n	80076a2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2205      	movs	r2, #5
 800769c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80076a0:	e006      	b.n	80076b0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80076aa:	e001      	b.n	80076b0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e000      	b.n	80076b2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3718      	adds	r7, #24
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b082      	sub	sp, #8
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d101      	bne.n	80076d4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80076d0:	2302      	movs	r3, #2
 80076d2:	e016      	b.n	8007702 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d10f      	bne.n	8007700 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2202      	movs	r2, #2
 80076e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	4618      	mov	r0, r3
 80076f0:	f001 f991 	bl	8008a16 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
 80076fe:	e000      	b.n	8007702 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
}
 8007702:	4618      	mov	r0, r3
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b082      	sub	sp, #8
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d101      	bne.n	800771c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	e07b      	b.n	8007814 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007720:	2b00      	cmp	r3, #0
 8007722:	d108      	bne.n	8007736 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800772c:	d009      	beq.n	8007742 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	61da      	str	r2, [r3, #28]
 8007734:	e005      	b.n	8007742 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800774e:	b2db      	uxtb	r3, r3
 8007750:	2b00      	cmp	r3, #0
 8007752:	d106      	bne.n	8007762 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f7fa fbeb 	bl	8001f38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2202      	movs	r2, #2
 8007766:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007778:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800778a:	431a      	orrs	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007794:	431a      	orrs	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	f003 0302 	and.w	r3, r3, #2
 800779e:	431a      	orrs	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	f003 0301 	and.w	r3, r3, #1
 80077a8:	431a      	orrs	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	699b      	ldr	r3, [r3, #24]
 80077ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077b2:	431a      	orrs	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	69db      	ldr	r3, [r3, #28]
 80077b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077bc:	431a      	orrs	r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a1b      	ldr	r3, [r3, #32]
 80077c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077c6:	ea42 0103 	orr.w	r1, r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	430a      	orrs	r2, r1
 80077d8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	0c1b      	lsrs	r3, r3, #16
 80077e0:	f003 0104 	and.w	r1, r3, #4
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e8:	f003 0210 	and.w	r2, r3, #16
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	430a      	orrs	r2, r1
 80077f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	69da      	ldr	r2, [r3, #28]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007802:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d101      	bne.n	800782e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e01a      	b.n	8007864 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2202      	movs	r2, #2
 8007832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007844:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f7fa fbbe 	bl	8001fc8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3708      	adds	r7, #8
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b088      	sub	sp, #32
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	603b      	str	r3, [r7, #0]
 8007878:	4613      	mov	r3, r2
 800787a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800787c:	2300      	movs	r3, #0
 800787e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007886:	2b01      	cmp	r3, #1
 8007888:	d101      	bne.n	800788e <HAL_SPI_Transmit+0x22>
 800788a:	2302      	movs	r3, #2
 800788c:	e126      	b.n	8007adc <HAL_SPI_Transmit+0x270>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007896:	f7fc f8cd 	bl	8003a34 <HAL_GetTick>
 800789a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800789c:	88fb      	ldrh	r3, [r7, #6]
 800789e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d002      	beq.n	80078b2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80078ac:	2302      	movs	r3, #2
 80078ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80078b0:	e10b      	b.n	8007aca <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d002      	beq.n	80078be <HAL_SPI_Transmit+0x52>
 80078b8:	88fb      	ldrh	r3, [r7, #6]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d102      	bne.n	80078c4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80078c2:	e102      	b.n	8007aca <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2203      	movs	r2, #3
 80078c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	88fa      	ldrh	r2, [r7, #6]
 80078dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	88fa      	ldrh	r2, [r7, #6]
 80078e2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800790a:	d10f      	bne.n	800792c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800791a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800792a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007936:	2b40      	cmp	r3, #64	; 0x40
 8007938:	d007      	beq.n	800794a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007948:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007952:	d14b      	bne.n	80079ec <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d002      	beq.n	8007962 <HAL_SPI_Transmit+0xf6>
 800795c:	8afb      	ldrh	r3, [r7, #22]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d13e      	bne.n	80079e0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007966:	881a      	ldrh	r2, [r3, #0]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007972:	1c9a      	adds	r2, r3, #2
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800797c:	b29b      	uxth	r3, r3
 800797e:	3b01      	subs	r3, #1
 8007980:	b29a      	uxth	r2, r3
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007986:	e02b      	b.n	80079e0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f003 0302 	and.w	r3, r3, #2
 8007992:	2b02      	cmp	r3, #2
 8007994:	d112      	bne.n	80079bc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800799a:	881a      	ldrh	r2, [r3, #0]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a6:	1c9a      	adds	r2, r3, #2
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	3b01      	subs	r3, #1
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80079ba:	e011      	b.n	80079e0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079bc:	f7fc f83a 	bl	8003a34 <HAL_GetTick>
 80079c0:	4602      	mov	r2, r0
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d803      	bhi.n	80079d4 <HAL_SPI_Transmit+0x168>
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d2:	d102      	bne.n	80079da <HAL_SPI_Transmit+0x16e>
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d102      	bne.n	80079e0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80079de:	e074      	b.n	8007aca <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1ce      	bne.n	8007988 <HAL_SPI_Transmit+0x11c>
 80079ea:	e04c      	b.n	8007a86 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d002      	beq.n	80079fa <HAL_SPI_Transmit+0x18e>
 80079f4:	8afb      	ldrh	r3, [r7, #22]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d140      	bne.n	8007a7c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	330c      	adds	r3, #12
 8007a04:	7812      	ldrb	r2, [r2, #0]
 8007a06:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0c:	1c5a      	adds	r2, r3, #1
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007a20:	e02c      	b.n	8007a7c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	f003 0302 	and.w	r3, r3, #2
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d113      	bne.n	8007a58 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	330c      	adds	r3, #12
 8007a3a:	7812      	ldrb	r2, [r2, #0]
 8007a3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a42:	1c5a      	adds	r2, r3, #1
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a56:	e011      	b.n	8007a7c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a58:	f7fb ffec 	bl	8003a34 <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d803      	bhi.n	8007a70 <HAL_SPI_Transmit+0x204>
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a6e:	d102      	bne.n	8007a76 <HAL_SPI_Transmit+0x20a>
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d102      	bne.n	8007a7c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a7a:	e026      	b.n	8007aca <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1cd      	bne.n	8007a22 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a86:	69ba      	ldr	r2, [r7, #24]
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f000 fbda 	bl	8008244 <SPI_EndRxTxTransaction>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d002      	beq.n	8007a9c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2220      	movs	r2, #32
 8007a9a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10a      	bne.n	8007aba <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	613b      	str	r3, [r7, #16]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	613b      	str	r3, [r7, #16]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	613b      	str	r3, [r7, #16]
 8007ab8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d002      	beq.n	8007ac8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	77fb      	strb	r3, [r7, #31]
 8007ac6:	e000      	b.n	8007aca <HAL_SPI_Transmit+0x25e>
  }

error:
 8007ac8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007ada:	7ffb      	ldrb	r3, [r7, #31]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3720      	adds	r7, #32
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b088      	sub	sp, #32
 8007ae8:	af02      	add	r7, sp, #8
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	603b      	str	r3, [r7, #0]
 8007af0:	4613      	mov	r3, r2
 8007af2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007af4:	2300      	movs	r3, #0
 8007af6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b00:	d112      	bne.n	8007b28 <HAL_SPI_Receive+0x44>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d10e      	bne.n	8007b28 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2204      	movs	r2, #4
 8007b0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007b12:	88fa      	ldrh	r2, [r7, #6]
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	4613      	mov	r3, r2
 8007b1a:	68ba      	ldr	r2, [r7, #8]
 8007b1c:	68b9      	ldr	r1, [r7, #8]
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f000 f8f1 	bl	8007d06 <HAL_SPI_TransmitReceive>
 8007b24:	4603      	mov	r3, r0
 8007b26:	e0ea      	b.n	8007cfe <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d101      	bne.n	8007b36 <HAL_SPI_Receive+0x52>
 8007b32:	2302      	movs	r3, #2
 8007b34:	e0e3      	b.n	8007cfe <HAL_SPI_Receive+0x21a>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b3e:	f7fb ff79 	bl	8003a34 <HAL_GetTick>
 8007b42:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d002      	beq.n	8007b56 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007b50:	2302      	movs	r3, #2
 8007b52:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b54:	e0ca      	b.n	8007cec <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d002      	beq.n	8007b62 <HAL_SPI_Receive+0x7e>
 8007b5c:	88fb      	ldrh	r3, [r7, #6]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d102      	bne.n	8007b68 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b66:	e0c1      	b.n	8007cec <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2204      	movs	r2, #4
 8007b6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	88fa      	ldrh	r2, [r7, #6]
 8007b80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	88fa      	ldrh	r2, [r7, #6]
 8007b86:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bae:	d10f      	bne.n	8007bd0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bbe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007bce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bda:	2b40      	cmp	r3, #64	; 0x40
 8007bdc:	d007      	beq.n	8007bee <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d162      	bne.n	8007cbc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007bf6:	e02e      	b.n	8007c56 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	f003 0301 	and.w	r3, r3, #1
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d115      	bne.n	8007c32 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f103 020c 	add.w	r2, r3, #12
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c12:	7812      	ldrb	r2, [r2, #0]
 8007c14:	b2d2      	uxtb	r2, r2
 8007c16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1c:	1c5a      	adds	r2, r3, #1
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c30:	e011      	b.n	8007c56 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c32:	f7fb feff 	bl	8003a34 <HAL_GetTick>
 8007c36:	4602      	mov	r2, r0
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d803      	bhi.n	8007c4a <HAL_SPI_Receive+0x166>
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c48:	d102      	bne.n	8007c50 <HAL_SPI_Receive+0x16c>
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d102      	bne.n	8007c56 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007c54:	e04a      	b.n	8007cec <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1cb      	bne.n	8007bf8 <HAL_SPI_Receive+0x114>
 8007c60:	e031      	b.n	8007cc6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f003 0301 	and.w	r3, r3, #1
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d113      	bne.n	8007c98 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68da      	ldr	r2, [r3, #12]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7a:	b292      	uxth	r2, r2
 8007c7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c82:	1c9a      	adds	r2, r3, #2
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c96:	e011      	b.n	8007cbc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c98:	f7fb fecc 	bl	8003a34 <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	683a      	ldr	r2, [r7, #0]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d803      	bhi.n	8007cb0 <HAL_SPI_Receive+0x1cc>
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cae:	d102      	bne.n	8007cb6 <HAL_SPI_Receive+0x1d2>
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d102      	bne.n	8007cbc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007cba:	e017      	b.n	8007cec <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1cd      	bne.n	8007c62 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007cc6:	693a      	ldr	r2, [r7, #16]
 8007cc8:	6839      	ldr	r1, [r7, #0]
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f000 fa54 	bl	8008178 <SPI_EndRxTransaction>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d002      	beq.n	8007cdc <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2220      	movs	r2, #32
 8007cda:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	75fb      	strb	r3, [r7, #23]
 8007ce8:	e000      	b.n	8007cec <HAL_SPI_Receive+0x208>
  }

error :
 8007cea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3718      	adds	r7, #24
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b08c      	sub	sp, #48	; 0x30
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	60f8      	str	r0, [r7, #12]
 8007d0e:	60b9      	str	r1, [r7, #8]
 8007d10:	607a      	str	r2, [r7, #4]
 8007d12:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007d14:	2301      	movs	r3, #1
 8007d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d101      	bne.n	8007d2c <HAL_SPI_TransmitReceive+0x26>
 8007d28:	2302      	movs	r3, #2
 8007d2a:	e18a      	b.n	8008042 <HAL_SPI_TransmitReceive+0x33c>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d34:	f7fb fe7e 	bl	8003a34 <HAL_GetTick>
 8007d38:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007d4a:	887b      	ldrh	r3, [r7, #2]
 8007d4c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d00f      	beq.n	8007d76 <HAL_SPI_TransmitReceive+0x70>
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d5c:	d107      	bne.n	8007d6e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d103      	bne.n	8007d6e <HAL_SPI_TransmitReceive+0x68>
 8007d66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d6a:	2b04      	cmp	r3, #4
 8007d6c:	d003      	beq.n	8007d76 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007d6e:	2302      	movs	r3, #2
 8007d70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007d74:	e15b      	b.n	800802e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <HAL_SPI_TransmitReceive+0x82>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d002      	beq.n	8007d88 <HAL_SPI_TransmitReceive+0x82>
 8007d82:	887b      	ldrh	r3, [r7, #2]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d103      	bne.n	8007d90 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007d8e:	e14e      	b.n	800802e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	2b04      	cmp	r3, #4
 8007d9a:	d003      	beq.n	8007da4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2205      	movs	r2, #5
 8007da0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	887a      	ldrh	r2, [r7, #2]
 8007db4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	887a      	ldrh	r2, [r7, #2]
 8007dba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	68ba      	ldr	r2, [r7, #8]
 8007dc0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	887a      	ldrh	r2, [r7, #2]
 8007dc6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	887a      	ldrh	r2, [r7, #2]
 8007dcc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de4:	2b40      	cmp	r3, #64	; 0x40
 8007de6:	d007      	beq.n	8007df8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007df6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e00:	d178      	bne.n	8007ef4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d002      	beq.n	8007e10 <HAL_SPI_TransmitReceive+0x10a>
 8007e0a:	8b7b      	ldrh	r3, [r7, #26]
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d166      	bne.n	8007ede <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e14:	881a      	ldrh	r2, [r3, #0]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e20:	1c9a      	adds	r2, r3, #2
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e34:	e053      	b.n	8007ede <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	f003 0302 	and.w	r3, r3, #2
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d11b      	bne.n	8007e7c <HAL_SPI_TransmitReceive+0x176>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d016      	beq.n	8007e7c <HAL_SPI_TransmitReceive+0x176>
 8007e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d113      	bne.n	8007e7c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e58:	881a      	ldrh	r2, [r3, #0]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e64:	1c9a      	adds	r2, r3, #2
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	3b01      	subs	r3, #1
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d119      	bne.n	8007ebe <HAL_SPI_TransmitReceive+0x1b8>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d014      	beq.n	8007ebe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68da      	ldr	r2, [r3, #12]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9e:	b292      	uxth	r2, r2
 8007ea0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea6:	1c9a      	adds	r2, r3, #2
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007ebe:	f7fb fdb9 	bl	8003a34 <HAL_GetTick>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d807      	bhi.n	8007ede <HAL_SPI_TransmitReceive+0x1d8>
 8007ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed4:	d003      	beq.n	8007ede <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007edc:	e0a7      	b.n	800802e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d1a6      	bne.n	8007e36 <HAL_SPI_TransmitReceive+0x130>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1a1      	bne.n	8007e36 <HAL_SPI_TransmitReceive+0x130>
 8007ef2:	e07c      	b.n	8007fee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d002      	beq.n	8007f02 <HAL_SPI_TransmitReceive+0x1fc>
 8007efc:	8b7b      	ldrh	r3, [r7, #26]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d16b      	bne.n	8007fda <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	330c      	adds	r3, #12
 8007f0c:	7812      	ldrb	r2, [r2, #0]
 8007f0e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f14:	1c5a      	adds	r2, r3, #1
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	3b01      	subs	r3, #1
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f28:	e057      	b.n	8007fda <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	f003 0302 	and.w	r3, r3, #2
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d11c      	bne.n	8007f72 <HAL_SPI_TransmitReceive+0x26c>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d017      	beq.n	8007f72 <HAL_SPI_TransmitReceive+0x26c>
 8007f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d114      	bne.n	8007f72 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	330c      	adds	r3, #12
 8007f52:	7812      	ldrb	r2, [r2, #0]
 8007f54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f5a:	1c5a      	adds	r2, r3, #1
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	3b01      	subs	r3, #1
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	f003 0301 	and.w	r3, r3, #1
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d119      	bne.n	8007fb4 <HAL_SPI_TransmitReceive+0x2ae>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d014      	beq.n	8007fb4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68da      	ldr	r2, [r3, #12]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f94:	b2d2      	uxtb	r2, r2
 8007f96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9c:	1c5a      	adds	r2, r3, #1
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007fb4:	f7fb fd3e 	bl	8003a34 <HAL_GetTick>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d803      	bhi.n	8007fcc <HAL_SPI_TransmitReceive+0x2c6>
 8007fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fca:	d102      	bne.n	8007fd2 <HAL_SPI_TransmitReceive+0x2cc>
 8007fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d103      	bne.n	8007fda <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007fd8:	e029      	b.n	800802e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1a2      	bne.n	8007f2a <HAL_SPI_TransmitReceive+0x224>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d19d      	bne.n	8007f2a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ff0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f000 f926 	bl	8008244 <SPI_EndRxTxTransaction>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d006      	beq.n	800800c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2220      	movs	r2, #32
 8008008:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800800a:	e010      	b.n	800802e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10b      	bne.n	800802c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008014:	2300      	movs	r3, #0
 8008016:	617b      	str	r3, [r7, #20]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	617b      	str	r3, [r7, #20]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	617b      	str	r3, [r7, #20]
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	e000      	b.n	800802e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800802c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800803e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008042:	4618      	mov	r0, r3
 8008044:	3730      	adds	r7, #48	; 0x30
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800804a:	b480      	push	{r7}
 800804c:	b083      	sub	sp, #12
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008058:	b2db      	uxtb	r3, r3
}
 800805a:	4618      	mov	r0, r3
 800805c:	370c      	adds	r7, #12
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
	...

08008068 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b088      	sub	sp, #32
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	603b      	str	r3, [r7, #0]
 8008074:	4613      	mov	r3, r2
 8008076:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008078:	f7fb fcdc 	bl	8003a34 <HAL_GetTick>
 800807c:	4602      	mov	r2, r0
 800807e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008080:	1a9b      	subs	r3, r3, r2
 8008082:	683a      	ldr	r2, [r7, #0]
 8008084:	4413      	add	r3, r2
 8008086:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008088:	f7fb fcd4 	bl	8003a34 <HAL_GetTick>
 800808c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800808e:	4b39      	ldr	r3, [pc, #228]	; (8008174 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	015b      	lsls	r3, r3, #5
 8008094:	0d1b      	lsrs	r3, r3, #20
 8008096:	69fa      	ldr	r2, [r7, #28]
 8008098:	fb02 f303 	mul.w	r3, r2, r3
 800809c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800809e:	e054      	b.n	800814a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a6:	d050      	beq.n	800814a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80080a8:	f7fb fcc4 	bl	8003a34 <HAL_GetTick>
 80080ac:	4602      	mov	r2, r0
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	69fa      	ldr	r2, [r7, #28]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d902      	bls.n	80080be <SPI_WaitFlagStateUntilTimeout+0x56>
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d13d      	bne.n	800813a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	685a      	ldr	r2, [r3, #4]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80080cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080d6:	d111      	bne.n	80080fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080e0:	d004      	beq.n	80080ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080ea:	d107      	bne.n	80080fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008104:	d10f      	bne.n	8008126 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008114:	601a      	str	r2, [r3, #0]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008124:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e017      	b.n	800816a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d101      	bne.n	8008144 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008140:	2300      	movs	r3, #0
 8008142:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	3b01      	subs	r3, #1
 8008148:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	689a      	ldr	r2, [r3, #8]
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	4013      	ands	r3, r2
 8008154:	68ba      	ldr	r2, [r7, #8]
 8008156:	429a      	cmp	r2, r3
 8008158:	bf0c      	ite	eq
 800815a:	2301      	moveq	r3, #1
 800815c:	2300      	movne	r3, #0
 800815e:	b2db      	uxtb	r3, r3
 8008160:	461a      	mov	r2, r3
 8008162:	79fb      	ldrb	r3, [r7, #7]
 8008164:	429a      	cmp	r2, r3
 8008166:	d19b      	bne.n	80080a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3720      	adds	r7, #32
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	20000000 	.word	0x20000000

08008178 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b086      	sub	sp, #24
 800817c:	af02      	add	r7, sp, #8
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800818c:	d111      	bne.n	80081b2 <SPI_EndRxTransaction+0x3a>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008196:	d004      	beq.n	80081a2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081a0:	d107      	bne.n	80081b2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081b0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081ba:	d12a      	bne.n	8008212 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081c4:	d012      	beq.n	80081ec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	2200      	movs	r2, #0
 80081ce:	2180      	movs	r1, #128	; 0x80
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f7ff ff49 	bl	8008068 <SPI_WaitFlagStateUntilTimeout>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d02d      	beq.n	8008238 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081e0:	f043 0220 	orr.w	r2, r3, #32
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80081e8:	2303      	movs	r3, #3
 80081ea:	e026      	b.n	800823a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	2200      	movs	r2, #0
 80081f4:	2101      	movs	r1, #1
 80081f6:	68f8      	ldr	r0, [r7, #12]
 80081f8:	f7ff ff36 	bl	8008068 <SPI_WaitFlagStateUntilTimeout>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d01a      	beq.n	8008238 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008206:	f043 0220 	orr.w	r2, r3, #32
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e013      	b.n	800823a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	2200      	movs	r2, #0
 800821a:	2101      	movs	r1, #1
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f7ff ff23 	bl	8008068 <SPI_WaitFlagStateUntilTimeout>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d007      	beq.n	8008238 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800822c:	f043 0220 	orr.w	r2, r3, #32
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008234:	2303      	movs	r3, #3
 8008236:	e000      	b.n	800823a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
	...

08008244 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b088      	sub	sp, #32
 8008248:	af02      	add	r7, sp, #8
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008250:	4b1b      	ldr	r3, [pc, #108]	; (80082c0 <SPI_EndRxTxTransaction+0x7c>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a1b      	ldr	r2, [pc, #108]	; (80082c4 <SPI_EndRxTxTransaction+0x80>)
 8008256:	fba2 2303 	umull	r2, r3, r2, r3
 800825a:	0d5b      	lsrs	r3, r3, #21
 800825c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008260:	fb02 f303 	mul.w	r3, r2, r3
 8008264:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800826e:	d112      	bne.n	8008296 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	2200      	movs	r2, #0
 8008278:	2180      	movs	r1, #128	; 0x80
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f7ff fef4 	bl	8008068 <SPI_WaitFlagStateUntilTimeout>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d016      	beq.n	80082b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800828a:	f043 0220 	orr.w	r2, r3, #32
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e00f      	b.n	80082b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d00a      	beq.n	80082b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	3b01      	subs	r3, #1
 80082a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ac:	2b80      	cmp	r3, #128	; 0x80
 80082ae:	d0f2      	beq.n	8008296 <SPI_EndRxTxTransaction+0x52>
 80082b0:	e000      	b.n	80082b4 <SPI_EndRxTxTransaction+0x70>
        break;
 80082b2:	bf00      	nop
  }

  return HAL_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3718      	adds	r7, #24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	20000000 	.word	0x20000000
 80082c4:	165e9f81 	.word	0x165e9f81

080082c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d101      	bne.n	80082da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e041      	b.n	800835e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d106      	bne.n	80082f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7fa f846 	bl	8002380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2202      	movs	r2, #2
 80082f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	3304      	adds	r3, #4
 8008304:	4619      	mov	r1, r3
 8008306:	4610      	mov	r0, r2
 8008308:	f000 f9ce 	bl	80086a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
	...

08008368 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008376:	b2db      	uxtb	r3, r3
 8008378:	2b01      	cmp	r3, #1
 800837a:	d001      	beq.n	8008380 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e04e      	b.n	800841e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2202      	movs	r2, #2
 8008384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68da      	ldr	r2, [r3, #12]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f042 0201 	orr.w	r2, r2, #1
 8008396:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a23      	ldr	r2, [pc, #140]	; (800842c <HAL_TIM_Base_Start_IT+0xc4>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d022      	beq.n	80083e8 <HAL_TIM_Base_Start_IT+0x80>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083aa:	d01d      	beq.n	80083e8 <HAL_TIM_Base_Start_IT+0x80>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a1f      	ldr	r2, [pc, #124]	; (8008430 <HAL_TIM_Base_Start_IT+0xc8>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d018      	beq.n	80083e8 <HAL_TIM_Base_Start_IT+0x80>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a1e      	ldr	r2, [pc, #120]	; (8008434 <HAL_TIM_Base_Start_IT+0xcc>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d013      	beq.n	80083e8 <HAL_TIM_Base_Start_IT+0x80>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a1c      	ldr	r2, [pc, #112]	; (8008438 <HAL_TIM_Base_Start_IT+0xd0>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d00e      	beq.n	80083e8 <HAL_TIM_Base_Start_IT+0x80>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a1b      	ldr	r2, [pc, #108]	; (800843c <HAL_TIM_Base_Start_IT+0xd4>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d009      	beq.n	80083e8 <HAL_TIM_Base_Start_IT+0x80>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a19      	ldr	r2, [pc, #100]	; (8008440 <HAL_TIM_Base_Start_IT+0xd8>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d004      	beq.n	80083e8 <HAL_TIM_Base_Start_IT+0x80>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a18      	ldr	r2, [pc, #96]	; (8008444 <HAL_TIM_Base_Start_IT+0xdc>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d111      	bne.n	800840c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	f003 0307 	and.w	r3, r3, #7
 80083f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2b06      	cmp	r3, #6
 80083f8:	d010      	beq.n	800841c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f042 0201 	orr.w	r2, r2, #1
 8008408:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800840a:	e007      	b.n	800841c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f042 0201 	orr.w	r2, r2, #1
 800841a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3714      	adds	r7, #20
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	40010000 	.word	0x40010000
 8008430:	40000400 	.word	0x40000400
 8008434:	40000800 	.word	0x40000800
 8008438:	40000c00 	.word	0x40000c00
 800843c:	40010400 	.word	0x40010400
 8008440:	40014000 	.word	0x40014000
 8008444:	40001800 	.word	0x40001800

08008448 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	f003 0302 	and.w	r3, r3, #2
 800845a:	2b02      	cmp	r3, #2
 800845c:	d122      	bne.n	80084a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	f003 0302 	and.w	r3, r3, #2
 8008468:	2b02      	cmp	r3, #2
 800846a:	d11b      	bne.n	80084a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f06f 0202 	mvn.w	r2, #2
 8008474:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	699b      	ldr	r3, [r3, #24]
 8008482:	f003 0303 	and.w	r3, r3, #3
 8008486:	2b00      	cmp	r3, #0
 8008488:	d003      	beq.n	8008492 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 f8ee 	bl	800866c <HAL_TIM_IC_CaptureCallback>
 8008490:	e005      	b.n	800849e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 f8e0 	bl	8008658 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 f8f1 	bl	8008680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	f003 0304 	and.w	r3, r3, #4
 80084ae:	2b04      	cmp	r3, #4
 80084b0:	d122      	bne.n	80084f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	f003 0304 	and.w	r3, r3, #4
 80084bc:	2b04      	cmp	r3, #4
 80084be:	d11b      	bne.n	80084f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f06f 0204 	mvn.w	r2, #4
 80084c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2202      	movs	r2, #2
 80084ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	699b      	ldr	r3, [r3, #24]
 80084d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d003      	beq.n	80084e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f8c4 	bl	800866c <HAL_TIM_IC_CaptureCallback>
 80084e4:	e005      	b.n	80084f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f8b6 	bl	8008658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 f8c7 	bl	8008680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	f003 0308 	and.w	r3, r3, #8
 8008502:	2b08      	cmp	r3, #8
 8008504:	d122      	bne.n	800854c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	f003 0308 	and.w	r3, r3, #8
 8008510:	2b08      	cmp	r3, #8
 8008512:	d11b      	bne.n	800854c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f06f 0208 	mvn.w	r2, #8
 800851c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2204      	movs	r2, #4
 8008522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	69db      	ldr	r3, [r3, #28]
 800852a:	f003 0303 	and.w	r3, r3, #3
 800852e:	2b00      	cmp	r3, #0
 8008530:	d003      	beq.n	800853a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f89a 	bl	800866c <HAL_TIM_IC_CaptureCallback>
 8008538:	e005      	b.n	8008546 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f88c 	bl	8008658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 f89d 	bl	8008680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	f003 0310 	and.w	r3, r3, #16
 8008556:	2b10      	cmp	r3, #16
 8008558:	d122      	bne.n	80085a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	f003 0310 	and.w	r3, r3, #16
 8008564:	2b10      	cmp	r3, #16
 8008566:	d11b      	bne.n	80085a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f06f 0210 	mvn.w	r2, #16
 8008570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2208      	movs	r2, #8
 8008576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	69db      	ldr	r3, [r3, #28]
 800857e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008582:	2b00      	cmp	r3, #0
 8008584:	d003      	beq.n	800858e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f870 	bl	800866c <HAL_TIM_IC_CaptureCallback>
 800858c:	e005      	b.n	800859a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f862 	bl	8008658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 f873 	bl	8008680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	f003 0301 	and.w	r3, r3, #1
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d10e      	bne.n	80085cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	f003 0301 	and.w	r3, r3, #1
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d107      	bne.n	80085cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f06f 0201 	mvn.w	r2, #1
 80085c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f7f9 fc68 	bl	8001e9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	691b      	ldr	r3, [r3, #16]
 80085d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085d6:	2b80      	cmp	r3, #128	; 0x80
 80085d8:	d10e      	bne.n	80085f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085e4:	2b80      	cmp	r3, #128	; 0x80
 80085e6:	d107      	bne.n	80085f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80085f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 f902 	bl	80087fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008602:	2b40      	cmp	r3, #64	; 0x40
 8008604:	d10e      	bne.n	8008624 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008610:	2b40      	cmp	r3, #64	; 0x40
 8008612:	d107      	bne.n	8008624 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800861c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f838 	bl	8008694 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	f003 0320 	and.w	r3, r3, #32
 800862e:	2b20      	cmp	r3, #32
 8008630:	d10e      	bne.n	8008650 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	f003 0320 	and.w	r3, r3, #32
 800863c:	2b20      	cmp	r3, #32
 800863e:	d107      	bne.n	8008650 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f06f 0220 	mvn.w	r2, #32
 8008648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 f8cc 	bl	80087e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008650:	bf00      	nop
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008660:	bf00      	nop
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a40      	ldr	r2, [pc, #256]	; (80087bc <TIM_Base_SetConfig+0x114>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d013      	beq.n	80086e8 <TIM_Base_SetConfig+0x40>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086c6:	d00f      	beq.n	80086e8 <TIM_Base_SetConfig+0x40>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4a3d      	ldr	r2, [pc, #244]	; (80087c0 <TIM_Base_SetConfig+0x118>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d00b      	beq.n	80086e8 <TIM_Base_SetConfig+0x40>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4a3c      	ldr	r2, [pc, #240]	; (80087c4 <TIM_Base_SetConfig+0x11c>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d007      	beq.n	80086e8 <TIM_Base_SetConfig+0x40>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a3b      	ldr	r2, [pc, #236]	; (80087c8 <TIM_Base_SetConfig+0x120>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d003      	beq.n	80086e8 <TIM_Base_SetConfig+0x40>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a3a      	ldr	r2, [pc, #232]	; (80087cc <TIM_Base_SetConfig+0x124>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d108      	bne.n	80086fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a2f      	ldr	r2, [pc, #188]	; (80087bc <TIM_Base_SetConfig+0x114>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d02b      	beq.n	800875a <TIM_Base_SetConfig+0xb2>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008708:	d027      	beq.n	800875a <TIM_Base_SetConfig+0xb2>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a2c      	ldr	r2, [pc, #176]	; (80087c0 <TIM_Base_SetConfig+0x118>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d023      	beq.n	800875a <TIM_Base_SetConfig+0xb2>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a2b      	ldr	r2, [pc, #172]	; (80087c4 <TIM_Base_SetConfig+0x11c>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d01f      	beq.n	800875a <TIM_Base_SetConfig+0xb2>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a2a      	ldr	r2, [pc, #168]	; (80087c8 <TIM_Base_SetConfig+0x120>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d01b      	beq.n	800875a <TIM_Base_SetConfig+0xb2>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a29      	ldr	r2, [pc, #164]	; (80087cc <TIM_Base_SetConfig+0x124>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d017      	beq.n	800875a <TIM_Base_SetConfig+0xb2>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a28      	ldr	r2, [pc, #160]	; (80087d0 <TIM_Base_SetConfig+0x128>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d013      	beq.n	800875a <TIM_Base_SetConfig+0xb2>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a27      	ldr	r2, [pc, #156]	; (80087d4 <TIM_Base_SetConfig+0x12c>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d00f      	beq.n	800875a <TIM_Base_SetConfig+0xb2>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a26      	ldr	r2, [pc, #152]	; (80087d8 <TIM_Base_SetConfig+0x130>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d00b      	beq.n	800875a <TIM_Base_SetConfig+0xb2>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a25      	ldr	r2, [pc, #148]	; (80087dc <TIM_Base_SetConfig+0x134>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d007      	beq.n	800875a <TIM_Base_SetConfig+0xb2>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a24      	ldr	r2, [pc, #144]	; (80087e0 <TIM_Base_SetConfig+0x138>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d003      	beq.n	800875a <TIM_Base_SetConfig+0xb2>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a23      	ldr	r2, [pc, #140]	; (80087e4 <TIM_Base_SetConfig+0x13c>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d108      	bne.n	800876c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	4313      	orrs	r3, r2
 800876a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	695b      	ldr	r3, [r3, #20]
 8008776:	4313      	orrs	r3, r2
 8008778:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	689a      	ldr	r2, [r3, #8]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4a0a      	ldr	r2, [pc, #40]	; (80087bc <TIM_Base_SetConfig+0x114>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d003      	beq.n	80087a0 <TIM_Base_SetConfig+0xf8>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a0c      	ldr	r2, [pc, #48]	; (80087cc <TIM_Base_SetConfig+0x124>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d103      	bne.n	80087a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	691a      	ldr	r2, [r3, #16]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	615a      	str	r2, [r3, #20]
}
 80087ae:	bf00      	nop
 80087b0:	3714      	adds	r7, #20
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	40010000 	.word	0x40010000
 80087c0:	40000400 	.word	0x40000400
 80087c4:	40000800 	.word	0x40000800
 80087c8:	40000c00 	.word	0x40000c00
 80087cc:	40010400 	.word	0x40010400
 80087d0:	40014000 	.word	0x40014000
 80087d4:	40014400 	.word	0x40014400
 80087d8:	40014800 	.word	0x40014800
 80087dc:	40001800 	.word	0x40001800
 80087e0:	40001c00 	.word	0x40001c00
 80087e4:	40002000 	.word	0x40002000

080087e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d123      	bne.n	800886a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800882a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800882e:	683a      	ldr	r2, [r7, #0]
 8008830:	6851      	ldr	r1, [r2, #4]
 8008832:	683a      	ldr	r2, [r7, #0]
 8008834:	6892      	ldr	r2, [r2, #8]
 8008836:	4311      	orrs	r1, r2
 8008838:	683a      	ldr	r2, [r7, #0]
 800883a:	68d2      	ldr	r2, [r2, #12]
 800883c:	4311      	orrs	r1, r2
 800883e:	683a      	ldr	r2, [r7, #0]
 8008840:	6912      	ldr	r2, [r2, #16]
 8008842:	4311      	orrs	r1, r2
 8008844:	683a      	ldr	r2, [r7, #0]
 8008846:	6952      	ldr	r2, [r2, #20]
 8008848:	4311      	orrs	r1, r2
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	6992      	ldr	r2, [r2, #24]
 800884e:	4311      	orrs	r1, r2
 8008850:	683a      	ldr	r2, [r7, #0]
 8008852:	69d2      	ldr	r2, [r2, #28]
 8008854:	4311      	orrs	r1, r2
 8008856:	683a      	ldr	r2, [r7, #0]
 8008858:	6a12      	ldr	r2, [r2, #32]
 800885a:	4311      	orrs	r1, r2
 800885c:	683a      	ldr	r2, [r7, #0]
 800885e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008860:	430a      	orrs	r2, r1
 8008862:	431a      	orrs	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	601a      	str	r2, [r3, #0]
 8008868:	e028      	b.n	80088bc <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	69d9      	ldr	r1, [r3, #28]
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	6a1b      	ldr	r3, [r3, #32]
 800887a:	4319      	orrs	r1, r3
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008880:	430b      	orrs	r3, r1
 8008882:	431a      	orrs	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008890:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008894:	683a      	ldr	r2, [r7, #0]
 8008896:	6851      	ldr	r1, [r2, #4]
 8008898:	683a      	ldr	r2, [r7, #0]
 800889a:	6892      	ldr	r2, [r2, #8]
 800889c:	4311      	orrs	r1, r2
 800889e:	683a      	ldr	r2, [r7, #0]
 80088a0:	68d2      	ldr	r2, [r2, #12]
 80088a2:	4311      	orrs	r1, r2
 80088a4:	683a      	ldr	r2, [r7, #0]
 80088a6:	6912      	ldr	r2, [r2, #16]
 80088a8:	4311      	orrs	r1, r2
 80088aa:	683a      	ldr	r2, [r7, #0]
 80088ac:	6952      	ldr	r2, [r2, #20]
 80088ae:	4311      	orrs	r1, r2
 80088b0:	683a      	ldr	r2, [r7, #0]
 80088b2:	6992      	ldr	r2, [r2, #24]
 80088b4:	430a      	orrs	r2, r1
 80088b6:	431a      	orrs	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	370c      	adds	r7, #12
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr

080088ca <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80088ca:	b480      	push	{r7}
 80088cc:	b085      	sub	sp, #20
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	60f8      	str	r0, [r7, #12]
 80088d2:	60b9      	str	r1, [r7, #8]
 80088d4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d128      	bne.n	800892e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	1e59      	subs	r1, r3, #1
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	3b01      	subs	r3, #1
 80088f0:	011b      	lsls	r3, r3, #4
 80088f2:	4319      	orrs	r1, r3
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	3b01      	subs	r3, #1
 80088fa:	021b      	lsls	r3, r3, #8
 80088fc:	4319      	orrs	r1, r3
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	3b01      	subs	r3, #1
 8008904:	031b      	lsls	r3, r3, #12
 8008906:	4319      	orrs	r1, r3
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	3b01      	subs	r3, #1
 800890e:	041b      	lsls	r3, r3, #16
 8008910:	4319      	orrs	r1, r3
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	695b      	ldr	r3, [r3, #20]
 8008916:	3b01      	subs	r3, #1
 8008918:	051b      	lsls	r3, r3, #20
 800891a:	4319      	orrs	r1, r3
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	699b      	ldr	r3, [r3, #24]
 8008920:	3b01      	subs	r3, #1
 8008922:	061b      	lsls	r3, r3, #24
 8008924:	430b      	orrs	r3, r1
 8008926:	431a      	orrs	r2, r3
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	609a      	str	r2, [r3, #8]
 800892c:	e02f      	b.n	800898e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008936:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	68d2      	ldr	r2, [r2, #12]
 800893e:	3a01      	subs	r2, #1
 8008940:	0311      	lsls	r1, r2, #12
 8008942:	68ba      	ldr	r2, [r7, #8]
 8008944:	6952      	ldr	r2, [r2, #20]
 8008946:	3a01      	subs	r2, #1
 8008948:	0512      	lsls	r2, r2, #20
 800894a:	430a      	orrs	r2, r1
 800894c:	431a      	orrs	r2, r3
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	1e59      	subs	r1, r3, #1
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	3b01      	subs	r3, #1
 8008966:	011b      	lsls	r3, r3, #4
 8008968:	4319      	orrs	r1, r3
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	3b01      	subs	r3, #1
 8008970:	021b      	lsls	r3, r3, #8
 8008972:	4319      	orrs	r1, r3
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	3b01      	subs	r3, #1
 800897a:	041b      	lsls	r3, r3, #16
 800897c:	4319      	orrs	r1, r3
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	699b      	ldr	r3, [r3, #24]
 8008982:	3b01      	subs	r3, #1
 8008984:	061b      	lsls	r3, r3, #24
 8008986:	430b      	orrs	r3, r1
 8008988:	431a      	orrs	r2, r3
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3714      	adds	r7, #20
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b086      	sub	sp, #24
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80089a8:	2300      	movs	r3, #0
 80089aa:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	0d9b      	lsrs	r3, r3, #22
 80089b2:	059b      	lsls	r3, r3, #22
 80089b4:	68ba      	ldr	r2, [r7, #8]
 80089b6:	6811      	ldr	r1, [r2, #0]
 80089b8:	68ba      	ldr	r2, [r7, #8]
 80089ba:	6852      	ldr	r2, [r2, #4]
 80089bc:	4311      	orrs	r1, r2
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	6892      	ldr	r2, [r2, #8]
 80089c2:	3a01      	subs	r2, #1
 80089c4:	0152      	lsls	r2, r2, #5
 80089c6:	4311      	orrs	r1, r2
 80089c8:	68ba      	ldr	r2, [r7, #8]
 80089ca:	68d2      	ldr	r2, [r2, #12]
 80089cc:	0252      	lsls	r2, r2, #9
 80089ce:	430a      	orrs	r2, r1
 80089d0:	431a      	orrs	r2, r3
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80089d6:	f7fb f82d 	bl	8003a34 <HAL_GetTick>
 80089da:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80089dc:	e010      	b.n	8008a00 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e4:	d00c      	beq.n	8008a00 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d007      	beq.n	80089fc <FMC_SDRAM_SendCommand+0x60>
 80089ec:	f7fb f822 	bl	8003a34 <HAL_GetTick>
 80089f0:	4602      	mov	r2, r0
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d201      	bcs.n	8008a00 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80089fc:	2303      	movs	r3, #3
 80089fe:	e006      	b.n	8008a0e <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	699b      	ldr	r3, [r3, #24]
 8008a04:	f003 0320 	and.w	r3, r3, #32
 8008a08:	2b20      	cmp	r3, #32
 8008a0a:	d0e8      	beq.n	80089de <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3718      	adds	r7, #24
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008a16:	b480      	push	{r7}
 8008a18:	b083      	sub	sp, #12
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	695b      	ldr	r3, [r3, #20]
 8008a24:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008a28:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8008a2c:	683a      	ldr	r2, [r7, #0]
 8008a2e:	0052      	lsls	r2, r2, #1
 8008a30:	431a      	orrs	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a44:	b084      	sub	sp, #16
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b084      	sub	sp, #16
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
 8008a4e:	f107 001c 	add.w	r0, r7, #28
 8008a52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d122      	bne.n	8008aa2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008a70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d105      	bne.n	8008a96 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f001 fbee 	bl	800a278 <USB_CoreReset>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	73fb      	strb	r3, [r7, #15]
 8008aa0:	e01a      	b.n	8008ad8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f001 fbe2 	bl	800a278 <USB_CoreReset>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d106      	bne.n	8008acc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	639a      	str	r2, [r3, #56]	; 0x38
 8008aca:	e005      	b.n	8008ad8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d10b      	bne.n	8008af6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	f043 0206 	orr.w	r2, r3, #6
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	f043 0220 	orr.w	r2, r3, #32
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3710      	adds	r7, #16
 8008afc:	46bd      	mov	sp, r7
 8008afe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b02:	b004      	add	sp, #16
 8008b04:	4770      	bx	lr
	...

08008b08 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b087      	sub	sp, #28
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	4613      	mov	r3, r2
 8008b14:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008b16:	79fb      	ldrb	r3, [r7, #7]
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d165      	bne.n	8008be8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	4a41      	ldr	r2, [pc, #260]	; (8008c24 <USB_SetTurnaroundTime+0x11c>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d906      	bls.n	8008b32 <USB_SetTurnaroundTime+0x2a>
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	4a40      	ldr	r2, [pc, #256]	; (8008c28 <USB_SetTurnaroundTime+0x120>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d202      	bcs.n	8008b32 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008b2c:	230f      	movs	r3, #15
 8008b2e:	617b      	str	r3, [r7, #20]
 8008b30:	e062      	b.n	8008bf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	4a3c      	ldr	r2, [pc, #240]	; (8008c28 <USB_SetTurnaroundTime+0x120>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d306      	bcc.n	8008b48 <USB_SetTurnaroundTime+0x40>
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	4a3b      	ldr	r2, [pc, #236]	; (8008c2c <USB_SetTurnaroundTime+0x124>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d202      	bcs.n	8008b48 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008b42:	230e      	movs	r3, #14
 8008b44:	617b      	str	r3, [r7, #20]
 8008b46:	e057      	b.n	8008bf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	4a38      	ldr	r2, [pc, #224]	; (8008c2c <USB_SetTurnaroundTime+0x124>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d306      	bcc.n	8008b5e <USB_SetTurnaroundTime+0x56>
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	4a37      	ldr	r2, [pc, #220]	; (8008c30 <USB_SetTurnaroundTime+0x128>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d202      	bcs.n	8008b5e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008b58:	230d      	movs	r3, #13
 8008b5a:	617b      	str	r3, [r7, #20]
 8008b5c:	e04c      	b.n	8008bf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	4a33      	ldr	r2, [pc, #204]	; (8008c30 <USB_SetTurnaroundTime+0x128>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d306      	bcc.n	8008b74 <USB_SetTurnaroundTime+0x6c>
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	4a32      	ldr	r2, [pc, #200]	; (8008c34 <USB_SetTurnaroundTime+0x12c>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d802      	bhi.n	8008b74 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008b6e:	230c      	movs	r3, #12
 8008b70:	617b      	str	r3, [r7, #20]
 8008b72:	e041      	b.n	8008bf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	4a2f      	ldr	r2, [pc, #188]	; (8008c34 <USB_SetTurnaroundTime+0x12c>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d906      	bls.n	8008b8a <USB_SetTurnaroundTime+0x82>
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	4a2e      	ldr	r2, [pc, #184]	; (8008c38 <USB_SetTurnaroundTime+0x130>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d802      	bhi.n	8008b8a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008b84:	230b      	movs	r3, #11
 8008b86:	617b      	str	r3, [r7, #20]
 8008b88:	e036      	b.n	8008bf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	4a2a      	ldr	r2, [pc, #168]	; (8008c38 <USB_SetTurnaroundTime+0x130>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d906      	bls.n	8008ba0 <USB_SetTurnaroundTime+0x98>
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	4a29      	ldr	r2, [pc, #164]	; (8008c3c <USB_SetTurnaroundTime+0x134>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d802      	bhi.n	8008ba0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008b9a:	230a      	movs	r3, #10
 8008b9c:	617b      	str	r3, [r7, #20]
 8008b9e:	e02b      	b.n	8008bf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	4a26      	ldr	r2, [pc, #152]	; (8008c3c <USB_SetTurnaroundTime+0x134>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d906      	bls.n	8008bb6 <USB_SetTurnaroundTime+0xae>
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	4a25      	ldr	r2, [pc, #148]	; (8008c40 <USB_SetTurnaroundTime+0x138>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d202      	bcs.n	8008bb6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008bb0:	2309      	movs	r3, #9
 8008bb2:	617b      	str	r3, [r7, #20]
 8008bb4:	e020      	b.n	8008bf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	4a21      	ldr	r2, [pc, #132]	; (8008c40 <USB_SetTurnaroundTime+0x138>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d306      	bcc.n	8008bcc <USB_SetTurnaroundTime+0xc4>
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	4a20      	ldr	r2, [pc, #128]	; (8008c44 <USB_SetTurnaroundTime+0x13c>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d802      	bhi.n	8008bcc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008bc6:	2308      	movs	r3, #8
 8008bc8:	617b      	str	r3, [r7, #20]
 8008bca:	e015      	b.n	8008bf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	4a1d      	ldr	r2, [pc, #116]	; (8008c44 <USB_SetTurnaroundTime+0x13c>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d906      	bls.n	8008be2 <USB_SetTurnaroundTime+0xda>
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	4a1c      	ldr	r2, [pc, #112]	; (8008c48 <USB_SetTurnaroundTime+0x140>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d202      	bcs.n	8008be2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008bdc:	2307      	movs	r3, #7
 8008bde:	617b      	str	r3, [r7, #20]
 8008be0:	e00a      	b.n	8008bf8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008be2:	2306      	movs	r3, #6
 8008be4:	617b      	str	r3, [r7, #20]
 8008be6:	e007      	b.n	8008bf8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008be8:	79fb      	ldrb	r3, [r7, #7]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d102      	bne.n	8008bf4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008bee:	2309      	movs	r3, #9
 8008bf0:	617b      	str	r3, [r7, #20]
 8008bf2:	e001      	b.n	8008bf8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008bf4:	2309      	movs	r3, #9
 8008bf6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	68da      	ldr	r2, [r3, #12]
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	029b      	lsls	r3, r3, #10
 8008c0c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008c10:	431a      	orrs	r2, r3
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	371c      	adds	r7, #28
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr
 8008c24:	00d8acbf 	.word	0x00d8acbf
 8008c28:	00e4e1c0 	.word	0x00e4e1c0
 8008c2c:	00f42400 	.word	0x00f42400
 8008c30:	01067380 	.word	0x01067380
 8008c34:	011a499f 	.word	0x011a499f
 8008c38:	01312cff 	.word	0x01312cff
 8008c3c:	014ca43f 	.word	0x014ca43f
 8008c40:	016e3600 	.word	0x016e3600
 8008c44:	01a6ab1f 	.word	0x01a6ab1f
 8008c48:	01e84800 	.word	0x01e84800

08008c4c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	f043 0201 	orr.w	r2, r3, #1
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	370c      	adds	r7, #12
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr

08008c6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c6e:	b480      	push	{r7}
 8008c70:	b083      	sub	sp, #12
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	f023 0201 	bic.w	r2, r3, #1
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	460b      	mov	r3, r1
 8008c9a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008cac:	78fb      	ldrb	r3, [r7, #3]
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d115      	bne.n	8008cde <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008cbe:	2001      	movs	r0, #1
 8008cc0:	f7fa fec4 	bl	8003a4c <HAL_Delay>
      ms++;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f001 fa45 	bl	800a15a <USB_GetMode>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d01e      	beq.n	8008d14 <USB_SetCurrentMode+0x84>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2b31      	cmp	r3, #49	; 0x31
 8008cda:	d9f0      	bls.n	8008cbe <USB_SetCurrentMode+0x2e>
 8008cdc:	e01a      	b.n	8008d14 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008cde:	78fb      	ldrb	r3, [r7, #3]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d115      	bne.n	8008d10 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008cf0:	2001      	movs	r0, #1
 8008cf2:	f7fa feab 	bl	8003a4c <HAL_Delay>
      ms++;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f001 fa2c 	bl	800a15a <USB_GetMode>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d005      	beq.n	8008d14 <USB_SetCurrentMode+0x84>
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2b31      	cmp	r3, #49	; 0x31
 8008d0c:	d9f0      	bls.n	8008cf0 <USB_SetCurrentMode+0x60>
 8008d0e:	e001      	b.n	8008d14 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008d10:	2301      	movs	r3, #1
 8008d12:	e005      	b.n	8008d20 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2b32      	cmp	r3, #50	; 0x32
 8008d18:	d101      	bne.n	8008d1e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e000      	b.n	8008d20 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d28:	b084      	sub	sp, #16
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b086      	sub	sp, #24
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008d36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008d42:	2300      	movs	r3, #0
 8008d44:	613b      	str	r3, [r7, #16]
 8008d46:	e009      	b.n	8008d5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	3340      	adds	r3, #64	; 0x40
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	4413      	add	r3, r2
 8008d52:	2200      	movs	r2, #0
 8008d54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	613b      	str	r3, [r7, #16]
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	2b0e      	cmp	r3, #14
 8008d60:	d9f2      	bls.n	8008d48 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d11c      	bne.n	8008da2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d76:	f043 0302 	orr.w	r3, r3, #2
 8008d7a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d80:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d8c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d98:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	639a      	str	r2, [r3, #56]	; 0x38
 8008da0:	e00b      	b.n	8008dba <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dcc:	4619      	mov	r1, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	680b      	ldr	r3, [r1, #0]
 8008dd8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d10c      	bne.n	8008dfa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d104      	bne.n	8008df0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008de6:	2100      	movs	r1, #0
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 f965 	bl	80090b8 <USB_SetDevSpeed>
 8008dee:	e008      	b.n	8008e02 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008df0:	2101      	movs	r1, #1
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 f960 	bl	80090b8 <USB_SetDevSpeed>
 8008df8:	e003      	b.n	8008e02 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008dfa:	2103      	movs	r1, #3
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f95b 	bl	80090b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008e02:	2110      	movs	r1, #16
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 f8f3 	bl	8008ff0 <USB_FlushTxFifo>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d001      	beq.n	8008e14 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 f91f 	bl	8009058 <USB_FlushRxFifo>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d001      	beq.n	8008e24 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008e20:	2301      	movs	r3, #1
 8008e22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e36:	461a      	mov	r2, r3
 8008e38:	2300      	movs	r3, #0
 8008e3a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e42:	461a      	mov	r2, r3
 8008e44:	2300      	movs	r3, #0
 8008e46:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e48:	2300      	movs	r3, #0
 8008e4a:	613b      	str	r3, [r7, #16]
 8008e4c:	e043      	b.n	8008ed6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	015a      	lsls	r2, r3, #5
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	4413      	add	r3, r2
 8008e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e64:	d118      	bne.n	8008e98 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d10a      	bne.n	8008e82 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	015a      	lsls	r2, r3, #5
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	4413      	add	r3, r2
 8008e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e78:	461a      	mov	r2, r3
 8008e7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e7e:	6013      	str	r3, [r2, #0]
 8008e80:	e013      	b.n	8008eaa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	015a      	lsls	r2, r3, #5
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	4413      	add	r3, r2
 8008e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e8e:	461a      	mov	r2, r3
 8008e90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e94:	6013      	str	r3, [r2, #0]
 8008e96:	e008      	b.n	8008eaa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	015a      	lsls	r2, r3, #5
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	015a      	lsls	r2, r3, #5
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	2300      	movs	r3, #0
 8008eba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	015a      	lsls	r2, r3, #5
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec8:	461a      	mov	r2, r3
 8008eca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ece:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	613b      	str	r3, [r7, #16]
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed8:	693a      	ldr	r2, [r7, #16]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d3b7      	bcc.n	8008e4e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ede:	2300      	movs	r3, #0
 8008ee0:	613b      	str	r3, [r7, #16]
 8008ee2:	e043      	b.n	8008f6c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	015a      	lsls	r2, r3, #5
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	4413      	add	r3, r2
 8008eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008efa:	d118      	bne.n	8008f2e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d10a      	bne.n	8008f18 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	015a      	lsls	r2, r3, #5
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	4413      	add	r3, r2
 8008f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f0e:	461a      	mov	r2, r3
 8008f10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f14:	6013      	str	r3, [r2, #0]
 8008f16:	e013      	b.n	8008f40 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	015a      	lsls	r2, r3, #5
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	4413      	add	r3, r2
 8008f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f24:	461a      	mov	r2, r3
 8008f26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008f2a:	6013      	str	r3, [r2, #0]
 8008f2c:	e008      	b.n	8008f40 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	015a      	lsls	r2, r3, #5
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	4413      	add	r3, r2
 8008f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	015a      	lsls	r2, r3, #5
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	4413      	add	r3, r2
 8008f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	2300      	movs	r3, #0
 8008f50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	015a      	lsls	r2, r3, #5
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	4413      	add	r3, r2
 8008f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f5e:	461a      	mov	r2, r3
 8008f60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	613b      	str	r3, [r7, #16]
 8008f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d3b7      	bcc.n	8008ee4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f7a:	691b      	ldr	r3, [r3, #16]
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f86:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008f94:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d105      	bne.n	8008fa8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	699b      	ldr	r3, [r3, #24]
 8008fa0:	f043 0210 	orr.w	r2, r3, #16
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	699a      	ldr	r2, [r3, #24]
 8008fac:	4b0f      	ldr	r3, [pc, #60]	; (8008fec <USB_DevInit+0x2c4>)
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d005      	beq.n	8008fc6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	699b      	ldr	r3, [r3, #24]
 8008fbe:	f043 0208 	orr.w	r2, r3, #8
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d107      	bne.n	8008fdc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	699b      	ldr	r3, [r3, #24]
 8008fd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fd4:	f043 0304 	orr.w	r3, r3, #4
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3718      	adds	r7, #24
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fe8:	b004      	add	sp, #16
 8008fea:	4770      	bx	lr
 8008fec:	803c3800 	.word	0x803c3800

08008ff0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	3301      	adds	r3, #1
 8009002:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	4a13      	ldr	r2, [pc, #76]	; (8009054 <USB_FlushTxFifo+0x64>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d901      	bls.n	8009010 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800900c:	2303      	movs	r3, #3
 800900e:	e01b      	b.n	8009048 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	2b00      	cmp	r3, #0
 8009016:	daf2      	bge.n	8008ffe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009018:	2300      	movs	r3, #0
 800901a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	019b      	lsls	r3, r3, #6
 8009020:	f043 0220 	orr.w	r2, r3, #32
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	3301      	adds	r3, #1
 800902c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	4a08      	ldr	r2, [pc, #32]	; (8009054 <USB_FlushTxFifo+0x64>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d901      	bls.n	800903a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009036:	2303      	movs	r3, #3
 8009038:	e006      	b.n	8009048 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	f003 0320 	and.w	r3, r3, #32
 8009042:	2b20      	cmp	r3, #32
 8009044:	d0f0      	beq.n	8009028 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3714      	adds	r7, #20
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr
 8009054:	00030d40 	.word	0x00030d40

08009058 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009060:	2300      	movs	r3, #0
 8009062:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	3301      	adds	r3, #1
 8009068:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	4a11      	ldr	r2, [pc, #68]	; (80090b4 <USB_FlushRxFifo+0x5c>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d901      	bls.n	8009076 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009072:	2303      	movs	r3, #3
 8009074:	e018      	b.n	80090a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	691b      	ldr	r3, [r3, #16]
 800907a:	2b00      	cmp	r3, #0
 800907c:	daf2      	bge.n	8009064 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800907e:	2300      	movs	r3, #0
 8009080:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2210      	movs	r2, #16
 8009086:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	3301      	adds	r3, #1
 800908c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	4a08      	ldr	r2, [pc, #32]	; (80090b4 <USB_FlushRxFifo+0x5c>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d901      	bls.n	800909a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009096:	2303      	movs	r3, #3
 8009098:	e006      	b.n	80090a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	691b      	ldr	r3, [r3, #16]
 800909e:	f003 0310 	and.w	r3, r3, #16
 80090a2:	2b10      	cmp	r3, #16
 80090a4:	d0f0      	beq.n	8009088 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3714      	adds	r7, #20
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr
 80090b4:	00030d40 	.word	0x00030d40

080090b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	460b      	mov	r3, r1
 80090c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	78fb      	ldrb	r3, [r7, #3]
 80090d2:	68f9      	ldr	r1, [r7, #12]
 80090d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090d8:	4313      	orrs	r3, r2
 80090da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3714      	adds	r7, #20
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr

080090ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80090ea:	b480      	push	{r7}
 80090ec:	b087      	sub	sp, #28
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	f003 0306 	and.w	r3, r3, #6
 8009102:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d102      	bne.n	8009110 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800910a:	2300      	movs	r3, #0
 800910c:	75fb      	strb	r3, [r7, #23]
 800910e:	e00a      	b.n	8009126 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2b02      	cmp	r3, #2
 8009114:	d002      	beq.n	800911c <USB_GetDevSpeed+0x32>
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2b06      	cmp	r3, #6
 800911a:	d102      	bne.n	8009122 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800911c:	2302      	movs	r3, #2
 800911e:	75fb      	strb	r3, [r7, #23]
 8009120:	e001      	b.n	8009126 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009122:	230f      	movs	r3, #15
 8009124:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009126:	7dfb      	ldrb	r3, [r7, #23]
}
 8009128:	4618      	mov	r0, r3
 800912a:	371c      	adds	r7, #28
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	785b      	ldrb	r3, [r3, #1]
 800914c:	2b01      	cmp	r3, #1
 800914e:	d13a      	bne.n	80091c6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009156:	69da      	ldr	r2, [r3, #28]
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	f003 030f 	and.w	r3, r3, #15
 8009160:	2101      	movs	r1, #1
 8009162:	fa01 f303 	lsl.w	r3, r1, r3
 8009166:	b29b      	uxth	r3, r3
 8009168:	68f9      	ldr	r1, [r7, #12]
 800916a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800916e:	4313      	orrs	r3, r2
 8009170:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	015a      	lsls	r2, r3, #5
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	4413      	add	r3, r2
 800917a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009184:	2b00      	cmp	r3, #0
 8009186:	d155      	bne.n	8009234 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	015a      	lsls	r2, r3, #5
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	4413      	add	r3, r2
 8009190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	791b      	ldrb	r3, [r3, #4]
 80091a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80091a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	059b      	lsls	r3, r3, #22
 80091aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80091ac:	4313      	orrs	r3, r2
 80091ae:	68ba      	ldr	r2, [r7, #8]
 80091b0:	0151      	lsls	r1, r2, #5
 80091b2:	68fa      	ldr	r2, [r7, #12]
 80091b4:	440a      	add	r2, r1
 80091b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091c2:	6013      	str	r3, [r2, #0]
 80091c4:	e036      	b.n	8009234 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091cc:	69da      	ldr	r2, [r3, #28]
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	f003 030f 	and.w	r3, r3, #15
 80091d6:	2101      	movs	r1, #1
 80091d8:	fa01 f303 	lsl.w	r3, r1, r3
 80091dc:	041b      	lsls	r3, r3, #16
 80091de:	68f9      	ldr	r1, [r7, #12]
 80091e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091e4:	4313      	orrs	r3, r2
 80091e6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	015a      	lsls	r2, r3, #5
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	4413      	add	r3, r2
 80091f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d11a      	bne.n	8009234 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	015a      	lsls	r2, r3, #5
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	4413      	add	r3, r2
 8009206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	791b      	ldrb	r3, [r3, #4]
 8009218:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800921a:	430b      	orrs	r3, r1
 800921c:	4313      	orrs	r3, r2
 800921e:	68ba      	ldr	r2, [r7, #8]
 8009220:	0151      	lsls	r1, r2, #5
 8009222:	68fa      	ldr	r2, [r7, #12]
 8009224:	440a      	add	r2, r1
 8009226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800922a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800922e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009232:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3714      	adds	r7, #20
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr
	...

08009244 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	785b      	ldrb	r3, [r3, #1]
 800925c:	2b01      	cmp	r3, #1
 800925e:	d161      	bne.n	8009324 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	015a      	lsls	r2, r3, #5
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	4413      	add	r3, r2
 8009268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009272:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009276:	d11f      	bne.n	80092b8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	015a      	lsls	r2, r3, #5
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	4413      	add	r3, r2
 8009280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	68ba      	ldr	r2, [r7, #8]
 8009288:	0151      	lsls	r1, r2, #5
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	440a      	add	r2, r1
 800928e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009292:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009296:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	015a      	lsls	r2, r3, #5
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	4413      	add	r3, r2
 80092a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	68ba      	ldr	r2, [r7, #8]
 80092a8:	0151      	lsls	r1, r2, #5
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	440a      	add	r2, r1
 80092ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	f003 030f 	and.w	r3, r3, #15
 80092c8:	2101      	movs	r1, #1
 80092ca:	fa01 f303 	lsl.w	r3, r1, r3
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	43db      	mvns	r3, r3
 80092d2:	68f9      	ldr	r1, [r7, #12]
 80092d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092d8:	4013      	ands	r3, r2
 80092da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092e2:	69da      	ldr	r2, [r3, #28]
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	f003 030f 	and.w	r3, r3, #15
 80092ec:	2101      	movs	r1, #1
 80092ee:	fa01 f303 	lsl.w	r3, r1, r3
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	43db      	mvns	r3, r3
 80092f6:	68f9      	ldr	r1, [r7, #12]
 80092f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092fc:	4013      	ands	r3, r2
 80092fe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	015a      	lsls	r2, r3, #5
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	4413      	add	r3, r2
 8009308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	0159      	lsls	r1, r3, #5
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	440b      	add	r3, r1
 8009316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800931a:	4619      	mov	r1, r3
 800931c:	4b35      	ldr	r3, [pc, #212]	; (80093f4 <USB_DeactivateEndpoint+0x1b0>)
 800931e:	4013      	ands	r3, r2
 8009320:	600b      	str	r3, [r1, #0]
 8009322:	e060      	b.n	80093e6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	015a      	lsls	r2, r3, #5
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	4413      	add	r3, r2
 800932c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009336:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800933a:	d11f      	bne.n	800937c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	015a      	lsls	r2, r3, #5
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	4413      	add	r3, r2
 8009344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68ba      	ldr	r2, [r7, #8]
 800934c:	0151      	lsls	r1, r2, #5
 800934e:	68fa      	ldr	r2, [r7, #12]
 8009350:	440a      	add	r2, r1
 8009352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009356:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800935a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	015a      	lsls	r2, r3, #5
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	4413      	add	r3, r2
 8009364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68ba      	ldr	r2, [r7, #8]
 800936c:	0151      	lsls	r1, r2, #5
 800936e:	68fa      	ldr	r2, [r7, #12]
 8009370:	440a      	add	r2, r1
 8009372:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009376:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800937a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	f003 030f 	and.w	r3, r3, #15
 800938c:	2101      	movs	r1, #1
 800938e:	fa01 f303 	lsl.w	r3, r1, r3
 8009392:	041b      	lsls	r3, r3, #16
 8009394:	43db      	mvns	r3, r3
 8009396:	68f9      	ldr	r1, [r7, #12]
 8009398:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800939c:	4013      	ands	r3, r2
 800939e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093a6:	69da      	ldr	r2, [r3, #28]
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	f003 030f 	and.w	r3, r3, #15
 80093b0:	2101      	movs	r1, #1
 80093b2:	fa01 f303 	lsl.w	r3, r1, r3
 80093b6:	041b      	lsls	r3, r3, #16
 80093b8:	43db      	mvns	r3, r3
 80093ba:	68f9      	ldr	r1, [r7, #12]
 80093bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093c0:	4013      	ands	r3, r2
 80093c2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	015a      	lsls	r2, r3, #5
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	4413      	add	r3, r2
 80093cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	0159      	lsls	r1, r3, #5
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	440b      	add	r3, r1
 80093da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093de:	4619      	mov	r1, r3
 80093e0:	4b05      	ldr	r3, [pc, #20]	; (80093f8 <USB_DeactivateEndpoint+0x1b4>)
 80093e2:	4013      	ands	r3, r2
 80093e4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80093e6:	2300      	movs	r3, #0
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3714      	adds	r7, #20
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr
 80093f4:	ec337800 	.word	0xec337800
 80093f8:	eff37800 	.word	0xeff37800

080093fc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b08a      	sub	sp, #40	; 0x28
 8009400:	af02      	add	r7, sp, #8
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	4613      	mov	r3, r2
 8009408:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	785b      	ldrb	r3, [r3, #1]
 8009418:	2b01      	cmp	r3, #1
 800941a:	f040 815c 	bne.w	80096d6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	699b      	ldr	r3, [r3, #24]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d132      	bne.n	800948c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	015a      	lsls	r2, r3, #5
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	4413      	add	r3, r2
 800942e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	69ba      	ldr	r2, [r7, #24]
 8009436:	0151      	lsls	r1, r2, #5
 8009438:	69fa      	ldr	r2, [r7, #28]
 800943a:	440a      	add	r2, r1
 800943c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009440:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009444:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009448:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	015a      	lsls	r2, r3, #5
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	4413      	add	r3, r2
 8009452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009456:	691b      	ldr	r3, [r3, #16]
 8009458:	69ba      	ldr	r2, [r7, #24]
 800945a:	0151      	lsls	r1, r2, #5
 800945c:	69fa      	ldr	r2, [r7, #28]
 800945e:	440a      	add	r2, r1
 8009460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009464:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009468:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	015a      	lsls	r2, r3, #5
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	4413      	add	r3, r2
 8009472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009476:	691b      	ldr	r3, [r3, #16]
 8009478:	69ba      	ldr	r2, [r7, #24]
 800947a:	0151      	lsls	r1, r2, #5
 800947c:	69fa      	ldr	r2, [r7, #28]
 800947e:	440a      	add	r2, r1
 8009480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009484:	0cdb      	lsrs	r3, r3, #19
 8009486:	04db      	lsls	r3, r3, #19
 8009488:	6113      	str	r3, [r2, #16]
 800948a:	e074      	b.n	8009576 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	015a      	lsls	r2, r3, #5
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	4413      	add	r3, r2
 8009494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	69ba      	ldr	r2, [r7, #24]
 800949c:	0151      	lsls	r1, r2, #5
 800949e:	69fa      	ldr	r2, [r7, #28]
 80094a0:	440a      	add	r2, r1
 80094a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094a6:	0cdb      	lsrs	r3, r3, #19
 80094a8:	04db      	lsls	r3, r3, #19
 80094aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	015a      	lsls	r2, r3, #5
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	4413      	add	r3, r2
 80094b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	69ba      	ldr	r2, [r7, #24]
 80094bc:	0151      	lsls	r1, r2, #5
 80094be:	69fa      	ldr	r2, [r7, #28]
 80094c0:	440a      	add	r2, r1
 80094c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80094ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80094ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	015a      	lsls	r2, r3, #5
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	4413      	add	r3, r2
 80094d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094dc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	6999      	ldr	r1, [r3, #24]
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	440b      	add	r3, r1
 80094e8:	1e59      	subs	r1, r3, #1
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80094f2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80094f4:	4b9d      	ldr	r3, [pc, #628]	; (800976c <USB_EPStartXfer+0x370>)
 80094f6:	400b      	ands	r3, r1
 80094f8:	69b9      	ldr	r1, [r7, #24]
 80094fa:	0148      	lsls	r0, r1, #5
 80094fc:	69f9      	ldr	r1, [r7, #28]
 80094fe:	4401      	add	r1, r0
 8009500:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009504:	4313      	orrs	r3, r2
 8009506:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009508:	69bb      	ldr	r3, [r7, #24]
 800950a:	015a      	lsls	r2, r3, #5
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	4413      	add	r3, r2
 8009510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009514:	691a      	ldr	r2, [r3, #16]
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	699b      	ldr	r3, [r3, #24]
 800951a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800951e:	69b9      	ldr	r1, [r7, #24]
 8009520:	0148      	lsls	r0, r1, #5
 8009522:	69f9      	ldr	r1, [r7, #28]
 8009524:	4401      	add	r1, r0
 8009526:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800952a:	4313      	orrs	r3, r2
 800952c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	791b      	ldrb	r3, [r3, #4]
 8009532:	2b01      	cmp	r3, #1
 8009534:	d11f      	bne.n	8009576 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	015a      	lsls	r2, r3, #5
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	4413      	add	r3, r2
 800953e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009542:	691b      	ldr	r3, [r3, #16]
 8009544:	69ba      	ldr	r2, [r7, #24]
 8009546:	0151      	lsls	r1, r2, #5
 8009548:	69fa      	ldr	r2, [r7, #28]
 800954a:	440a      	add	r2, r1
 800954c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009550:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009554:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009556:	69bb      	ldr	r3, [r7, #24]
 8009558:	015a      	lsls	r2, r3, #5
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	4413      	add	r3, r2
 800955e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009562:	691b      	ldr	r3, [r3, #16]
 8009564:	69ba      	ldr	r2, [r7, #24]
 8009566:	0151      	lsls	r1, r2, #5
 8009568:	69fa      	ldr	r2, [r7, #28]
 800956a:	440a      	add	r2, r1
 800956c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009570:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009574:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009576:	79fb      	ldrb	r3, [r7, #7]
 8009578:	2b01      	cmp	r3, #1
 800957a:	d14b      	bne.n	8009614 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	695b      	ldr	r3, [r3, #20]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d009      	beq.n	8009598 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	015a      	lsls	r2, r3, #5
 8009588:	69fb      	ldr	r3, [r7, #28]
 800958a:	4413      	add	r3, r2
 800958c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009590:	461a      	mov	r2, r3
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	695b      	ldr	r3, [r3, #20]
 8009596:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	791b      	ldrb	r3, [r3, #4]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d128      	bne.n	80095f2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d110      	bne.n	80095d2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	015a      	lsls	r2, r3, #5
 80095b4:	69fb      	ldr	r3, [r7, #28]
 80095b6:	4413      	add	r3, r2
 80095b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	69ba      	ldr	r2, [r7, #24]
 80095c0:	0151      	lsls	r1, r2, #5
 80095c2:	69fa      	ldr	r2, [r7, #28]
 80095c4:	440a      	add	r2, r1
 80095c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80095ce:	6013      	str	r3, [r2, #0]
 80095d0:	e00f      	b.n	80095f2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	015a      	lsls	r2, r3, #5
 80095d6:	69fb      	ldr	r3, [r7, #28]
 80095d8:	4413      	add	r3, r2
 80095da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	69ba      	ldr	r2, [r7, #24]
 80095e2:	0151      	lsls	r1, r2, #5
 80095e4:	69fa      	ldr	r2, [r7, #28]
 80095e6:	440a      	add	r2, r1
 80095e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095f0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	015a      	lsls	r2, r3, #5
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	4413      	add	r3, r2
 80095fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	69ba      	ldr	r2, [r7, #24]
 8009602:	0151      	lsls	r1, r2, #5
 8009604:	69fa      	ldr	r2, [r7, #28]
 8009606:	440a      	add	r2, r1
 8009608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800960c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009610:	6013      	str	r3, [r2, #0]
 8009612:	e133      	b.n	800987c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009614:	69bb      	ldr	r3, [r7, #24]
 8009616:	015a      	lsls	r2, r3, #5
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	4413      	add	r3, r2
 800961c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	69ba      	ldr	r2, [r7, #24]
 8009624:	0151      	lsls	r1, r2, #5
 8009626:	69fa      	ldr	r2, [r7, #28]
 8009628:	440a      	add	r2, r1
 800962a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800962e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009632:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	791b      	ldrb	r3, [r3, #4]
 8009638:	2b01      	cmp	r3, #1
 800963a:	d015      	beq.n	8009668 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	699b      	ldr	r3, [r3, #24]
 8009640:	2b00      	cmp	r3, #0
 8009642:	f000 811b 	beq.w	800987c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800964c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	f003 030f 	and.w	r3, r3, #15
 8009656:	2101      	movs	r1, #1
 8009658:	fa01 f303 	lsl.w	r3, r1, r3
 800965c:	69f9      	ldr	r1, [r7, #28]
 800965e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009662:	4313      	orrs	r3, r2
 8009664:	634b      	str	r3, [r1, #52]	; 0x34
 8009666:	e109      	b.n	800987c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009674:	2b00      	cmp	r3, #0
 8009676:	d110      	bne.n	800969a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009678:	69bb      	ldr	r3, [r7, #24]
 800967a:	015a      	lsls	r2, r3, #5
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	4413      	add	r3, r2
 8009680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	69ba      	ldr	r2, [r7, #24]
 8009688:	0151      	lsls	r1, r2, #5
 800968a:	69fa      	ldr	r2, [r7, #28]
 800968c:	440a      	add	r2, r1
 800968e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009692:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009696:	6013      	str	r3, [r2, #0]
 8009698:	e00f      	b.n	80096ba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800969a:	69bb      	ldr	r3, [r7, #24]
 800969c:	015a      	lsls	r2, r3, #5
 800969e:	69fb      	ldr	r3, [r7, #28]
 80096a0:	4413      	add	r3, r2
 80096a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	69ba      	ldr	r2, [r7, #24]
 80096aa:	0151      	lsls	r1, r2, #5
 80096ac:	69fa      	ldr	r2, [r7, #28]
 80096ae:	440a      	add	r2, r1
 80096b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096b8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	6919      	ldr	r1, [r3, #16]
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	781a      	ldrb	r2, [r3, #0]
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	699b      	ldr	r3, [r3, #24]
 80096c6:	b298      	uxth	r0, r3
 80096c8:	79fb      	ldrb	r3, [r7, #7]
 80096ca:	9300      	str	r3, [sp, #0]
 80096cc:	4603      	mov	r3, r0
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f000 fade 	bl	8009c90 <USB_WritePacket>
 80096d4:	e0d2      	b.n	800987c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80096d6:	69bb      	ldr	r3, [r7, #24]
 80096d8:	015a      	lsls	r2, r3, #5
 80096da:	69fb      	ldr	r3, [r7, #28]
 80096dc:	4413      	add	r3, r2
 80096de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	69ba      	ldr	r2, [r7, #24]
 80096e6:	0151      	lsls	r1, r2, #5
 80096e8:	69fa      	ldr	r2, [r7, #28]
 80096ea:	440a      	add	r2, r1
 80096ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096f0:	0cdb      	lsrs	r3, r3, #19
 80096f2:	04db      	lsls	r3, r3, #19
 80096f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	015a      	lsls	r2, r3, #5
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	4413      	add	r3, r2
 80096fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009702:	691b      	ldr	r3, [r3, #16]
 8009704:	69ba      	ldr	r2, [r7, #24]
 8009706:	0151      	lsls	r1, r2, #5
 8009708:	69fa      	ldr	r2, [r7, #28]
 800970a:	440a      	add	r2, r1
 800970c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009710:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009714:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009718:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	699b      	ldr	r3, [r3, #24]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d126      	bne.n	8009770 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	015a      	lsls	r2, r3, #5
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	4413      	add	r3, r2
 800972a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800972e:	691a      	ldr	r2, [r3, #16]
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009738:	69b9      	ldr	r1, [r7, #24]
 800973a:	0148      	lsls	r0, r1, #5
 800973c:	69f9      	ldr	r1, [r7, #28]
 800973e:	4401      	add	r1, r0
 8009740:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009744:	4313      	orrs	r3, r2
 8009746:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	015a      	lsls	r2, r3, #5
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	4413      	add	r3, r2
 8009750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009754:	691b      	ldr	r3, [r3, #16]
 8009756:	69ba      	ldr	r2, [r7, #24]
 8009758:	0151      	lsls	r1, r2, #5
 800975a:	69fa      	ldr	r2, [r7, #28]
 800975c:	440a      	add	r2, r1
 800975e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009762:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009766:	6113      	str	r3, [r2, #16]
 8009768:	e03a      	b.n	80097e0 <USB_EPStartXfer+0x3e4>
 800976a:	bf00      	nop
 800976c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	699a      	ldr	r2, [r3, #24]
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	4413      	add	r3, r2
 800977a:	1e5a      	subs	r2, r3, #1
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	fbb2 f3f3 	udiv	r3, r2, r3
 8009784:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	8afa      	ldrh	r2, [r7, #22]
 800978c:	fb03 f202 	mul.w	r2, r3, r2
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	015a      	lsls	r2, r3, #5
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	4413      	add	r3, r2
 800979c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a0:	691a      	ldr	r2, [r3, #16]
 80097a2:	8afb      	ldrh	r3, [r7, #22]
 80097a4:	04d9      	lsls	r1, r3, #19
 80097a6:	4b38      	ldr	r3, [pc, #224]	; (8009888 <USB_EPStartXfer+0x48c>)
 80097a8:	400b      	ands	r3, r1
 80097aa:	69b9      	ldr	r1, [r7, #24]
 80097ac:	0148      	lsls	r0, r1, #5
 80097ae:	69f9      	ldr	r1, [r7, #28]
 80097b0:	4401      	add	r1, r0
 80097b2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80097b6:	4313      	orrs	r3, r2
 80097b8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80097ba:	69bb      	ldr	r3, [r7, #24]
 80097bc:	015a      	lsls	r2, r3, #5
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	4413      	add	r3, r2
 80097c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097c6:	691a      	ldr	r2, [r3, #16]
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	69db      	ldr	r3, [r3, #28]
 80097cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097d0:	69b9      	ldr	r1, [r7, #24]
 80097d2:	0148      	lsls	r0, r1, #5
 80097d4:	69f9      	ldr	r1, [r7, #28]
 80097d6:	4401      	add	r1, r0
 80097d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80097dc:	4313      	orrs	r3, r2
 80097de:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80097e0:	79fb      	ldrb	r3, [r7, #7]
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d10d      	bne.n	8009802 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d009      	beq.n	8009802 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	6919      	ldr	r1, [r3, #16]
 80097f2:	69bb      	ldr	r3, [r7, #24]
 80097f4:	015a      	lsls	r2, r3, #5
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	4413      	add	r3, r2
 80097fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097fe:	460a      	mov	r2, r1
 8009800:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	791b      	ldrb	r3, [r3, #4]
 8009806:	2b01      	cmp	r3, #1
 8009808:	d128      	bne.n	800985c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009816:	2b00      	cmp	r3, #0
 8009818:	d110      	bne.n	800983c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	015a      	lsls	r2, r3, #5
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	4413      	add	r3, r2
 8009822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	69ba      	ldr	r2, [r7, #24]
 800982a:	0151      	lsls	r1, r2, #5
 800982c:	69fa      	ldr	r2, [r7, #28]
 800982e:	440a      	add	r2, r1
 8009830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009834:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009838:	6013      	str	r3, [r2, #0]
 800983a:	e00f      	b.n	800985c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800983c:	69bb      	ldr	r3, [r7, #24]
 800983e:	015a      	lsls	r2, r3, #5
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	4413      	add	r3, r2
 8009844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	69ba      	ldr	r2, [r7, #24]
 800984c:	0151      	lsls	r1, r2, #5
 800984e:	69fa      	ldr	r2, [r7, #28]
 8009850:	440a      	add	r2, r1
 8009852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800985a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800985c:	69bb      	ldr	r3, [r7, #24]
 800985e:	015a      	lsls	r2, r3, #5
 8009860:	69fb      	ldr	r3, [r7, #28]
 8009862:	4413      	add	r3, r2
 8009864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	69ba      	ldr	r2, [r7, #24]
 800986c:	0151      	lsls	r1, r2, #5
 800986e:	69fa      	ldr	r2, [r7, #28]
 8009870:	440a      	add	r2, r1
 8009872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009876:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800987a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3720      	adds	r7, #32
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	1ff80000 	.word	0x1ff80000

0800988c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800988c:	b480      	push	{r7}
 800988e:	b087      	sub	sp, #28
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	4613      	mov	r3, r2
 8009898:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	785b      	ldrb	r3, [r3, #1]
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	f040 80ce 	bne.w	8009a4a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	699b      	ldr	r3, [r3, #24]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d132      	bne.n	800991c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	015a      	lsls	r2, r3, #5
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	4413      	add	r3, r2
 80098be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	693a      	ldr	r2, [r7, #16]
 80098c6:	0151      	lsls	r1, r2, #5
 80098c8:	697a      	ldr	r2, [r7, #20]
 80098ca:	440a      	add	r2, r1
 80098cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80098d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80098d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	015a      	lsls	r2, r3, #5
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	4413      	add	r3, r2
 80098e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	693a      	ldr	r2, [r7, #16]
 80098ea:	0151      	lsls	r1, r2, #5
 80098ec:	697a      	ldr	r2, [r7, #20]
 80098ee:	440a      	add	r2, r1
 80098f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	015a      	lsls	r2, r3, #5
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	4413      	add	r3, r2
 8009902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009906:	691b      	ldr	r3, [r3, #16]
 8009908:	693a      	ldr	r2, [r7, #16]
 800990a:	0151      	lsls	r1, r2, #5
 800990c:	697a      	ldr	r2, [r7, #20]
 800990e:	440a      	add	r2, r1
 8009910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009914:	0cdb      	lsrs	r3, r3, #19
 8009916:	04db      	lsls	r3, r3, #19
 8009918:	6113      	str	r3, [r2, #16]
 800991a:	e04e      	b.n	80099ba <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	015a      	lsls	r2, r3, #5
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	4413      	add	r3, r2
 8009924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009928:	691b      	ldr	r3, [r3, #16]
 800992a:	693a      	ldr	r2, [r7, #16]
 800992c:	0151      	lsls	r1, r2, #5
 800992e:	697a      	ldr	r2, [r7, #20]
 8009930:	440a      	add	r2, r1
 8009932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009936:	0cdb      	lsrs	r3, r3, #19
 8009938:	04db      	lsls	r3, r3, #19
 800993a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	015a      	lsls	r2, r3, #5
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	4413      	add	r3, r2
 8009944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	693a      	ldr	r2, [r7, #16]
 800994c:	0151      	lsls	r1, r2, #5
 800994e:	697a      	ldr	r2, [r7, #20]
 8009950:	440a      	add	r2, r1
 8009952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009956:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800995a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800995e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	699a      	ldr	r2, [r3, #24]
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	429a      	cmp	r2, r3
 800996a:	d903      	bls.n	8009974 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	68da      	ldr	r2, [r3, #12]
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	015a      	lsls	r2, r3, #5
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	4413      	add	r3, r2
 800997c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	693a      	ldr	r2, [r7, #16]
 8009984:	0151      	lsls	r1, r2, #5
 8009986:	697a      	ldr	r2, [r7, #20]
 8009988:	440a      	add	r2, r1
 800998a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800998e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009992:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	015a      	lsls	r2, r3, #5
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	4413      	add	r3, r2
 800999c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099a0:	691a      	ldr	r2, [r3, #16]
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	699b      	ldr	r3, [r3, #24]
 80099a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099aa:	6939      	ldr	r1, [r7, #16]
 80099ac:	0148      	lsls	r0, r1, #5
 80099ae:	6979      	ldr	r1, [r7, #20]
 80099b0:	4401      	add	r1, r0
 80099b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80099b6:	4313      	orrs	r3, r2
 80099b8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80099ba:	79fb      	ldrb	r3, [r7, #7]
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d11e      	bne.n	80099fe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	695b      	ldr	r3, [r3, #20]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d009      	beq.n	80099dc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	015a      	lsls	r2, r3, #5
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	4413      	add	r3, r2
 80099d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099d4:	461a      	mov	r2, r3
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	695b      	ldr	r3, [r3, #20]
 80099da:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	015a      	lsls	r2, r3, #5
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	4413      	add	r3, r2
 80099e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	693a      	ldr	r2, [r7, #16]
 80099ec:	0151      	lsls	r1, r2, #5
 80099ee:	697a      	ldr	r2, [r7, #20]
 80099f0:	440a      	add	r2, r1
 80099f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099fa:	6013      	str	r3, [r2, #0]
 80099fc:	e097      	b.n	8009b2e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	015a      	lsls	r2, r3, #5
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	4413      	add	r3, r2
 8009a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	693a      	ldr	r2, [r7, #16]
 8009a0e:	0151      	lsls	r1, r2, #5
 8009a10:	697a      	ldr	r2, [r7, #20]
 8009a12:	440a      	add	r2, r1
 8009a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a1c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	699b      	ldr	r3, [r3, #24]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f000 8083 	beq.w	8009b2e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	f003 030f 	and.w	r3, r3, #15
 8009a38:	2101      	movs	r1, #1
 8009a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8009a3e:	6979      	ldr	r1, [r7, #20]
 8009a40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a44:	4313      	orrs	r3, r2
 8009a46:	634b      	str	r3, [r1, #52]	; 0x34
 8009a48:	e071      	b.n	8009b2e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	015a      	lsls	r2, r3, #5
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	4413      	add	r3, r2
 8009a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a56:	691b      	ldr	r3, [r3, #16]
 8009a58:	693a      	ldr	r2, [r7, #16]
 8009a5a:	0151      	lsls	r1, r2, #5
 8009a5c:	697a      	ldr	r2, [r7, #20]
 8009a5e:	440a      	add	r2, r1
 8009a60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a64:	0cdb      	lsrs	r3, r3, #19
 8009a66:	04db      	lsls	r3, r3, #19
 8009a68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	015a      	lsls	r2, r3, #5
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	4413      	add	r3, r2
 8009a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a76:	691b      	ldr	r3, [r3, #16]
 8009a78:	693a      	ldr	r2, [r7, #16]
 8009a7a:	0151      	lsls	r1, r2, #5
 8009a7c:	697a      	ldr	r2, [r7, #20]
 8009a7e:	440a      	add	r2, r1
 8009a80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a8c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	699b      	ldr	r3, [r3, #24]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d003      	beq.n	8009a9e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	68da      	ldr	r2, [r3, #12]
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	68da      	ldr	r2, [r3, #12]
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	015a      	lsls	r2, r3, #5
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	4413      	add	r3, r2
 8009aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	693a      	ldr	r2, [r7, #16]
 8009ab6:	0151      	lsls	r1, r2, #5
 8009ab8:	697a      	ldr	r2, [r7, #20]
 8009aba:	440a      	add	r2, r1
 8009abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ac0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ac4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	015a      	lsls	r2, r3, #5
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	4413      	add	r3, r2
 8009ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ad2:	691a      	ldr	r2, [r3, #16]
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	69db      	ldr	r3, [r3, #28]
 8009ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009adc:	6939      	ldr	r1, [r7, #16]
 8009ade:	0148      	lsls	r0, r1, #5
 8009ae0:	6979      	ldr	r1, [r7, #20]
 8009ae2:	4401      	add	r1, r0
 8009ae4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009aec:	79fb      	ldrb	r3, [r7, #7]
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d10d      	bne.n	8009b0e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	691b      	ldr	r3, [r3, #16]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d009      	beq.n	8009b0e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	6919      	ldr	r1, [r3, #16]
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	015a      	lsls	r2, r3, #5
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	4413      	add	r3, r2
 8009b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b0a:	460a      	mov	r2, r1
 8009b0c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	015a      	lsls	r2, r3, #5
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	4413      	add	r3, r2
 8009b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	693a      	ldr	r2, [r7, #16]
 8009b1e:	0151      	lsls	r1, r2, #5
 8009b20:	697a      	ldr	r2, [r7, #20]
 8009b22:	440a      	add	r2, r1
 8009b24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b28:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b2c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b2e:	2300      	movs	r3, #0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	371c      	adds	r7, #28
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b087      	sub	sp, #28
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009b46:	2300      	movs	r3, #0
 8009b48:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	785b      	ldrb	r3, [r3, #1]
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d14a      	bne.n	8009bf0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	015a      	lsls	r2, r3, #5
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	4413      	add	r3, r2
 8009b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b72:	f040 8086 	bne.w	8009c82 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	015a      	lsls	r2, r3, #5
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	4413      	add	r3, r2
 8009b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	683a      	ldr	r2, [r7, #0]
 8009b88:	7812      	ldrb	r2, [r2, #0]
 8009b8a:	0151      	lsls	r1, r2, #5
 8009b8c:	693a      	ldr	r2, [r7, #16]
 8009b8e:	440a      	add	r2, r1
 8009b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009b98:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	015a      	lsls	r2, r3, #5
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	4413      	add	r3, r2
 8009ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	683a      	ldr	r2, [r7, #0]
 8009bac:	7812      	ldrb	r2, [r2, #0]
 8009bae:	0151      	lsls	r1, r2, #5
 8009bb0:	693a      	ldr	r2, [r7, #16]
 8009bb2:	440a      	add	r2, r1
 8009bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009bbc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f242 7210 	movw	r2, #10000	; 0x2710
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d902      	bls.n	8009bd4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	75fb      	strb	r3, [r7, #23]
          break;
 8009bd2:	e056      	b.n	8009c82 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	015a      	lsls	r2, r3, #5
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	4413      	add	r3, r2
 8009bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009be8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bec:	d0e7      	beq.n	8009bbe <USB_EPStopXfer+0x82>
 8009bee:	e048      	b.n	8009c82 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	015a      	lsls	r2, r3, #5
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	4413      	add	r3, r2
 8009bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c08:	d13b      	bne.n	8009c82 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	015a      	lsls	r2, r3, #5
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	4413      	add	r3, r2
 8009c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	683a      	ldr	r2, [r7, #0]
 8009c1c:	7812      	ldrb	r2, [r2, #0]
 8009c1e:	0151      	lsls	r1, r2, #5
 8009c20:	693a      	ldr	r2, [r7, #16]
 8009c22:	440a      	add	r2, r1
 8009c24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009c2c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	015a      	lsls	r2, r3, #5
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	4413      	add	r3, r2
 8009c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	683a      	ldr	r2, [r7, #0]
 8009c40:	7812      	ldrb	r2, [r2, #0]
 8009c42:	0151      	lsls	r1, r2, #5
 8009c44:	693a      	ldr	r2, [r7, #16]
 8009c46:	440a      	add	r2, r1
 8009c48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c50:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	3301      	adds	r3, #1
 8009c56:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f242 7210 	movw	r2, #10000	; 0x2710
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d902      	bls.n	8009c68 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	75fb      	strb	r3, [r7, #23]
          break;
 8009c66:	e00c      	b.n	8009c82 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	015a      	lsls	r2, r3, #5
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	4413      	add	r3, r2
 8009c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c80:	d0e7      	beq.n	8009c52 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	371c      	adds	r7, #28
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b089      	sub	sp, #36	; 0x24
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	4611      	mov	r1, r2
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	71fb      	strb	r3, [r7, #7]
 8009ca2:	4613      	mov	r3, r2
 8009ca4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009cae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d123      	bne.n	8009cfe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009cb6:	88bb      	ldrh	r3, [r7, #4]
 8009cb8:	3303      	adds	r3, #3
 8009cba:	089b      	lsrs	r3, r3, #2
 8009cbc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	61bb      	str	r3, [r7, #24]
 8009cc2:	e018      	b.n	8009cf6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009cc4:	79fb      	ldrb	r3, [r7, #7]
 8009cc6:	031a      	lsls	r2, r3, #12
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	4413      	add	r3, r2
 8009ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	3301      	adds	r3, #1
 8009cee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	61bb      	str	r3, [r7, #24]
 8009cf6:	69ba      	ldr	r2, [r7, #24]
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d3e2      	bcc.n	8009cc4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009cfe:	2300      	movs	r3, #0
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3724      	adds	r7, #36	; 0x24
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr

08009d0c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b08b      	sub	sp, #44	; 0x2c
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	60b9      	str	r1, [r7, #8]
 8009d16:	4613      	mov	r3, r2
 8009d18:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009d22:	88fb      	ldrh	r3, [r7, #6]
 8009d24:	089b      	lsrs	r3, r3, #2
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009d2a:	88fb      	ldrh	r3, [r7, #6]
 8009d2c:	f003 0303 	and.w	r3, r3, #3
 8009d30:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009d32:	2300      	movs	r3, #0
 8009d34:	623b      	str	r3, [r7, #32]
 8009d36:	e014      	b.n	8009d62 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009d38:	69bb      	ldr	r3, [r7, #24]
 8009d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d42:	601a      	str	r2, [r3, #0]
    pDest++;
 8009d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d46:	3301      	adds	r3, #1
 8009d48:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d52:	3301      	adds	r3, #1
 8009d54:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d58:	3301      	adds	r3, #1
 8009d5a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009d5c:	6a3b      	ldr	r3, [r7, #32]
 8009d5e:	3301      	adds	r3, #1
 8009d60:	623b      	str	r3, [r7, #32]
 8009d62:	6a3a      	ldr	r2, [r7, #32]
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d3e6      	bcc.n	8009d38 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009d6a:	8bfb      	ldrh	r3, [r7, #30]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d01e      	beq.n	8009dae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009d70:	2300      	movs	r3, #0
 8009d72:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009d74:	69bb      	ldr	r3, [r7, #24]
 8009d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	f107 0310 	add.w	r3, r7, #16
 8009d80:	6812      	ldr	r2, [r2, #0]
 8009d82:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009d84:	693a      	ldr	r2, [r7, #16]
 8009d86:	6a3b      	ldr	r3, [r7, #32]
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	00db      	lsls	r3, r3, #3
 8009d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8009d90:	b2da      	uxtb	r2, r3
 8009d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d94:	701a      	strb	r2, [r3, #0]
      i++;
 8009d96:	6a3b      	ldr	r3, [r7, #32]
 8009d98:	3301      	adds	r3, #1
 8009d9a:	623b      	str	r3, [r7, #32]
      pDest++;
 8009d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9e:	3301      	adds	r3, #1
 8009da0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009da2:	8bfb      	ldrh	r3, [r7, #30]
 8009da4:	3b01      	subs	r3, #1
 8009da6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009da8:	8bfb      	ldrh	r3, [r7, #30]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d1ea      	bne.n	8009d84 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	372c      	adds	r7, #44	; 0x2c
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr

08009dbc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	785b      	ldrb	r3, [r3, #1]
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d12c      	bne.n	8009e32 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	015a      	lsls	r2, r3, #5
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	4413      	add	r3, r2
 8009de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	db12      	blt.n	8009e10 <USB_EPSetStall+0x54>
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d00f      	beq.n	8009e10 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	015a      	lsls	r2, r3, #5
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	4413      	add	r3, r2
 8009df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68ba      	ldr	r2, [r7, #8]
 8009e00:	0151      	lsls	r1, r2, #5
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	440a      	add	r2, r1
 8009e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009e0e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	015a      	lsls	r2, r3, #5
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	4413      	add	r3, r2
 8009e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	68ba      	ldr	r2, [r7, #8]
 8009e20:	0151      	lsls	r1, r2, #5
 8009e22:	68fa      	ldr	r2, [r7, #12]
 8009e24:	440a      	add	r2, r1
 8009e26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e2e:	6013      	str	r3, [r2, #0]
 8009e30:	e02b      	b.n	8009e8a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	015a      	lsls	r2, r3, #5
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	4413      	add	r3, r2
 8009e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	db12      	blt.n	8009e6a <USB_EPSetStall+0xae>
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d00f      	beq.n	8009e6a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	015a      	lsls	r2, r3, #5
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	4413      	add	r3, r2
 8009e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	68ba      	ldr	r2, [r7, #8]
 8009e5a:	0151      	lsls	r1, r2, #5
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	440a      	add	r2, r1
 8009e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009e68:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	015a      	lsls	r2, r3, #5
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	4413      	add	r3, r2
 8009e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	68ba      	ldr	r2, [r7, #8]
 8009e7a:	0151      	lsls	r1, r2, #5
 8009e7c:	68fa      	ldr	r2, [r7, #12]
 8009e7e:	440a      	add	r2, r1
 8009e80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e88:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e8a:	2300      	movs	r3, #0
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3714      	adds	r7, #20
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	785b      	ldrb	r3, [r3, #1]
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d128      	bne.n	8009f06 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	015a      	lsls	r2, r3, #5
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	4413      	add	r3, r2
 8009ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	68ba      	ldr	r2, [r7, #8]
 8009ec4:	0151      	lsls	r1, r2, #5
 8009ec6:	68fa      	ldr	r2, [r7, #12]
 8009ec8:	440a      	add	r2, r1
 8009eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ece:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ed2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	791b      	ldrb	r3, [r3, #4]
 8009ed8:	2b03      	cmp	r3, #3
 8009eda:	d003      	beq.n	8009ee4 <USB_EPClearStall+0x4c>
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	791b      	ldrb	r3, [r3, #4]
 8009ee0:	2b02      	cmp	r3, #2
 8009ee2:	d138      	bne.n	8009f56 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	015a      	lsls	r2, r3, #5
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	4413      	add	r3, r2
 8009eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	68ba      	ldr	r2, [r7, #8]
 8009ef4:	0151      	lsls	r1, r2, #5
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	440a      	add	r2, r1
 8009efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f02:	6013      	str	r3, [r2, #0]
 8009f04:	e027      	b.n	8009f56 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	015a      	lsls	r2, r3, #5
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	68ba      	ldr	r2, [r7, #8]
 8009f16:	0151      	lsls	r1, r2, #5
 8009f18:	68fa      	ldr	r2, [r7, #12]
 8009f1a:	440a      	add	r2, r1
 8009f1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f24:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	791b      	ldrb	r3, [r3, #4]
 8009f2a:	2b03      	cmp	r3, #3
 8009f2c:	d003      	beq.n	8009f36 <USB_EPClearStall+0x9e>
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	791b      	ldrb	r3, [r3, #4]
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d10f      	bne.n	8009f56 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	015a      	lsls	r2, r3, #5
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	4413      	add	r3, r2
 8009f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	68ba      	ldr	r2, [r7, #8]
 8009f46:	0151      	lsls	r1, r2, #5
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	440a      	add	r2, r1
 8009f4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f54:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009f56:	2300      	movs	r3, #0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3714      	adds	r7, #20
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr

08009f64 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	68fa      	ldr	r2, [r7, #12]
 8009f7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f82:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009f86:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	78fb      	ldrb	r3, [r7, #3]
 8009f92:	011b      	lsls	r3, r3, #4
 8009f94:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009f98:	68f9      	ldr	r1, [r7, #12]
 8009f9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3714      	adds	r7, #20
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr

08009fb0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b085      	sub	sp, #20
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009fca:	f023 0303 	bic.w	r3, r3, #3
 8009fce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	68fa      	ldr	r2, [r7, #12]
 8009fda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fde:	f023 0302 	bic.w	r3, r3, #2
 8009fe2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3714      	adds	r7, #20
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr

08009ff2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009ff2:	b480      	push	{r7}
 8009ff4:	b085      	sub	sp, #20
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a00c:	f023 0303 	bic.w	r3, r3, #3
 800a010:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	68fa      	ldr	r2, [r7, #12]
 800a01c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a020:	f043 0302 	orr.w	r3, r3, #2
 800a024:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a026:	2300      	movs	r3, #0
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3714      	adds	r7, #20
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a034:	b480      	push	{r7}
 800a036:	b085      	sub	sp, #20
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	695b      	ldr	r3, [r3, #20]
 800a040:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	699b      	ldr	r3, [r3, #24]
 800a046:	68fa      	ldr	r2, [r7, #12]
 800a048:	4013      	ands	r3, r2
 800a04a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a04c:	68fb      	ldr	r3, [r7, #12]
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3714      	adds	r7, #20
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr

0800a05a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a05a:	b480      	push	{r7}
 800a05c:	b085      	sub	sp, #20
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a06c:	699b      	ldr	r3, [r3, #24]
 800a06e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a076:	69db      	ldr	r3, [r3, #28]
 800a078:	68ba      	ldr	r2, [r7, #8]
 800a07a:	4013      	ands	r3, r2
 800a07c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	0c1b      	lsrs	r3, r3, #16
}
 800a082:	4618      	mov	r0, r3
 800a084:	3714      	adds	r7, #20
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a08e:	b480      	push	{r7}
 800a090:	b085      	sub	sp, #20
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0a0:	699b      	ldr	r3, [r3, #24]
 800a0a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0aa:	69db      	ldr	r3, [r3, #28]
 800a0ac:	68ba      	ldr	r2, [r7, #8]
 800a0ae:	4013      	ands	r3, r2
 800a0b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	b29b      	uxth	r3, r3
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3714      	adds	r7, #20
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr

0800a0c2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a0c2:	b480      	push	{r7}
 800a0c4:	b085      	sub	sp, #20
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a0d2:	78fb      	ldrb	r3, [r7, #3]
 800a0d4:	015a      	lsls	r2, r3, #5
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	4413      	add	r3, r2
 800a0da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0e8:	695b      	ldr	r3, [r3, #20]
 800a0ea:	68ba      	ldr	r2, [r7, #8]
 800a0ec:	4013      	ands	r3, r2
 800a0ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a0f0:	68bb      	ldr	r3, [r7, #8]
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3714      	adds	r7, #20
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr

0800a0fe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a0fe:	b480      	push	{r7}
 800a100:	b087      	sub	sp, #28
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
 800a106:	460b      	mov	r3, r1
 800a108:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a114:	691b      	ldr	r3, [r3, #16]
 800a116:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a11e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a120:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a122:	78fb      	ldrb	r3, [r7, #3]
 800a124:	f003 030f 	and.w	r3, r3, #15
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	fa22 f303 	lsr.w	r3, r2, r3
 800a12e:	01db      	lsls	r3, r3, #7
 800a130:	b2db      	uxtb	r3, r3
 800a132:	693a      	ldr	r2, [r7, #16]
 800a134:	4313      	orrs	r3, r2
 800a136:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a138:	78fb      	ldrb	r3, [r7, #3]
 800a13a:	015a      	lsls	r2, r3, #5
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	4413      	add	r3, r2
 800a140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	693a      	ldr	r2, [r7, #16]
 800a148:	4013      	ands	r3, r2
 800a14a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a14c:	68bb      	ldr	r3, [r7, #8]
}
 800a14e:	4618      	mov	r0, r3
 800a150:	371c      	adds	r7, #28
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr

0800a15a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a15a:	b480      	push	{r7}
 800a15c:	b083      	sub	sp, #12
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	695b      	ldr	r3, [r3, #20]
 800a166:	f003 0301 	and.w	r3, r3, #1
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	370c      	adds	r7, #12
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr

0800a176 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a176:	b480      	push	{r7}
 800a178:	b085      	sub	sp, #20
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a190:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a194:	f023 0307 	bic.w	r3, r3, #7
 800a198:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	68fa      	ldr	r2, [r7, #12]
 800a1a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a1ae:	2300      	movs	r3, #0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3714      	adds	r7, #20
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b087      	sub	sp, #28
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	607a      	str	r2, [r7, #4]
 800a1c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	333c      	adds	r3, #60	; 0x3c
 800a1d2:	3304      	adds	r3, #4
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	4a26      	ldr	r2, [pc, #152]	; (800a274 <USB_EP0_OutStart+0xb8>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d90a      	bls.n	800a1f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1f0:	d101      	bne.n	800a1f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	e037      	b.n	800a266 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	2300      	movs	r3, #0
 800a200:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a208:	691b      	ldr	r3, [r3, #16]
 800a20a:	697a      	ldr	r2, [r7, #20]
 800a20c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a210:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a214:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a21c:	691b      	ldr	r3, [r3, #16]
 800a21e:	697a      	ldr	r2, [r7, #20]
 800a220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a224:	f043 0318 	orr.w	r3, r3, #24
 800a228:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a230:	691b      	ldr	r3, [r3, #16]
 800a232:	697a      	ldr	r2, [r7, #20]
 800a234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a238:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a23c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a23e:	7afb      	ldrb	r3, [r7, #11]
 800a240:	2b01      	cmp	r3, #1
 800a242:	d10f      	bne.n	800a264 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a24a:	461a      	mov	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	697a      	ldr	r2, [r7, #20]
 800a25a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a25e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a262:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a264:	2300      	movs	r3, #0
}
 800a266:	4618      	mov	r0, r3
 800a268:	371c      	adds	r7, #28
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr
 800a272:	bf00      	nop
 800a274:	4f54300a 	.word	0x4f54300a

0800a278 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a278:	b480      	push	{r7}
 800a27a:	b085      	sub	sp, #20
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a280:	2300      	movs	r3, #0
 800a282:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	3301      	adds	r3, #1
 800a288:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	4a13      	ldr	r2, [pc, #76]	; (800a2dc <USB_CoreReset+0x64>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d901      	bls.n	800a296 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a292:	2303      	movs	r3, #3
 800a294:	e01b      	b.n	800a2ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	691b      	ldr	r3, [r3, #16]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	daf2      	bge.n	800a284 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	691b      	ldr	r3, [r3, #16]
 800a2a6:	f043 0201 	orr.w	r2, r3, #1
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	4a09      	ldr	r2, [pc, #36]	; (800a2dc <USB_CoreReset+0x64>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d901      	bls.n	800a2c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a2bc:	2303      	movs	r3, #3
 800a2be:	e006      	b.n	800a2ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	691b      	ldr	r3, [r3, #16]
 800a2c4:	f003 0301 	and.w	r3, r3, #1
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d0f0      	beq.n	800a2ae <USB_CoreReset+0x36>

  return HAL_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3714      	adds	r7, #20
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr
 800a2da:	bf00      	nop
 800a2dc:	00030d40 	.word	0x00030d40

0800a2e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a2ec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a2f0:	f004 fbd8 	bl	800eaa4 <USBD_static_malloc>
 800a2f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d109      	bne.n	800a310 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	32b0      	adds	r2, #176	; 0xb0
 800a306:	2100      	movs	r1, #0
 800a308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a30c:	2302      	movs	r3, #2
 800a30e:	e0d4      	b.n	800a4ba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a310:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a314:	2100      	movs	r1, #0
 800a316:	68f8      	ldr	r0, [r7, #12]
 800a318:	f004 fd79 	bl	800ee0e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	32b0      	adds	r2, #176	; 0xb0
 800a326:	68f9      	ldr	r1, [r7, #12]
 800a328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	32b0      	adds	r2, #176	; 0xb0
 800a336:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	7c1b      	ldrb	r3, [r3, #16]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d138      	bne.n	800a3ba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a348:	4b5e      	ldr	r3, [pc, #376]	; (800a4c4 <USBD_CDC_Init+0x1e4>)
 800a34a:	7819      	ldrb	r1, [r3, #0]
 800a34c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a350:	2202      	movs	r2, #2
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f004 fa83 	bl	800e85e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a358:	4b5a      	ldr	r3, [pc, #360]	; (800a4c4 <USBD_CDC_Init+0x1e4>)
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	f003 020f 	and.w	r2, r3, #15
 800a360:	6879      	ldr	r1, [r7, #4]
 800a362:	4613      	mov	r3, r2
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	4413      	add	r3, r2
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	440b      	add	r3, r1
 800a36c:	3324      	adds	r3, #36	; 0x24
 800a36e:	2201      	movs	r2, #1
 800a370:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a372:	4b55      	ldr	r3, [pc, #340]	; (800a4c8 <USBD_CDC_Init+0x1e8>)
 800a374:	7819      	ldrb	r1, [r3, #0]
 800a376:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a37a:	2202      	movs	r2, #2
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f004 fa6e 	bl	800e85e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a382:	4b51      	ldr	r3, [pc, #324]	; (800a4c8 <USBD_CDC_Init+0x1e8>)
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	f003 020f 	and.w	r2, r3, #15
 800a38a:	6879      	ldr	r1, [r7, #4]
 800a38c:	4613      	mov	r3, r2
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	4413      	add	r3, r2
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	440b      	add	r3, r1
 800a396:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a39a:	2201      	movs	r2, #1
 800a39c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a39e:	4b4b      	ldr	r3, [pc, #300]	; (800a4cc <USBD_CDC_Init+0x1ec>)
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	f003 020f 	and.w	r2, r3, #15
 800a3a6:	6879      	ldr	r1, [r7, #4]
 800a3a8:	4613      	mov	r3, r2
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	4413      	add	r3, r2
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	440b      	add	r3, r1
 800a3b2:	3326      	adds	r3, #38	; 0x26
 800a3b4:	2210      	movs	r2, #16
 800a3b6:	801a      	strh	r2, [r3, #0]
 800a3b8:	e035      	b.n	800a426 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a3ba:	4b42      	ldr	r3, [pc, #264]	; (800a4c4 <USBD_CDC_Init+0x1e4>)
 800a3bc:	7819      	ldrb	r1, [r3, #0]
 800a3be:	2340      	movs	r3, #64	; 0x40
 800a3c0:	2202      	movs	r2, #2
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f004 fa4b 	bl	800e85e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a3c8:	4b3e      	ldr	r3, [pc, #248]	; (800a4c4 <USBD_CDC_Init+0x1e4>)
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	f003 020f 	and.w	r2, r3, #15
 800a3d0:	6879      	ldr	r1, [r7, #4]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	4413      	add	r3, r2
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	440b      	add	r3, r1
 800a3dc:	3324      	adds	r3, #36	; 0x24
 800a3de:	2201      	movs	r2, #1
 800a3e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a3e2:	4b39      	ldr	r3, [pc, #228]	; (800a4c8 <USBD_CDC_Init+0x1e8>)
 800a3e4:	7819      	ldrb	r1, [r3, #0]
 800a3e6:	2340      	movs	r3, #64	; 0x40
 800a3e8:	2202      	movs	r2, #2
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f004 fa37 	bl	800e85e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a3f0:	4b35      	ldr	r3, [pc, #212]	; (800a4c8 <USBD_CDC_Init+0x1e8>)
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	f003 020f 	and.w	r2, r3, #15
 800a3f8:	6879      	ldr	r1, [r7, #4]
 800a3fa:	4613      	mov	r3, r2
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	4413      	add	r3, r2
 800a400:	009b      	lsls	r3, r3, #2
 800a402:	440b      	add	r3, r1
 800a404:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a408:	2201      	movs	r2, #1
 800a40a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a40c:	4b2f      	ldr	r3, [pc, #188]	; (800a4cc <USBD_CDC_Init+0x1ec>)
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	f003 020f 	and.w	r2, r3, #15
 800a414:	6879      	ldr	r1, [r7, #4]
 800a416:	4613      	mov	r3, r2
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	4413      	add	r3, r2
 800a41c:	009b      	lsls	r3, r3, #2
 800a41e:	440b      	add	r3, r1
 800a420:	3326      	adds	r3, #38	; 0x26
 800a422:	2210      	movs	r2, #16
 800a424:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a426:	4b29      	ldr	r3, [pc, #164]	; (800a4cc <USBD_CDC_Init+0x1ec>)
 800a428:	7819      	ldrb	r1, [r3, #0]
 800a42a:	2308      	movs	r3, #8
 800a42c:	2203      	movs	r2, #3
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f004 fa15 	bl	800e85e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a434:	4b25      	ldr	r3, [pc, #148]	; (800a4cc <USBD_CDC_Init+0x1ec>)
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	f003 020f 	and.w	r2, r3, #15
 800a43c:	6879      	ldr	r1, [r7, #4]
 800a43e:	4613      	mov	r3, r2
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	4413      	add	r3, r2
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	440b      	add	r3, r1
 800a448:	3324      	adds	r3, #36	; 0x24
 800a44a:	2201      	movs	r2, #1
 800a44c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2200      	movs	r2, #0
 800a452:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	33b0      	adds	r3, #176	; 0xb0
 800a460:	009b      	lsls	r3, r3, #2
 800a462:	4413      	add	r3, r2
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2200      	movs	r2, #0
 800a46e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2200      	movs	r2, #0
 800a476:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a480:	2b00      	cmp	r3, #0
 800a482:	d101      	bne.n	800a488 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a484:	2302      	movs	r3, #2
 800a486:	e018      	b.n	800a4ba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	7c1b      	ldrb	r3, [r3, #16]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d10a      	bne.n	800a4a6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a490:	4b0d      	ldr	r3, [pc, #52]	; (800a4c8 <USBD_CDC_Init+0x1e8>)
 800a492:	7819      	ldrb	r1, [r3, #0]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a49a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f004 facc 	bl	800ea3c <USBD_LL_PrepareReceive>
 800a4a4:	e008      	b.n	800a4b8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a4a6:	4b08      	ldr	r3, [pc, #32]	; (800a4c8 <USBD_CDC_Init+0x1e8>)
 800a4a8:	7819      	ldrb	r1, [r3, #0]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a4b0:	2340      	movs	r3, #64	; 0x40
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f004 fac2 	bl	800ea3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a4b8:	2300      	movs	r3, #0
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	200000db 	.word	0x200000db
 800a4c8:	200000dc 	.word	0x200000dc
 800a4cc:	200000dd 	.word	0x200000dd

0800a4d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	460b      	mov	r3, r1
 800a4da:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a4dc:	4b3a      	ldr	r3, [pc, #232]	; (800a5c8 <USBD_CDC_DeInit+0xf8>)
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f004 f9e1 	bl	800e8aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a4e8:	4b37      	ldr	r3, [pc, #220]	; (800a5c8 <USBD_CDC_DeInit+0xf8>)
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	f003 020f 	and.w	r2, r3, #15
 800a4f0:	6879      	ldr	r1, [r7, #4]
 800a4f2:	4613      	mov	r3, r2
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	4413      	add	r3, r2
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	440b      	add	r3, r1
 800a4fc:	3324      	adds	r3, #36	; 0x24
 800a4fe:	2200      	movs	r2, #0
 800a500:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a502:	4b32      	ldr	r3, [pc, #200]	; (800a5cc <USBD_CDC_DeInit+0xfc>)
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	4619      	mov	r1, r3
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f004 f9ce 	bl	800e8aa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a50e:	4b2f      	ldr	r3, [pc, #188]	; (800a5cc <USBD_CDC_DeInit+0xfc>)
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	f003 020f 	and.w	r2, r3, #15
 800a516:	6879      	ldr	r1, [r7, #4]
 800a518:	4613      	mov	r3, r2
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	4413      	add	r3, r2
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	440b      	add	r3, r1
 800a522:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a526:	2200      	movs	r2, #0
 800a528:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a52a:	4b29      	ldr	r3, [pc, #164]	; (800a5d0 <USBD_CDC_DeInit+0x100>)
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	4619      	mov	r1, r3
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f004 f9ba 	bl	800e8aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a536:	4b26      	ldr	r3, [pc, #152]	; (800a5d0 <USBD_CDC_DeInit+0x100>)
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	f003 020f 	and.w	r2, r3, #15
 800a53e:	6879      	ldr	r1, [r7, #4]
 800a540:	4613      	mov	r3, r2
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	4413      	add	r3, r2
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	440b      	add	r3, r1
 800a54a:	3324      	adds	r3, #36	; 0x24
 800a54c:	2200      	movs	r2, #0
 800a54e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a550:	4b1f      	ldr	r3, [pc, #124]	; (800a5d0 <USBD_CDC_DeInit+0x100>)
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	f003 020f 	and.w	r2, r3, #15
 800a558:	6879      	ldr	r1, [r7, #4]
 800a55a:	4613      	mov	r3, r2
 800a55c:	009b      	lsls	r3, r3, #2
 800a55e:	4413      	add	r3, r2
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	440b      	add	r3, r1
 800a564:	3326      	adds	r3, #38	; 0x26
 800a566:	2200      	movs	r2, #0
 800a568:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	32b0      	adds	r2, #176	; 0xb0
 800a574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d01f      	beq.n	800a5bc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	33b0      	adds	r3, #176	; 0xb0
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	4413      	add	r3, r2
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	32b0      	adds	r2, #176	; 0xb0
 800a59a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f004 fa8e 	bl	800eac0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	32b0      	adds	r2, #176	; 0xb0
 800a5ae:	2100      	movs	r1, #0
 800a5b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a5bc:	2300      	movs	r3, #0
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3708      	adds	r7, #8
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	200000db 	.word	0x200000db
 800a5cc:	200000dc 	.word	0x200000dc
 800a5d0:	200000dd 	.word	0x200000dd

0800a5d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b086      	sub	sp, #24
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	32b0      	adds	r2, #176	; 0xb0
 800a5e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5ec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d101      	bne.n	800a604 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a600:	2303      	movs	r3, #3
 800a602:	e0bf      	b.n	800a784 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d050      	beq.n	800a6b2 <USBD_CDC_Setup+0xde>
 800a610:	2b20      	cmp	r3, #32
 800a612:	f040 80af 	bne.w	800a774 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	88db      	ldrh	r3, [r3, #6]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d03a      	beq.n	800a694 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	b25b      	sxtb	r3, r3
 800a624:	2b00      	cmp	r3, #0
 800a626:	da1b      	bge.n	800a660 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	33b0      	adds	r3, #176	; 0xb0
 800a632:	009b      	lsls	r3, r3, #2
 800a634:	4413      	add	r3, r2
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	683a      	ldr	r2, [r7, #0]
 800a63c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a63e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a640:	683a      	ldr	r2, [r7, #0]
 800a642:	88d2      	ldrh	r2, [r2, #6]
 800a644:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	88db      	ldrh	r3, [r3, #6]
 800a64a:	2b07      	cmp	r3, #7
 800a64c:	bf28      	it	cs
 800a64e:	2307      	movcs	r3, #7
 800a650:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	89fa      	ldrh	r2, [r7, #14]
 800a656:	4619      	mov	r1, r3
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f001 fd43 	bl	800c0e4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a65e:	e090      	b.n	800a782 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	785a      	ldrb	r2, [r3, #1]
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	88db      	ldrh	r3, [r3, #6]
 800a66e:	2b3f      	cmp	r3, #63	; 0x3f
 800a670:	d803      	bhi.n	800a67a <USBD_CDC_Setup+0xa6>
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	88db      	ldrh	r3, [r3, #6]
 800a676:	b2da      	uxtb	r2, r3
 800a678:	e000      	b.n	800a67c <USBD_CDC_Setup+0xa8>
 800a67a:	2240      	movs	r2, #64	; 0x40
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a682:	6939      	ldr	r1, [r7, #16]
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a68a:	461a      	mov	r2, r3
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f001 fd55 	bl	800c13c <USBD_CtlPrepareRx>
      break;
 800a692:	e076      	b.n	800a782 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	33b0      	adds	r3, #176	; 0xb0
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	4413      	add	r3, r2
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	689b      	ldr	r3, [r3, #8]
 800a6a6:	683a      	ldr	r2, [r7, #0]
 800a6a8:	7850      	ldrb	r0, [r2, #1]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	6839      	ldr	r1, [r7, #0]
 800a6ae:	4798      	blx	r3
      break;
 800a6b0:	e067      	b.n	800a782 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	785b      	ldrb	r3, [r3, #1]
 800a6b6:	2b0b      	cmp	r3, #11
 800a6b8:	d851      	bhi.n	800a75e <USBD_CDC_Setup+0x18a>
 800a6ba:	a201      	add	r2, pc, #4	; (adr r2, 800a6c0 <USBD_CDC_Setup+0xec>)
 800a6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c0:	0800a6f1 	.word	0x0800a6f1
 800a6c4:	0800a76d 	.word	0x0800a76d
 800a6c8:	0800a75f 	.word	0x0800a75f
 800a6cc:	0800a75f 	.word	0x0800a75f
 800a6d0:	0800a75f 	.word	0x0800a75f
 800a6d4:	0800a75f 	.word	0x0800a75f
 800a6d8:	0800a75f 	.word	0x0800a75f
 800a6dc:	0800a75f 	.word	0x0800a75f
 800a6e0:	0800a75f 	.word	0x0800a75f
 800a6e4:	0800a75f 	.word	0x0800a75f
 800a6e8:	0800a71b 	.word	0x0800a71b
 800a6ec:	0800a745 	.word	0x0800a745
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	2b03      	cmp	r3, #3
 800a6fa:	d107      	bne.n	800a70c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a6fc:	f107 030a 	add.w	r3, r7, #10
 800a700:	2202      	movs	r2, #2
 800a702:	4619      	mov	r1, r3
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f001 fced 	bl	800c0e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a70a:	e032      	b.n	800a772 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a70c:	6839      	ldr	r1, [r7, #0]
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f001 fc77 	bl	800c002 <USBD_CtlError>
            ret = USBD_FAIL;
 800a714:	2303      	movs	r3, #3
 800a716:	75fb      	strb	r3, [r7, #23]
          break;
 800a718:	e02b      	b.n	800a772 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a720:	b2db      	uxtb	r3, r3
 800a722:	2b03      	cmp	r3, #3
 800a724:	d107      	bne.n	800a736 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a726:	f107 030d 	add.w	r3, r7, #13
 800a72a:	2201      	movs	r2, #1
 800a72c:	4619      	mov	r1, r3
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f001 fcd8 	bl	800c0e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a734:	e01d      	b.n	800a772 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a736:	6839      	ldr	r1, [r7, #0]
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f001 fc62 	bl	800c002 <USBD_CtlError>
            ret = USBD_FAIL;
 800a73e:	2303      	movs	r3, #3
 800a740:	75fb      	strb	r3, [r7, #23]
          break;
 800a742:	e016      	b.n	800a772 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	2b03      	cmp	r3, #3
 800a74e:	d00f      	beq.n	800a770 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a750:	6839      	ldr	r1, [r7, #0]
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f001 fc55 	bl	800c002 <USBD_CtlError>
            ret = USBD_FAIL;
 800a758:	2303      	movs	r3, #3
 800a75a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a75c:	e008      	b.n	800a770 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a75e:	6839      	ldr	r1, [r7, #0]
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f001 fc4e 	bl	800c002 <USBD_CtlError>
          ret = USBD_FAIL;
 800a766:	2303      	movs	r3, #3
 800a768:	75fb      	strb	r3, [r7, #23]
          break;
 800a76a:	e002      	b.n	800a772 <USBD_CDC_Setup+0x19e>
          break;
 800a76c:	bf00      	nop
 800a76e:	e008      	b.n	800a782 <USBD_CDC_Setup+0x1ae>
          break;
 800a770:	bf00      	nop
      }
      break;
 800a772:	e006      	b.n	800a782 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a774:	6839      	ldr	r1, [r7, #0]
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f001 fc43 	bl	800c002 <USBD_CtlError>
      ret = USBD_FAIL;
 800a77c:	2303      	movs	r3, #3
 800a77e:	75fb      	strb	r3, [r7, #23]
      break;
 800a780:	bf00      	nop
  }

  return (uint8_t)ret;
 800a782:	7dfb      	ldrb	r3, [r7, #23]
}
 800a784:	4618      	mov	r0, r3
 800a786:	3718      	adds	r7, #24
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b084      	sub	sp, #16
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	460b      	mov	r3, r1
 800a796:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a79e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	32b0      	adds	r2, #176	; 0xb0
 800a7aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d101      	bne.n	800a7b6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a7b2:	2303      	movs	r3, #3
 800a7b4:	e065      	b.n	800a882 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	32b0      	adds	r2, #176	; 0xb0
 800a7c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a7c6:	78fb      	ldrb	r3, [r7, #3]
 800a7c8:	f003 020f 	and.w	r2, r3, #15
 800a7cc:	6879      	ldr	r1, [r7, #4]
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	4413      	add	r3, r2
 800a7d4:	009b      	lsls	r3, r3, #2
 800a7d6:	440b      	add	r3, r1
 800a7d8:	3318      	adds	r3, #24
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d02f      	beq.n	800a840 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a7e0:	78fb      	ldrb	r3, [r7, #3]
 800a7e2:	f003 020f 	and.w	r2, r3, #15
 800a7e6:	6879      	ldr	r1, [r7, #4]
 800a7e8:	4613      	mov	r3, r2
 800a7ea:	009b      	lsls	r3, r3, #2
 800a7ec:	4413      	add	r3, r2
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	440b      	add	r3, r1
 800a7f2:	3318      	adds	r3, #24
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	78fb      	ldrb	r3, [r7, #3]
 800a7f8:	f003 010f 	and.w	r1, r3, #15
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	460b      	mov	r3, r1
 800a800:	00db      	lsls	r3, r3, #3
 800a802:	440b      	add	r3, r1
 800a804:	009b      	lsls	r3, r3, #2
 800a806:	4403      	add	r3, r0
 800a808:	3348      	adds	r3, #72	; 0x48
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	fbb2 f1f3 	udiv	r1, r2, r3
 800a810:	fb01 f303 	mul.w	r3, r1, r3
 800a814:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a816:	2b00      	cmp	r3, #0
 800a818:	d112      	bne.n	800a840 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a81a:	78fb      	ldrb	r3, [r7, #3]
 800a81c:	f003 020f 	and.w	r2, r3, #15
 800a820:	6879      	ldr	r1, [r7, #4]
 800a822:	4613      	mov	r3, r2
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	4413      	add	r3, r2
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	440b      	add	r3, r1
 800a82c:	3318      	adds	r3, #24
 800a82e:	2200      	movs	r2, #0
 800a830:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a832:	78f9      	ldrb	r1, [r7, #3]
 800a834:	2300      	movs	r3, #0
 800a836:	2200      	movs	r2, #0
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f004 f8de 	bl	800e9fa <USBD_LL_Transmit>
 800a83e:	e01f      	b.n	800a880 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	2200      	movs	r2, #0
 800a844:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	33b0      	adds	r3, #176	; 0xb0
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	4413      	add	r3, r2
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	691b      	ldr	r3, [r3, #16]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d010      	beq.n	800a880 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	33b0      	adds	r3, #176	; 0xb0
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	4413      	add	r3, r2
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	691b      	ldr	r3, [r3, #16]
 800a870:	68ba      	ldr	r2, [r7, #8]
 800a872:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a876:	68ba      	ldr	r2, [r7, #8]
 800a878:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a87c:	78fa      	ldrb	r2, [r7, #3]
 800a87e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a880:	2300      	movs	r3, #0
}
 800a882:	4618      	mov	r0, r3
 800a884:	3710      	adds	r7, #16
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}

0800a88a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a88a:	b580      	push	{r7, lr}
 800a88c:	b084      	sub	sp, #16
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
 800a892:	460b      	mov	r3, r1
 800a894:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	32b0      	adds	r2, #176	; 0xb0
 800a8a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	32b0      	adds	r2, #176	; 0xb0
 800a8b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d101      	bne.n	800a8bc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a8b8:	2303      	movs	r3, #3
 800a8ba:	e01a      	b.n	800a8f2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a8bc:	78fb      	ldrb	r3, [r7, #3]
 800a8be:	4619      	mov	r1, r3
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f004 f8dc 	bl	800ea7e <USBD_LL_GetRxDataSize>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	33b0      	adds	r3, #176	; 0xb0
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	4413      	add	r3, r2
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	68fa      	ldr	r2, [r7, #12]
 800a8e2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a8ec:	4611      	mov	r1, r2
 800a8ee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a8f0:	2300      	movs	r3, #0
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b084      	sub	sp, #16
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	32b0      	adds	r2, #176	; 0xb0
 800a90c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a910:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d101      	bne.n	800a91c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a918:	2303      	movs	r3, #3
 800a91a:	e025      	b.n	800a968 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	33b0      	adds	r3, #176	; 0xb0
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	4413      	add	r3, r2
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d01a      	beq.n	800a966 <USBD_CDC_EP0_RxReady+0x6c>
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a936:	2bff      	cmp	r3, #255	; 0xff
 800a938:	d015      	beq.n	800a966 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	33b0      	adds	r3, #176	; 0xb0
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	4413      	add	r3, r2
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	689b      	ldr	r3, [r3, #8]
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a952:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a954:	68fa      	ldr	r2, [r7, #12]
 800a956:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a95a:	b292      	uxth	r2, r2
 800a95c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	22ff      	movs	r2, #255	; 0xff
 800a962:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a966:	2300      	movs	r3, #0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3710      	adds	r7, #16
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a978:	2182      	movs	r1, #130	; 0x82
 800a97a:	4818      	ldr	r0, [pc, #96]	; (800a9dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a97c:	f000 fd09 	bl	800b392 <USBD_GetEpDesc>
 800a980:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a982:	2101      	movs	r1, #1
 800a984:	4815      	ldr	r0, [pc, #84]	; (800a9dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a986:	f000 fd04 	bl	800b392 <USBD_GetEpDesc>
 800a98a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a98c:	2181      	movs	r1, #129	; 0x81
 800a98e:	4813      	ldr	r0, [pc, #76]	; (800a9dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a990:	f000 fcff 	bl	800b392 <USBD_GetEpDesc>
 800a994:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d002      	beq.n	800a9a2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	2210      	movs	r2, #16
 800a9a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d006      	beq.n	800a9b6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a9b0:	711a      	strb	r2, [r3, #4]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d006      	beq.n	800a9ca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a9c4:	711a      	strb	r2, [r3, #4]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2243      	movs	r2, #67	; 0x43
 800a9ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a9d0:	4b02      	ldr	r3, [pc, #8]	; (800a9dc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3718      	adds	r7, #24
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	20000098 	.word	0x20000098

0800a9e0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b086      	sub	sp, #24
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a9e8:	2182      	movs	r1, #130	; 0x82
 800a9ea:	4818      	ldr	r0, [pc, #96]	; (800aa4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a9ec:	f000 fcd1 	bl	800b392 <USBD_GetEpDesc>
 800a9f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a9f2:	2101      	movs	r1, #1
 800a9f4:	4815      	ldr	r0, [pc, #84]	; (800aa4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a9f6:	f000 fccc 	bl	800b392 <USBD_GetEpDesc>
 800a9fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a9fc:	2181      	movs	r1, #129	; 0x81
 800a9fe:	4813      	ldr	r0, [pc, #76]	; (800aa4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800aa00:	f000 fcc7 	bl	800b392 <USBD_GetEpDesc>
 800aa04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d002      	beq.n	800aa12 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	2210      	movs	r2, #16
 800aa10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d006      	beq.n	800aa26 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	711a      	strb	r2, [r3, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f042 0202 	orr.w	r2, r2, #2
 800aa24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d006      	beq.n	800aa3a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	711a      	strb	r2, [r3, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f042 0202 	orr.w	r2, r2, #2
 800aa38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2243      	movs	r2, #67	; 0x43
 800aa3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aa40:	4b02      	ldr	r3, [pc, #8]	; (800aa4c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3718      	adds	r7, #24
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	20000098 	.word	0x20000098

0800aa50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b086      	sub	sp, #24
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aa58:	2182      	movs	r1, #130	; 0x82
 800aa5a:	4818      	ldr	r0, [pc, #96]	; (800aabc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aa5c:	f000 fc99 	bl	800b392 <USBD_GetEpDesc>
 800aa60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aa62:	2101      	movs	r1, #1
 800aa64:	4815      	ldr	r0, [pc, #84]	; (800aabc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aa66:	f000 fc94 	bl	800b392 <USBD_GetEpDesc>
 800aa6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aa6c:	2181      	movs	r1, #129	; 0x81
 800aa6e:	4813      	ldr	r0, [pc, #76]	; (800aabc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aa70:	f000 fc8f 	bl	800b392 <USBD_GetEpDesc>
 800aa74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d002      	beq.n	800aa82 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	2210      	movs	r2, #16
 800aa80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d006      	beq.n	800aa96 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa90:	711a      	strb	r2, [r3, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d006      	beq.n	800aaaa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aaa4:	711a      	strb	r2, [r3, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2243      	movs	r2, #67	; 0x43
 800aaae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aab0:	4b02      	ldr	r3, [pc, #8]	; (800aabc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3718      	adds	r7, #24
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	20000098 	.word	0x20000098

0800aac0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	220a      	movs	r2, #10
 800aacc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800aace:	4b03      	ldr	r3, [pc, #12]	; (800aadc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr
 800aadc:	20000054 	.word	0x20000054

0800aae0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b083      	sub	sp, #12
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d101      	bne.n	800aaf4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800aaf0:	2303      	movs	r3, #3
 800aaf2:	e009      	b.n	800ab08 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	33b0      	adds	r3, #176	; 0xb0
 800aafe:	009b      	lsls	r3, r3, #2
 800ab00:	4413      	add	r3, r2
 800ab02:	683a      	ldr	r2, [r7, #0]
 800ab04:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	370c      	adds	r7, #12
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b087      	sub	sp, #28
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	32b0      	adds	r2, #176	; 0xb0
 800ab2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab2e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d101      	bne.n	800ab3a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ab36:	2303      	movs	r3, #3
 800ab38:	e008      	b.n	800ab4c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	68ba      	ldr	r2, [r7, #8]
 800ab3e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ab4a:	2300      	movs	r3, #0
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	371c      	adds	r7, #28
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	32b0      	adds	r2, #176	; 0xb0
 800ab6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d101      	bne.n	800ab7c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ab78:	2303      	movs	r3, #3
 800ab7a:	e004      	b.n	800ab86 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	683a      	ldr	r2, [r7, #0]
 800ab80:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3714      	adds	r7, #20
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr
	...

0800ab94 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b084      	sub	sp, #16
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	32b0      	adds	r2, #176	; 0xb0
 800aba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abaa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	32b0      	adds	r2, #176	; 0xb0
 800abb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d101      	bne.n	800abc2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800abbe:	2303      	movs	r3, #3
 800abc0:	e018      	b.n	800abf4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	7c1b      	ldrb	r3, [r3, #16]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d10a      	bne.n	800abe0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800abca:	4b0c      	ldr	r3, [pc, #48]	; (800abfc <USBD_CDC_ReceivePacket+0x68>)
 800abcc:	7819      	ldrb	r1, [r3, #0]
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800abd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f003 ff2f 	bl	800ea3c <USBD_LL_PrepareReceive>
 800abde:	e008      	b.n	800abf2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800abe0:	4b06      	ldr	r3, [pc, #24]	; (800abfc <USBD_CDC_ReceivePacket+0x68>)
 800abe2:	7819      	ldrb	r1, [r3, #0]
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800abea:	2340      	movs	r3, #64	; 0x40
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f003 ff25 	bl	800ea3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800abf2:	2300      	movs	r3, #0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	200000dc 	.word	0x200000dc

0800ac00 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b086      	sub	sp, #24
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d101      	bne.n	800ac18 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ac14:	2303      	movs	r3, #3
 800ac16:	e01f      	b.n	800ac58 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d003      	beq.n	800ac3e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	68ba      	ldr	r2, [r7, #8]
 800ac3a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2201      	movs	r2, #1
 800ac42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	79fa      	ldrb	r2, [r7, #7]
 800ac4a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f003 fd99 	bl	800e784 <USBD_LL_Init>
 800ac52:	4603      	mov	r3, r0
 800ac54:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ac56:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3718      	adds	r7, #24
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d101      	bne.n	800ac78 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ac74:	2303      	movs	r3, #3
 800ac76:	e025      	b.n	800acc4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	683a      	ldr	r2, [r7, #0]
 800ac7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	32ae      	adds	r2, #174	; 0xae
 800ac8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d00f      	beq.n	800acb4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	32ae      	adds	r2, #174	; 0xae
 800ac9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca4:	f107 020e 	add.w	r2, r7, #14
 800aca8:	4610      	mov	r0, r2
 800acaa:	4798      	blx	r3
 800acac:	4602      	mov	r2, r0
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800acba:	1c5a      	adds	r2, r3, #1
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3710      	adds	r7, #16
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f003 fda7 	bl	800e828 <USBD_LL_Start>
 800acda:	4603      	mov	r3, r0
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3708      	adds	r7, #8
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b083      	sub	sp, #12
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800acec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800acee:	4618      	mov	r0, r3
 800acf0:	370c      	adds	r7, #12
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr

0800acfa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b084      	sub	sp, #16
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
 800ad02:	460b      	mov	r3, r1
 800ad04:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad06:	2300      	movs	r3, #0
 800ad08:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d009      	beq.n	800ad28 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	78fa      	ldrb	r2, [r7, #3]
 800ad1e:	4611      	mov	r1, r2
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	4798      	blx	r3
 800ad24:	4603      	mov	r3, r0
 800ad26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ad28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3710      	adds	r7, #16
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}

0800ad32 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad32:	b580      	push	{r7, lr}
 800ad34:	b084      	sub	sp, #16
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
 800ad3a:	460b      	mov	r3, r1
 800ad3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	78fa      	ldrb	r2, [r7, #3]
 800ad4c:	4611      	mov	r1, r2
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	4798      	blx	r3
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d001      	beq.n	800ad5c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ad58:	2303      	movs	r3, #3
 800ad5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b084      	sub	sp, #16
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
 800ad6e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ad76:	6839      	ldr	r1, [r7, #0]
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f001 f908 	bl	800bf8e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2201      	movs	r2, #1
 800ad82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ad9a:	f003 031f 	and.w	r3, r3, #31
 800ad9e:	2b02      	cmp	r3, #2
 800ada0:	d01a      	beq.n	800add8 <USBD_LL_SetupStage+0x72>
 800ada2:	2b02      	cmp	r3, #2
 800ada4:	d822      	bhi.n	800adec <USBD_LL_SetupStage+0x86>
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d002      	beq.n	800adb0 <USBD_LL_SetupStage+0x4a>
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d00a      	beq.n	800adc4 <USBD_LL_SetupStage+0x5e>
 800adae:	e01d      	b.n	800adec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800adb6:	4619      	mov	r1, r3
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 fb5f 	bl	800b47c <USBD_StdDevReq>
 800adbe:	4603      	mov	r3, r0
 800adc0:	73fb      	strb	r3, [r7, #15]
      break;
 800adc2:	e020      	b.n	800ae06 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800adca:	4619      	mov	r1, r3
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 fbc7 	bl	800b560 <USBD_StdItfReq>
 800add2:	4603      	mov	r3, r0
 800add4:	73fb      	strb	r3, [r7, #15]
      break;
 800add6:	e016      	b.n	800ae06 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800adde:	4619      	mov	r1, r3
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 fc29 	bl	800b638 <USBD_StdEPReq>
 800ade6:	4603      	mov	r3, r0
 800ade8:	73fb      	strb	r3, [r7, #15]
      break;
 800adea:	e00c      	b.n	800ae06 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800adf2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800adf6:	b2db      	uxtb	r3, r3
 800adf8:	4619      	mov	r1, r3
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f003 fd74 	bl	800e8e8 <USBD_LL_StallEP>
 800ae00:	4603      	mov	r3, r0
 800ae02:	73fb      	strb	r3, [r7, #15]
      break;
 800ae04:	bf00      	nop
  }

  return ret;
 800ae06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3710      	adds	r7, #16
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b086      	sub	sp, #24
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	60f8      	str	r0, [r7, #12]
 800ae18:	460b      	mov	r3, r1
 800ae1a:	607a      	str	r2, [r7, #4]
 800ae1c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ae22:	7afb      	ldrb	r3, [r7, #11]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d16e      	bne.n	800af06 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ae2e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ae36:	2b03      	cmp	r3, #3
 800ae38:	f040 8098 	bne.w	800af6c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	689a      	ldr	r2, [r3, #8]
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d913      	bls.n	800ae70 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	689a      	ldr	r2, [r3, #8]
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	68db      	ldr	r3, [r3, #12]
 800ae50:	1ad2      	subs	r2, r2, r3
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	68da      	ldr	r2, [r3, #12]
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	bf28      	it	cs
 800ae62:	4613      	movcs	r3, r2
 800ae64:	461a      	mov	r2, r3
 800ae66:	6879      	ldr	r1, [r7, #4]
 800ae68:	68f8      	ldr	r0, [r7, #12]
 800ae6a:	f001 f984 	bl	800c176 <USBD_CtlContinueRx>
 800ae6e:	e07d      	b.n	800af6c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ae76:	f003 031f 	and.w	r3, r3, #31
 800ae7a:	2b02      	cmp	r3, #2
 800ae7c:	d014      	beq.n	800aea8 <USBD_LL_DataOutStage+0x98>
 800ae7e:	2b02      	cmp	r3, #2
 800ae80:	d81d      	bhi.n	800aebe <USBD_LL_DataOutStage+0xae>
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d002      	beq.n	800ae8c <USBD_LL_DataOutStage+0x7c>
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	d003      	beq.n	800ae92 <USBD_LL_DataOutStage+0x82>
 800ae8a:	e018      	b.n	800aebe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	75bb      	strb	r3, [r7, #22]
            break;
 800ae90:	e018      	b.n	800aec4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	68f8      	ldr	r0, [r7, #12]
 800ae9e:	f000 fa5e 	bl	800b35e <USBD_CoreFindIF>
 800aea2:	4603      	mov	r3, r0
 800aea4:	75bb      	strb	r3, [r7, #22]
            break;
 800aea6:	e00d      	b.n	800aec4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	68f8      	ldr	r0, [r7, #12]
 800aeb4:	f000 fa60 	bl	800b378 <USBD_CoreFindEP>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	75bb      	strb	r3, [r7, #22]
            break;
 800aebc:	e002      	b.n	800aec4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800aebe:	2300      	movs	r3, #0
 800aec0:	75bb      	strb	r3, [r7, #22]
            break;
 800aec2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800aec4:	7dbb      	ldrb	r3, [r7, #22]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d119      	bne.n	800aefe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	2b03      	cmp	r3, #3
 800aed4:	d113      	bne.n	800aefe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800aed6:	7dba      	ldrb	r2, [r7, #22]
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	32ae      	adds	r2, #174	; 0xae
 800aedc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aee0:	691b      	ldr	r3, [r3, #16]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00b      	beq.n	800aefe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800aee6:	7dba      	ldrb	r2, [r7, #22]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800aeee:	7dba      	ldrb	r2, [r7, #22]
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	32ae      	adds	r2, #174	; 0xae
 800aef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aef8:	691b      	ldr	r3, [r3, #16]
 800aefa:	68f8      	ldr	r0, [r7, #12]
 800aefc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800aefe:	68f8      	ldr	r0, [r7, #12]
 800af00:	f001 f94a 	bl	800c198 <USBD_CtlSendStatus>
 800af04:	e032      	b.n	800af6c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800af06:	7afb      	ldrb	r3, [r7, #11]
 800af08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	4619      	mov	r1, r3
 800af10:	68f8      	ldr	r0, [r7, #12]
 800af12:	f000 fa31 	bl	800b378 <USBD_CoreFindEP>
 800af16:	4603      	mov	r3, r0
 800af18:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af1a:	7dbb      	ldrb	r3, [r7, #22]
 800af1c:	2bff      	cmp	r3, #255	; 0xff
 800af1e:	d025      	beq.n	800af6c <USBD_LL_DataOutStage+0x15c>
 800af20:	7dbb      	ldrb	r3, [r7, #22]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d122      	bne.n	800af6c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	2b03      	cmp	r3, #3
 800af30:	d117      	bne.n	800af62 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800af32:	7dba      	ldrb	r2, [r7, #22]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	32ae      	adds	r2, #174	; 0xae
 800af38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af3c:	699b      	ldr	r3, [r3, #24]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d00f      	beq.n	800af62 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800af42:	7dba      	ldrb	r2, [r7, #22]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800af4a:	7dba      	ldrb	r2, [r7, #22]
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	32ae      	adds	r2, #174	; 0xae
 800af50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af54:	699b      	ldr	r3, [r3, #24]
 800af56:	7afa      	ldrb	r2, [r7, #11]
 800af58:	4611      	mov	r1, r2
 800af5a:	68f8      	ldr	r0, [r7, #12]
 800af5c:	4798      	blx	r3
 800af5e:	4603      	mov	r3, r0
 800af60:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800af62:	7dfb      	ldrb	r3, [r7, #23]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d001      	beq.n	800af6c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800af68:	7dfb      	ldrb	r3, [r7, #23]
 800af6a:	e000      	b.n	800af6e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3718      	adds	r7, #24
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}

0800af76 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b086      	sub	sp, #24
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	60f8      	str	r0, [r7, #12]
 800af7e:	460b      	mov	r3, r1
 800af80:	607a      	str	r2, [r7, #4]
 800af82:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800af84:	7afb      	ldrb	r3, [r7, #11]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d16f      	bne.n	800b06a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	3314      	adds	r3, #20
 800af8e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800af96:	2b02      	cmp	r3, #2
 800af98:	d15a      	bne.n	800b050 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	689a      	ldr	r2, [r3, #8]
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	68db      	ldr	r3, [r3, #12]
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d914      	bls.n	800afd0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	689a      	ldr	r2, [r3, #8]
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	68db      	ldr	r3, [r3, #12]
 800afae:	1ad2      	subs	r2, r2, r3
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	461a      	mov	r2, r3
 800afba:	6879      	ldr	r1, [r7, #4]
 800afbc:	68f8      	ldr	r0, [r7, #12]
 800afbe:	f001 f8ac 	bl	800c11a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800afc2:	2300      	movs	r3, #0
 800afc4:	2200      	movs	r2, #0
 800afc6:	2100      	movs	r1, #0
 800afc8:	68f8      	ldr	r0, [r7, #12]
 800afca:	f003 fd37 	bl	800ea3c <USBD_LL_PrepareReceive>
 800afce:	e03f      	b.n	800b050 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	68da      	ldr	r2, [r3, #12]
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	429a      	cmp	r2, r3
 800afda:	d11c      	bne.n	800b016 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	685a      	ldr	r2, [r3, #4]
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d316      	bcc.n	800b016 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	685a      	ldr	r2, [r3, #4]
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d20f      	bcs.n	800b016 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aff6:	2200      	movs	r2, #0
 800aff8:	2100      	movs	r1, #0
 800affa:	68f8      	ldr	r0, [r7, #12]
 800affc:	f001 f88d 	bl	800c11a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2200      	movs	r2, #0
 800b004:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b008:	2300      	movs	r3, #0
 800b00a:	2200      	movs	r2, #0
 800b00c:	2100      	movs	r1, #0
 800b00e:	68f8      	ldr	r0, [r7, #12]
 800b010:	f003 fd14 	bl	800ea3c <USBD_LL_PrepareReceive>
 800b014:	e01c      	b.n	800b050 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	2b03      	cmp	r3, #3
 800b020:	d10f      	bne.n	800b042 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b028:	68db      	ldr	r3, [r3, #12]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d009      	beq.n	800b042 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2200      	movs	r2, #0
 800b032:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b042:	2180      	movs	r1, #128	; 0x80
 800b044:	68f8      	ldr	r0, [r7, #12]
 800b046:	f003 fc4f 	bl	800e8e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b04a:	68f8      	ldr	r0, [r7, #12]
 800b04c:	f001 f8b7 	bl	800c1be <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b056:	2b00      	cmp	r3, #0
 800b058:	d03a      	beq.n	800b0d0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b05a:	68f8      	ldr	r0, [r7, #12]
 800b05c:	f7ff fe42 	bl	800ace4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2200      	movs	r2, #0
 800b064:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b068:	e032      	b.n	800b0d0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b06a:	7afb      	ldrb	r3, [r7, #11]
 800b06c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b070:	b2db      	uxtb	r3, r3
 800b072:	4619      	mov	r1, r3
 800b074:	68f8      	ldr	r0, [r7, #12]
 800b076:	f000 f97f 	bl	800b378 <USBD_CoreFindEP>
 800b07a:	4603      	mov	r3, r0
 800b07c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b07e:	7dfb      	ldrb	r3, [r7, #23]
 800b080:	2bff      	cmp	r3, #255	; 0xff
 800b082:	d025      	beq.n	800b0d0 <USBD_LL_DataInStage+0x15a>
 800b084:	7dfb      	ldrb	r3, [r7, #23]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d122      	bne.n	800b0d0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b090:	b2db      	uxtb	r3, r3
 800b092:	2b03      	cmp	r3, #3
 800b094:	d11c      	bne.n	800b0d0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b096:	7dfa      	ldrb	r2, [r7, #23]
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	32ae      	adds	r2, #174	; 0xae
 800b09c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0a0:	695b      	ldr	r3, [r3, #20]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d014      	beq.n	800b0d0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b0a6:	7dfa      	ldrb	r2, [r7, #23]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b0ae:	7dfa      	ldrb	r2, [r7, #23]
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	32ae      	adds	r2, #174	; 0xae
 800b0b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0b8:	695b      	ldr	r3, [r3, #20]
 800b0ba:	7afa      	ldrb	r2, [r7, #11]
 800b0bc:	4611      	mov	r1, r2
 800b0be:	68f8      	ldr	r0, [r7, #12]
 800b0c0:	4798      	blx	r3
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b0c6:	7dbb      	ldrb	r3, [r7, #22]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d001      	beq.n	800b0d0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b0cc:	7dbb      	ldrb	r3, [r7, #22]
 800b0ce:	e000      	b.n	800b0d2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b0d0:	2300      	movs	r3, #0
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3718      	adds	r7, #24
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}

0800b0da <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b0da:	b580      	push	{r7, lr}
 800b0dc:	b084      	sub	sp, #16
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2200      	movs	r2, #0
 800b100:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2200      	movs	r2, #0
 800b108:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b112:	2b00      	cmp	r3, #0
 800b114:	d014      	beq.n	800b140 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d00e      	beq.n	800b140 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	687a      	ldr	r2, [r7, #4]
 800b12c:	6852      	ldr	r2, [r2, #4]
 800b12e:	b2d2      	uxtb	r2, r2
 800b130:	4611      	mov	r1, r2
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	4798      	blx	r3
 800b136:	4603      	mov	r3, r0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d001      	beq.n	800b140 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b13c:	2303      	movs	r3, #3
 800b13e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b140:	2340      	movs	r3, #64	; 0x40
 800b142:	2200      	movs	r2, #0
 800b144:	2100      	movs	r1, #0
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f003 fb89 	bl	800e85e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2201      	movs	r2, #1
 800b150:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2240      	movs	r2, #64	; 0x40
 800b158:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b15c:	2340      	movs	r3, #64	; 0x40
 800b15e:	2200      	movs	r2, #0
 800b160:	2180      	movs	r1, #128	; 0x80
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f003 fb7b 	bl	800e85e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2201      	movs	r2, #1
 800b16c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2240      	movs	r2, #64	; 0x40
 800b172:	621a      	str	r2, [r3, #32]

  return ret;
 800b174:	7bfb      	ldrb	r3, [r7, #15]
}
 800b176:	4618      	mov	r0, r3
 800b178:	3710      	adds	r7, #16
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b17e:	b480      	push	{r7}
 800b180:	b083      	sub	sp, #12
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
 800b186:	460b      	mov	r3, r1
 800b188:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	78fa      	ldrb	r2, [r7, #3]
 800b18e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b190:	2300      	movs	r3, #0
}
 800b192:	4618      	mov	r0, r3
 800b194:	370c      	adds	r7, #12
 800b196:	46bd      	mov	sp, r7
 800b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19c:	4770      	bx	lr

0800b19e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b19e:	b480      	push	{r7}
 800b1a0:	b083      	sub	sp, #12
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1ac:	b2da      	uxtb	r2, r3
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2204      	movs	r2, #4
 800b1b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b1bc:	2300      	movs	r3, #0
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	370c      	adds	r7, #12
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr

0800b1ca <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b1ca:	b480      	push	{r7}
 800b1cc:	b083      	sub	sp, #12
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1d8:	b2db      	uxtb	r3, r3
 800b1da:	2b04      	cmp	r3, #4
 800b1dc:	d106      	bne.n	800b1ec <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b1e4:	b2da      	uxtb	r2, r3
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b1ec:	2300      	movs	r3, #0
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	370c      	adds	r7, #12
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr

0800b1fa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b082      	sub	sp, #8
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b208:	b2db      	uxtb	r3, r3
 800b20a:	2b03      	cmp	r3, #3
 800b20c:	d110      	bne.n	800b230 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b214:	2b00      	cmp	r3, #0
 800b216:	d00b      	beq.n	800b230 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b21e:	69db      	ldr	r3, [r3, #28]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d005      	beq.n	800b230 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b22a:	69db      	ldr	r3, [r3, #28]
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b230:	2300      	movs	r3, #0
}
 800b232:	4618      	mov	r0, r3
 800b234:	3708      	adds	r7, #8
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}

0800b23a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b082      	sub	sp, #8
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
 800b242:	460b      	mov	r3, r1
 800b244:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	32ae      	adds	r2, #174	; 0xae
 800b250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d101      	bne.n	800b25c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b258:	2303      	movs	r3, #3
 800b25a:	e01c      	b.n	800b296 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b262:	b2db      	uxtb	r3, r3
 800b264:	2b03      	cmp	r3, #3
 800b266:	d115      	bne.n	800b294 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	32ae      	adds	r2, #174	; 0xae
 800b272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b276:	6a1b      	ldr	r3, [r3, #32]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00b      	beq.n	800b294 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	32ae      	adds	r2, #174	; 0xae
 800b286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b28a:	6a1b      	ldr	r3, [r3, #32]
 800b28c:	78fa      	ldrb	r2, [r7, #3]
 800b28e:	4611      	mov	r1, r2
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b294:	2300      	movs	r3, #0
}
 800b296:	4618      	mov	r0, r3
 800b298:	3708      	adds	r7, #8
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}

0800b29e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b29e:	b580      	push	{r7, lr}
 800b2a0:	b082      	sub	sp, #8
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	6078      	str	r0, [r7, #4]
 800b2a6:	460b      	mov	r3, r1
 800b2a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	32ae      	adds	r2, #174	; 0xae
 800b2b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d101      	bne.n	800b2c0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b2bc:	2303      	movs	r3, #3
 800b2be:	e01c      	b.n	800b2fa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2c6:	b2db      	uxtb	r3, r3
 800b2c8:	2b03      	cmp	r3, #3
 800b2ca:	d115      	bne.n	800b2f8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	32ae      	adds	r2, #174	; 0xae
 800b2d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d00b      	beq.n	800b2f8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	32ae      	adds	r2, #174	; 0xae
 800b2ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f0:	78fa      	ldrb	r2, [r7, #3]
 800b2f2:	4611      	mov	r1, r2
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b2f8:	2300      	movs	r3, #0
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3708      	adds	r7, #8
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}

0800b302 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b302:	b480      	push	{r7}
 800b304:	b083      	sub	sp, #12
 800b306:	af00      	add	r7, sp, #0
 800b308:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b30a:	2300      	movs	r3, #0
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	370c      	adds	r7, #12
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b320:	2300      	movs	r3, #0
 800b322:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2201      	movs	r2, #1
 800b328:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b332:	2b00      	cmp	r3, #0
 800b334:	d00e      	beq.n	800b354 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	6852      	ldr	r2, [r2, #4]
 800b342:	b2d2      	uxtb	r2, r2
 800b344:	4611      	mov	r1, r2
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	4798      	blx	r3
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d001      	beq.n	800b354 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b350:	2303      	movs	r3, #3
 800b352:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b354:	7bfb      	ldrb	r3, [r7, #15]
}
 800b356:	4618      	mov	r0, r3
 800b358:	3710      	adds	r7, #16
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}

0800b35e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b35e:	b480      	push	{r7}
 800b360:	b083      	sub	sp, #12
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
 800b366:	460b      	mov	r3, r1
 800b368:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b36a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	370c      	adds	r7, #12
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr

0800b378 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	460b      	mov	r3, r1
 800b382:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b384:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b386:	4618      	mov	r0, r3
 800b388:	370c      	adds	r7, #12
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr

0800b392 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b392:	b580      	push	{r7, lr}
 800b394:	b086      	sub	sp, #24
 800b396:	af00      	add	r7, sp, #0
 800b398:	6078      	str	r0, [r7, #4]
 800b39a:	460b      	mov	r3, r1
 800b39c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	885b      	ldrh	r3, [r3, #2]
 800b3ae:	b29a      	uxth	r2, r3
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	b29b      	uxth	r3, r3
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d920      	bls.n	800b3fc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	b29b      	uxth	r3, r3
 800b3c0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b3c2:	e013      	b.n	800b3ec <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b3c4:	f107 030a 	add.w	r3, r7, #10
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	6978      	ldr	r0, [r7, #20]
 800b3cc:	f000 f81b 	bl	800b406 <USBD_GetNextDesc>
 800b3d0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	785b      	ldrb	r3, [r3, #1]
 800b3d6:	2b05      	cmp	r3, #5
 800b3d8:	d108      	bne.n	800b3ec <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	789b      	ldrb	r3, [r3, #2]
 800b3e2:	78fa      	ldrb	r2, [r7, #3]
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d008      	beq.n	800b3fa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	885b      	ldrh	r3, [r3, #2]
 800b3f0:	b29a      	uxth	r2, r3
 800b3f2:	897b      	ldrh	r3, [r7, #10]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d8e5      	bhi.n	800b3c4 <USBD_GetEpDesc+0x32>
 800b3f8:	e000      	b.n	800b3fc <USBD_GetEpDesc+0x6a>
          break;
 800b3fa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b3fc:	693b      	ldr	r3, [r7, #16]
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3718      	adds	r7, #24
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}

0800b406 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b406:	b480      	push	{r7}
 800b408:	b085      	sub	sp, #20
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	6078      	str	r0, [r7, #4]
 800b40e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	881a      	ldrh	r2, [r3, #0]
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	b29b      	uxth	r3, r3
 800b41e:	4413      	add	r3, r2
 800b420:	b29a      	uxth	r2, r3
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	461a      	mov	r2, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	4413      	add	r3, r2
 800b430:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b432:	68fb      	ldr	r3, [r7, #12]
}
 800b434:	4618      	mov	r0, r3
 800b436:	3714      	adds	r7, #20
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b440:	b480      	push	{r7}
 800b442:	b087      	sub	sp, #28
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	3301      	adds	r3, #1
 800b456:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b45e:	8a3b      	ldrh	r3, [r7, #16]
 800b460:	021b      	lsls	r3, r3, #8
 800b462:	b21a      	sxth	r2, r3
 800b464:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b468:	4313      	orrs	r3, r2
 800b46a:	b21b      	sxth	r3, r3
 800b46c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b46e:	89fb      	ldrh	r3, [r7, #14]
}
 800b470:	4618      	mov	r0, r3
 800b472:	371c      	adds	r7, #28
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr

0800b47c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b486:	2300      	movs	r3, #0
 800b488:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b492:	2b40      	cmp	r3, #64	; 0x40
 800b494:	d005      	beq.n	800b4a2 <USBD_StdDevReq+0x26>
 800b496:	2b40      	cmp	r3, #64	; 0x40
 800b498:	d857      	bhi.n	800b54a <USBD_StdDevReq+0xce>
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d00f      	beq.n	800b4be <USBD_StdDevReq+0x42>
 800b49e:	2b20      	cmp	r3, #32
 800b4a0:	d153      	bne.n	800b54a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	32ae      	adds	r2, #174	; 0xae
 800b4ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4b0:	689b      	ldr	r3, [r3, #8]
 800b4b2:	6839      	ldr	r1, [r7, #0]
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	4798      	blx	r3
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	73fb      	strb	r3, [r7, #15]
      break;
 800b4bc:	e04a      	b.n	800b554 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	785b      	ldrb	r3, [r3, #1]
 800b4c2:	2b09      	cmp	r3, #9
 800b4c4:	d83b      	bhi.n	800b53e <USBD_StdDevReq+0xc2>
 800b4c6:	a201      	add	r2, pc, #4	; (adr r2, 800b4cc <USBD_StdDevReq+0x50>)
 800b4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4cc:	0800b521 	.word	0x0800b521
 800b4d0:	0800b535 	.word	0x0800b535
 800b4d4:	0800b53f 	.word	0x0800b53f
 800b4d8:	0800b52b 	.word	0x0800b52b
 800b4dc:	0800b53f 	.word	0x0800b53f
 800b4e0:	0800b4ff 	.word	0x0800b4ff
 800b4e4:	0800b4f5 	.word	0x0800b4f5
 800b4e8:	0800b53f 	.word	0x0800b53f
 800b4ec:	0800b517 	.word	0x0800b517
 800b4f0:	0800b509 	.word	0x0800b509
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b4f4:	6839      	ldr	r1, [r7, #0]
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 fa3c 	bl	800b974 <USBD_GetDescriptor>
          break;
 800b4fc:	e024      	b.n	800b548 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b4fe:	6839      	ldr	r1, [r7, #0]
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f000 fba1 	bl	800bc48 <USBD_SetAddress>
          break;
 800b506:	e01f      	b.n	800b548 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b508:	6839      	ldr	r1, [r7, #0]
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f000 fbe0 	bl	800bcd0 <USBD_SetConfig>
 800b510:	4603      	mov	r3, r0
 800b512:	73fb      	strb	r3, [r7, #15]
          break;
 800b514:	e018      	b.n	800b548 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b516:	6839      	ldr	r1, [r7, #0]
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f000 fc83 	bl	800be24 <USBD_GetConfig>
          break;
 800b51e:	e013      	b.n	800b548 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b520:	6839      	ldr	r1, [r7, #0]
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 fcb4 	bl	800be90 <USBD_GetStatus>
          break;
 800b528:	e00e      	b.n	800b548 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b52a:	6839      	ldr	r1, [r7, #0]
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 fce3 	bl	800bef8 <USBD_SetFeature>
          break;
 800b532:	e009      	b.n	800b548 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b534:	6839      	ldr	r1, [r7, #0]
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 fd07 	bl	800bf4a <USBD_ClrFeature>
          break;
 800b53c:	e004      	b.n	800b548 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b53e:	6839      	ldr	r1, [r7, #0]
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 fd5e 	bl	800c002 <USBD_CtlError>
          break;
 800b546:	bf00      	nop
      }
      break;
 800b548:	e004      	b.n	800b554 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b54a:	6839      	ldr	r1, [r7, #0]
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f000 fd58 	bl	800c002 <USBD_CtlError>
      break;
 800b552:	bf00      	nop
  }

  return ret;
 800b554:	7bfb      	ldrb	r3, [r7, #15]
}
 800b556:	4618      	mov	r0, r3
 800b558:	3710      	adds	r7, #16
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}
 800b55e:	bf00      	nop

0800b560 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b084      	sub	sp, #16
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b56a:	2300      	movs	r3, #0
 800b56c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b576:	2b40      	cmp	r3, #64	; 0x40
 800b578:	d005      	beq.n	800b586 <USBD_StdItfReq+0x26>
 800b57a:	2b40      	cmp	r3, #64	; 0x40
 800b57c:	d852      	bhi.n	800b624 <USBD_StdItfReq+0xc4>
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d001      	beq.n	800b586 <USBD_StdItfReq+0x26>
 800b582:	2b20      	cmp	r3, #32
 800b584:	d14e      	bne.n	800b624 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b58c:	b2db      	uxtb	r3, r3
 800b58e:	3b01      	subs	r3, #1
 800b590:	2b02      	cmp	r3, #2
 800b592:	d840      	bhi.n	800b616 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	889b      	ldrh	r3, [r3, #4]
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d836      	bhi.n	800b60c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	889b      	ldrh	r3, [r3, #4]
 800b5a2:	b2db      	uxtb	r3, r3
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f7ff fed9 	bl	800b35e <USBD_CoreFindIF>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b5b0:	7bbb      	ldrb	r3, [r7, #14]
 800b5b2:	2bff      	cmp	r3, #255	; 0xff
 800b5b4:	d01d      	beq.n	800b5f2 <USBD_StdItfReq+0x92>
 800b5b6:	7bbb      	ldrb	r3, [r7, #14]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d11a      	bne.n	800b5f2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b5bc:	7bba      	ldrb	r2, [r7, #14]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	32ae      	adds	r2, #174	; 0xae
 800b5c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5c6:	689b      	ldr	r3, [r3, #8]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d00f      	beq.n	800b5ec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b5cc:	7bba      	ldrb	r2, [r7, #14]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b5d4:	7bba      	ldrb	r2, [r7, #14]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	32ae      	adds	r2, #174	; 0xae
 800b5da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5de:	689b      	ldr	r3, [r3, #8]
 800b5e0:	6839      	ldr	r1, [r7, #0]
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	4798      	blx	r3
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b5ea:	e004      	b.n	800b5f6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b5ec:	2303      	movs	r3, #3
 800b5ee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b5f0:	e001      	b.n	800b5f6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b5f2:	2303      	movs	r3, #3
 800b5f4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	88db      	ldrh	r3, [r3, #6]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d110      	bne.n	800b620 <USBD_StdItfReq+0xc0>
 800b5fe:	7bfb      	ldrb	r3, [r7, #15]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d10d      	bne.n	800b620 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f000 fdc7 	bl	800c198 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b60a:	e009      	b.n	800b620 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b60c:	6839      	ldr	r1, [r7, #0]
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 fcf7 	bl	800c002 <USBD_CtlError>
          break;
 800b614:	e004      	b.n	800b620 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b616:	6839      	ldr	r1, [r7, #0]
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f000 fcf2 	bl	800c002 <USBD_CtlError>
          break;
 800b61e:	e000      	b.n	800b622 <USBD_StdItfReq+0xc2>
          break;
 800b620:	bf00      	nop
      }
      break;
 800b622:	e004      	b.n	800b62e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b624:	6839      	ldr	r1, [r7, #0]
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 fceb 	bl	800c002 <USBD_CtlError>
      break;
 800b62c:	bf00      	nop
  }

  return ret;
 800b62e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b630:	4618      	mov	r0, r3
 800b632:	3710      	adds	r7, #16
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b642:	2300      	movs	r3, #0
 800b644:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	889b      	ldrh	r3, [r3, #4]
 800b64a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b654:	2b40      	cmp	r3, #64	; 0x40
 800b656:	d007      	beq.n	800b668 <USBD_StdEPReq+0x30>
 800b658:	2b40      	cmp	r3, #64	; 0x40
 800b65a:	f200 817f 	bhi.w	800b95c <USBD_StdEPReq+0x324>
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d02a      	beq.n	800b6b8 <USBD_StdEPReq+0x80>
 800b662:	2b20      	cmp	r3, #32
 800b664:	f040 817a 	bne.w	800b95c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b668:	7bbb      	ldrb	r3, [r7, #14]
 800b66a:	4619      	mov	r1, r3
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f7ff fe83 	bl	800b378 <USBD_CoreFindEP>
 800b672:	4603      	mov	r3, r0
 800b674:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b676:	7b7b      	ldrb	r3, [r7, #13]
 800b678:	2bff      	cmp	r3, #255	; 0xff
 800b67a:	f000 8174 	beq.w	800b966 <USBD_StdEPReq+0x32e>
 800b67e:	7b7b      	ldrb	r3, [r7, #13]
 800b680:	2b00      	cmp	r3, #0
 800b682:	f040 8170 	bne.w	800b966 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b686:	7b7a      	ldrb	r2, [r7, #13]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b68e:	7b7a      	ldrb	r2, [r7, #13]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	32ae      	adds	r2, #174	; 0xae
 800b694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	f000 8163 	beq.w	800b966 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b6a0:	7b7a      	ldrb	r2, [r7, #13]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	32ae      	adds	r2, #174	; 0xae
 800b6a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6aa:	689b      	ldr	r3, [r3, #8]
 800b6ac:	6839      	ldr	r1, [r7, #0]
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	4798      	blx	r3
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b6b6:	e156      	b.n	800b966 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	785b      	ldrb	r3, [r3, #1]
 800b6bc:	2b03      	cmp	r3, #3
 800b6be:	d008      	beq.n	800b6d2 <USBD_StdEPReq+0x9a>
 800b6c0:	2b03      	cmp	r3, #3
 800b6c2:	f300 8145 	bgt.w	800b950 <USBD_StdEPReq+0x318>
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	f000 809b 	beq.w	800b802 <USBD_StdEPReq+0x1ca>
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d03c      	beq.n	800b74a <USBD_StdEPReq+0x112>
 800b6d0:	e13e      	b.n	800b950 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	2b02      	cmp	r3, #2
 800b6dc:	d002      	beq.n	800b6e4 <USBD_StdEPReq+0xac>
 800b6de:	2b03      	cmp	r3, #3
 800b6e0:	d016      	beq.n	800b710 <USBD_StdEPReq+0xd8>
 800b6e2:	e02c      	b.n	800b73e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b6e4:	7bbb      	ldrb	r3, [r7, #14]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d00d      	beq.n	800b706 <USBD_StdEPReq+0xce>
 800b6ea:	7bbb      	ldrb	r3, [r7, #14]
 800b6ec:	2b80      	cmp	r3, #128	; 0x80
 800b6ee:	d00a      	beq.n	800b706 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b6f0:	7bbb      	ldrb	r3, [r7, #14]
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f003 f8f7 	bl	800e8e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b6fa:	2180      	movs	r1, #128	; 0x80
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f003 f8f3 	bl	800e8e8 <USBD_LL_StallEP>
 800b702:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b704:	e020      	b.n	800b748 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b706:	6839      	ldr	r1, [r7, #0]
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 fc7a 	bl	800c002 <USBD_CtlError>
              break;
 800b70e:	e01b      	b.n	800b748 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	885b      	ldrh	r3, [r3, #2]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d10e      	bne.n	800b736 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b718:	7bbb      	ldrb	r3, [r7, #14]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d00b      	beq.n	800b736 <USBD_StdEPReq+0xfe>
 800b71e:	7bbb      	ldrb	r3, [r7, #14]
 800b720:	2b80      	cmp	r3, #128	; 0x80
 800b722:	d008      	beq.n	800b736 <USBD_StdEPReq+0xfe>
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	88db      	ldrh	r3, [r3, #6]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d104      	bne.n	800b736 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b72c:	7bbb      	ldrb	r3, [r7, #14]
 800b72e:	4619      	mov	r1, r3
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f003 f8d9 	bl	800e8e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 fd2e 	bl	800c198 <USBD_CtlSendStatus>

              break;
 800b73c:	e004      	b.n	800b748 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b73e:	6839      	ldr	r1, [r7, #0]
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 fc5e 	bl	800c002 <USBD_CtlError>
              break;
 800b746:	bf00      	nop
          }
          break;
 800b748:	e107      	b.n	800b95a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b750:	b2db      	uxtb	r3, r3
 800b752:	2b02      	cmp	r3, #2
 800b754:	d002      	beq.n	800b75c <USBD_StdEPReq+0x124>
 800b756:	2b03      	cmp	r3, #3
 800b758:	d016      	beq.n	800b788 <USBD_StdEPReq+0x150>
 800b75a:	e04b      	b.n	800b7f4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b75c:	7bbb      	ldrb	r3, [r7, #14]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d00d      	beq.n	800b77e <USBD_StdEPReq+0x146>
 800b762:	7bbb      	ldrb	r3, [r7, #14]
 800b764:	2b80      	cmp	r3, #128	; 0x80
 800b766:	d00a      	beq.n	800b77e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b768:	7bbb      	ldrb	r3, [r7, #14]
 800b76a:	4619      	mov	r1, r3
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f003 f8bb 	bl	800e8e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b772:	2180      	movs	r1, #128	; 0x80
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f003 f8b7 	bl	800e8e8 <USBD_LL_StallEP>
 800b77a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b77c:	e040      	b.n	800b800 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b77e:	6839      	ldr	r1, [r7, #0]
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 fc3e 	bl	800c002 <USBD_CtlError>
              break;
 800b786:	e03b      	b.n	800b800 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	885b      	ldrh	r3, [r3, #2]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d136      	bne.n	800b7fe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b790:	7bbb      	ldrb	r3, [r7, #14]
 800b792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b796:	2b00      	cmp	r3, #0
 800b798:	d004      	beq.n	800b7a4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b79a:	7bbb      	ldrb	r3, [r7, #14]
 800b79c:	4619      	mov	r1, r3
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f003 f8c1 	bl	800e926 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f000 fcf7 	bl	800c198 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b7aa:	7bbb      	ldrb	r3, [r7, #14]
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f7ff fde2 	bl	800b378 <USBD_CoreFindEP>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b7b8:	7b7b      	ldrb	r3, [r7, #13]
 800b7ba:	2bff      	cmp	r3, #255	; 0xff
 800b7bc:	d01f      	beq.n	800b7fe <USBD_StdEPReq+0x1c6>
 800b7be:	7b7b      	ldrb	r3, [r7, #13]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d11c      	bne.n	800b7fe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b7c4:	7b7a      	ldrb	r2, [r7, #13]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b7cc:	7b7a      	ldrb	r2, [r7, #13]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	32ae      	adds	r2, #174	; 0xae
 800b7d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7d6:	689b      	ldr	r3, [r3, #8]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d010      	beq.n	800b7fe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b7dc:	7b7a      	ldrb	r2, [r7, #13]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	32ae      	adds	r2, #174	; 0xae
 800b7e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7e6:	689b      	ldr	r3, [r3, #8]
 800b7e8:	6839      	ldr	r1, [r7, #0]
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	4798      	blx	r3
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b7f2:	e004      	b.n	800b7fe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b7f4:	6839      	ldr	r1, [r7, #0]
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f000 fc03 	bl	800c002 <USBD_CtlError>
              break;
 800b7fc:	e000      	b.n	800b800 <USBD_StdEPReq+0x1c8>
              break;
 800b7fe:	bf00      	nop
          }
          break;
 800b800:	e0ab      	b.n	800b95a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b808:	b2db      	uxtb	r3, r3
 800b80a:	2b02      	cmp	r3, #2
 800b80c:	d002      	beq.n	800b814 <USBD_StdEPReq+0x1dc>
 800b80e:	2b03      	cmp	r3, #3
 800b810:	d032      	beq.n	800b878 <USBD_StdEPReq+0x240>
 800b812:	e097      	b.n	800b944 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b814:	7bbb      	ldrb	r3, [r7, #14]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d007      	beq.n	800b82a <USBD_StdEPReq+0x1f2>
 800b81a:	7bbb      	ldrb	r3, [r7, #14]
 800b81c:	2b80      	cmp	r3, #128	; 0x80
 800b81e:	d004      	beq.n	800b82a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b820:	6839      	ldr	r1, [r7, #0]
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f000 fbed 	bl	800c002 <USBD_CtlError>
                break;
 800b828:	e091      	b.n	800b94e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b82a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	da0b      	bge.n	800b84a <USBD_StdEPReq+0x212>
 800b832:	7bbb      	ldrb	r3, [r7, #14]
 800b834:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b838:	4613      	mov	r3, r2
 800b83a:	009b      	lsls	r3, r3, #2
 800b83c:	4413      	add	r3, r2
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	3310      	adds	r3, #16
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	4413      	add	r3, r2
 800b846:	3304      	adds	r3, #4
 800b848:	e00b      	b.n	800b862 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b84a:	7bbb      	ldrb	r3, [r7, #14]
 800b84c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b850:	4613      	mov	r3, r2
 800b852:	009b      	lsls	r3, r3, #2
 800b854:	4413      	add	r3, r2
 800b856:	009b      	lsls	r3, r3, #2
 800b858:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b85c:	687a      	ldr	r2, [r7, #4]
 800b85e:	4413      	add	r3, r2
 800b860:	3304      	adds	r3, #4
 800b862:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	2200      	movs	r2, #0
 800b868:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	2202      	movs	r2, #2
 800b86e:	4619      	mov	r1, r3
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f000 fc37 	bl	800c0e4 <USBD_CtlSendData>
              break;
 800b876:	e06a      	b.n	800b94e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b878:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	da11      	bge.n	800b8a4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b880:	7bbb      	ldrb	r3, [r7, #14]
 800b882:	f003 020f 	and.w	r2, r3, #15
 800b886:	6879      	ldr	r1, [r7, #4]
 800b888:	4613      	mov	r3, r2
 800b88a:	009b      	lsls	r3, r3, #2
 800b88c:	4413      	add	r3, r2
 800b88e:	009b      	lsls	r3, r3, #2
 800b890:	440b      	add	r3, r1
 800b892:	3324      	adds	r3, #36	; 0x24
 800b894:	881b      	ldrh	r3, [r3, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d117      	bne.n	800b8ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b89a:	6839      	ldr	r1, [r7, #0]
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f000 fbb0 	bl	800c002 <USBD_CtlError>
                  break;
 800b8a2:	e054      	b.n	800b94e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b8a4:	7bbb      	ldrb	r3, [r7, #14]
 800b8a6:	f003 020f 	and.w	r2, r3, #15
 800b8aa:	6879      	ldr	r1, [r7, #4]
 800b8ac:	4613      	mov	r3, r2
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	4413      	add	r3, r2
 800b8b2:	009b      	lsls	r3, r3, #2
 800b8b4:	440b      	add	r3, r1
 800b8b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b8ba:	881b      	ldrh	r3, [r3, #0]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d104      	bne.n	800b8ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b8c0:	6839      	ldr	r1, [r7, #0]
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 fb9d 	bl	800c002 <USBD_CtlError>
                  break;
 800b8c8:	e041      	b.n	800b94e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b8ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	da0b      	bge.n	800b8ea <USBD_StdEPReq+0x2b2>
 800b8d2:	7bbb      	ldrb	r3, [r7, #14]
 800b8d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b8d8:	4613      	mov	r3, r2
 800b8da:	009b      	lsls	r3, r3, #2
 800b8dc:	4413      	add	r3, r2
 800b8de:	009b      	lsls	r3, r3, #2
 800b8e0:	3310      	adds	r3, #16
 800b8e2:	687a      	ldr	r2, [r7, #4]
 800b8e4:	4413      	add	r3, r2
 800b8e6:	3304      	adds	r3, #4
 800b8e8:	e00b      	b.n	800b902 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b8ea:	7bbb      	ldrb	r3, [r7, #14]
 800b8ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b8f0:	4613      	mov	r3, r2
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	4413      	add	r3, r2
 800b8f6:	009b      	lsls	r3, r3, #2
 800b8f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b8fc:	687a      	ldr	r2, [r7, #4]
 800b8fe:	4413      	add	r3, r2
 800b900:	3304      	adds	r3, #4
 800b902:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b904:	7bbb      	ldrb	r3, [r7, #14]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d002      	beq.n	800b910 <USBD_StdEPReq+0x2d8>
 800b90a:	7bbb      	ldrb	r3, [r7, #14]
 800b90c:	2b80      	cmp	r3, #128	; 0x80
 800b90e:	d103      	bne.n	800b918 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	2200      	movs	r2, #0
 800b914:	601a      	str	r2, [r3, #0]
 800b916:	e00e      	b.n	800b936 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b918:	7bbb      	ldrb	r3, [r7, #14]
 800b91a:	4619      	mov	r1, r3
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f003 f821 	bl	800e964 <USBD_LL_IsStallEP>
 800b922:	4603      	mov	r3, r0
 800b924:	2b00      	cmp	r3, #0
 800b926:	d003      	beq.n	800b930 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	2201      	movs	r2, #1
 800b92c:	601a      	str	r2, [r3, #0]
 800b92e:	e002      	b.n	800b936 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	2200      	movs	r2, #0
 800b934:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	2202      	movs	r2, #2
 800b93a:	4619      	mov	r1, r3
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 fbd1 	bl	800c0e4 <USBD_CtlSendData>
              break;
 800b942:	e004      	b.n	800b94e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b944:	6839      	ldr	r1, [r7, #0]
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 fb5b 	bl	800c002 <USBD_CtlError>
              break;
 800b94c:	bf00      	nop
          }
          break;
 800b94e:	e004      	b.n	800b95a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b950:	6839      	ldr	r1, [r7, #0]
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 fb55 	bl	800c002 <USBD_CtlError>
          break;
 800b958:	bf00      	nop
      }
      break;
 800b95a:	e005      	b.n	800b968 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b95c:	6839      	ldr	r1, [r7, #0]
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 fb4f 	bl	800c002 <USBD_CtlError>
      break;
 800b964:	e000      	b.n	800b968 <USBD_StdEPReq+0x330>
      break;
 800b966:	bf00      	nop
  }

  return ret;
 800b968:	7bfb      	ldrb	r3, [r7, #15]
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3710      	adds	r7, #16
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
	...

0800b974 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b084      	sub	sp, #16
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b97e:	2300      	movs	r3, #0
 800b980:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b982:	2300      	movs	r3, #0
 800b984:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b986:	2300      	movs	r3, #0
 800b988:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	885b      	ldrh	r3, [r3, #2]
 800b98e:	0a1b      	lsrs	r3, r3, #8
 800b990:	b29b      	uxth	r3, r3
 800b992:	3b01      	subs	r3, #1
 800b994:	2b06      	cmp	r3, #6
 800b996:	f200 8128 	bhi.w	800bbea <USBD_GetDescriptor+0x276>
 800b99a:	a201      	add	r2, pc, #4	; (adr r2, 800b9a0 <USBD_GetDescriptor+0x2c>)
 800b99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a0:	0800b9bd 	.word	0x0800b9bd
 800b9a4:	0800b9d5 	.word	0x0800b9d5
 800b9a8:	0800ba15 	.word	0x0800ba15
 800b9ac:	0800bbeb 	.word	0x0800bbeb
 800b9b0:	0800bbeb 	.word	0x0800bbeb
 800b9b4:	0800bb8b 	.word	0x0800bb8b
 800b9b8:	0800bbb7 	.word	0x0800bbb7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	7c12      	ldrb	r2, [r2, #16]
 800b9c8:	f107 0108 	add.w	r1, r7, #8
 800b9cc:	4610      	mov	r0, r2
 800b9ce:	4798      	blx	r3
 800b9d0:	60f8      	str	r0, [r7, #12]
      break;
 800b9d2:	e112      	b.n	800bbfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	7c1b      	ldrb	r3, [r3, #16]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d10d      	bne.n	800b9f8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9e4:	f107 0208 	add.w	r2, r7, #8
 800b9e8:	4610      	mov	r0, r2
 800b9ea:	4798      	blx	r3
 800b9ec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	2202      	movs	r2, #2
 800b9f4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b9f6:	e100      	b.n	800bbfa <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba00:	f107 0208 	add.w	r2, r7, #8
 800ba04:	4610      	mov	r0, r2
 800ba06:	4798      	blx	r3
 800ba08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	2202      	movs	r2, #2
 800ba10:	701a      	strb	r2, [r3, #0]
      break;
 800ba12:	e0f2      	b.n	800bbfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	885b      	ldrh	r3, [r3, #2]
 800ba18:	b2db      	uxtb	r3, r3
 800ba1a:	2b05      	cmp	r3, #5
 800ba1c:	f200 80ac 	bhi.w	800bb78 <USBD_GetDescriptor+0x204>
 800ba20:	a201      	add	r2, pc, #4	; (adr r2, 800ba28 <USBD_GetDescriptor+0xb4>)
 800ba22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba26:	bf00      	nop
 800ba28:	0800ba41 	.word	0x0800ba41
 800ba2c:	0800ba75 	.word	0x0800ba75
 800ba30:	0800baa9 	.word	0x0800baa9
 800ba34:	0800badd 	.word	0x0800badd
 800ba38:	0800bb11 	.word	0x0800bb11
 800ba3c:	0800bb45 	.word	0x0800bb45
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d00b      	beq.n	800ba64 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	687a      	ldr	r2, [r7, #4]
 800ba56:	7c12      	ldrb	r2, [r2, #16]
 800ba58:	f107 0108 	add.w	r1, r7, #8
 800ba5c:	4610      	mov	r0, r2
 800ba5e:	4798      	blx	r3
 800ba60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba62:	e091      	b.n	800bb88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba64:	6839      	ldr	r1, [r7, #0]
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 facb 	bl	800c002 <USBD_CtlError>
            err++;
 800ba6c:	7afb      	ldrb	r3, [r7, #11]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	72fb      	strb	r3, [r7, #11]
          break;
 800ba72:	e089      	b.n	800bb88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d00b      	beq.n	800ba98 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	687a      	ldr	r2, [r7, #4]
 800ba8a:	7c12      	ldrb	r2, [r2, #16]
 800ba8c:	f107 0108 	add.w	r1, r7, #8
 800ba90:	4610      	mov	r0, r2
 800ba92:	4798      	blx	r3
 800ba94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba96:	e077      	b.n	800bb88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba98:	6839      	ldr	r1, [r7, #0]
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 fab1 	bl	800c002 <USBD_CtlError>
            err++;
 800baa0:	7afb      	ldrb	r3, [r7, #11]
 800baa2:	3301      	adds	r3, #1
 800baa4:	72fb      	strb	r3, [r7, #11]
          break;
 800baa6:	e06f      	b.n	800bb88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baae:	68db      	ldr	r3, [r3, #12]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d00b      	beq.n	800bacc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	7c12      	ldrb	r2, [r2, #16]
 800bac0:	f107 0108 	add.w	r1, r7, #8
 800bac4:	4610      	mov	r0, r2
 800bac6:	4798      	blx	r3
 800bac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800baca:	e05d      	b.n	800bb88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bacc:	6839      	ldr	r1, [r7, #0]
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 fa97 	bl	800c002 <USBD_CtlError>
            err++;
 800bad4:	7afb      	ldrb	r3, [r7, #11]
 800bad6:	3301      	adds	r3, #1
 800bad8:	72fb      	strb	r3, [r7, #11]
          break;
 800bada:	e055      	b.n	800bb88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bae2:	691b      	ldr	r3, [r3, #16]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d00b      	beq.n	800bb00 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baee:	691b      	ldr	r3, [r3, #16]
 800baf0:	687a      	ldr	r2, [r7, #4]
 800baf2:	7c12      	ldrb	r2, [r2, #16]
 800baf4:	f107 0108 	add.w	r1, r7, #8
 800baf8:	4610      	mov	r0, r2
 800bafa:	4798      	blx	r3
 800bafc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bafe:	e043      	b.n	800bb88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb00:	6839      	ldr	r1, [r7, #0]
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 fa7d 	bl	800c002 <USBD_CtlError>
            err++;
 800bb08:	7afb      	ldrb	r3, [r7, #11]
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	72fb      	strb	r3, [r7, #11]
          break;
 800bb0e:	e03b      	b.n	800bb88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb16:	695b      	ldr	r3, [r3, #20]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d00b      	beq.n	800bb34 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb22:	695b      	ldr	r3, [r3, #20]
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	7c12      	ldrb	r2, [r2, #16]
 800bb28:	f107 0108 	add.w	r1, r7, #8
 800bb2c:	4610      	mov	r0, r2
 800bb2e:	4798      	blx	r3
 800bb30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb32:	e029      	b.n	800bb88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb34:	6839      	ldr	r1, [r7, #0]
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f000 fa63 	bl	800c002 <USBD_CtlError>
            err++;
 800bb3c:	7afb      	ldrb	r3, [r7, #11]
 800bb3e:	3301      	adds	r3, #1
 800bb40:	72fb      	strb	r3, [r7, #11]
          break;
 800bb42:	e021      	b.n	800bb88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb4a:	699b      	ldr	r3, [r3, #24]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d00b      	beq.n	800bb68 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb56:	699b      	ldr	r3, [r3, #24]
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	7c12      	ldrb	r2, [r2, #16]
 800bb5c:	f107 0108 	add.w	r1, r7, #8
 800bb60:	4610      	mov	r0, r2
 800bb62:	4798      	blx	r3
 800bb64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb66:	e00f      	b.n	800bb88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb68:	6839      	ldr	r1, [r7, #0]
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 fa49 	bl	800c002 <USBD_CtlError>
            err++;
 800bb70:	7afb      	ldrb	r3, [r7, #11]
 800bb72:	3301      	adds	r3, #1
 800bb74:	72fb      	strb	r3, [r7, #11]
          break;
 800bb76:	e007      	b.n	800bb88 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bb78:	6839      	ldr	r1, [r7, #0]
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 fa41 	bl	800c002 <USBD_CtlError>
          err++;
 800bb80:	7afb      	ldrb	r3, [r7, #11]
 800bb82:	3301      	adds	r3, #1
 800bb84:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bb86:	bf00      	nop
      }
      break;
 800bb88:	e037      	b.n	800bbfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	7c1b      	ldrb	r3, [r3, #16]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d109      	bne.n	800bba6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb9a:	f107 0208 	add.w	r2, r7, #8
 800bb9e:	4610      	mov	r0, r2
 800bba0:	4798      	blx	r3
 800bba2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bba4:	e029      	b.n	800bbfa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bba6:	6839      	ldr	r1, [r7, #0]
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 fa2a 	bl	800c002 <USBD_CtlError>
        err++;
 800bbae:	7afb      	ldrb	r3, [r7, #11]
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	72fb      	strb	r3, [r7, #11]
      break;
 800bbb4:	e021      	b.n	800bbfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	7c1b      	ldrb	r3, [r3, #16]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d10d      	bne.n	800bbda <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbc6:	f107 0208 	add.w	r2, r7, #8
 800bbca:	4610      	mov	r0, r2
 800bbcc:	4798      	blx	r3
 800bbce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	3301      	adds	r3, #1
 800bbd4:	2207      	movs	r2, #7
 800bbd6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bbd8:	e00f      	b.n	800bbfa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bbda:	6839      	ldr	r1, [r7, #0]
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f000 fa10 	bl	800c002 <USBD_CtlError>
        err++;
 800bbe2:	7afb      	ldrb	r3, [r7, #11]
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	72fb      	strb	r3, [r7, #11]
      break;
 800bbe8:	e007      	b.n	800bbfa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bbea:	6839      	ldr	r1, [r7, #0]
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f000 fa08 	bl	800c002 <USBD_CtlError>
      err++;
 800bbf2:	7afb      	ldrb	r3, [r7, #11]
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	72fb      	strb	r3, [r7, #11]
      break;
 800bbf8:	bf00      	nop
  }

  if (err != 0U)
 800bbfa:	7afb      	ldrb	r3, [r7, #11]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d11e      	bne.n	800bc3e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	88db      	ldrh	r3, [r3, #6]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d016      	beq.n	800bc36 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bc08:	893b      	ldrh	r3, [r7, #8]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d00e      	beq.n	800bc2c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	88da      	ldrh	r2, [r3, #6]
 800bc12:	893b      	ldrh	r3, [r7, #8]
 800bc14:	4293      	cmp	r3, r2
 800bc16:	bf28      	it	cs
 800bc18:	4613      	movcs	r3, r2
 800bc1a:	b29b      	uxth	r3, r3
 800bc1c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bc1e:	893b      	ldrh	r3, [r7, #8]
 800bc20:	461a      	mov	r2, r3
 800bc22:	68f9      	ldr	r1, [r7, #12]
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f000 fa5d 	bl	800c0e4 <USBD_CtlSendData>
 800bc2a:	e009      	b.n	800bc40 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bc2c:	6839      	ldr	r1, [r7, #0]
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f000 f9e7 	bl	800c002 <USBD_CtlError>
 800bc34:	e004      	b.n	800bc40 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f000 faae 	bl	800c198 <USBD_CtlSendStatus>
 800bc3c:	e000      	b.n	800bc40 <USBD_GetDescriptor+0x2cc>
    return;
 800bc3e:	bf00      	nop
  }
}
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop

0800bc48 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b084      	sub	sp, #16
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	889b      	ldrh	r3, [r3, #4]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d131      	bne.n	800bcbe <USBD_SetAddress+0x76>
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	88db      	ldrh	r3, [r3, #6]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d12d      	bne.n	800bcbe <USBD_SetAddress+0x76>
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	885b      	ldrh	r3, [r3, #2]
 800bc66:	2b7f      	cmp	r3, #127	; 0x7f
 800bc68:	d829      	bhi.n	800bcbe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	885b      	ldrh	r3, [r3, #2]
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc7c:	b2db      	uxtb	r3, r3
 800bc7e:	2b03      	cmp	r3, #3
 800bc80:	d104      	bne.n	800bc8c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bc82:	6839      	ldr	r1, [r7, #0]
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f000 f9bc 	bl	800c002 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc8a:	e01d      	b.n	800bcc8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	7bfa      	ldrb	r2, [r7, #15]
 800bc90:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bc94:	7bfb      	ldrb	r3, [r7, #15]
 800bc96:	4619      	mov	r1, r3
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f002 fe8f 	bl	800e9bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 fa7a 	bl	800c198 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bca4:	7bfb      	ldrb	r3, [r7, #15]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d004      	beq.n	800bcb4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2202      	movs	r2, #2
 800bcae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcb2:	e009      	b.n	800bcc8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcbc:	e004      	b.n	800bcc8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bcbe:	6839      	ldr	r1, [r7, #0]
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f000 f99e 	bl	800c002 <USBD_CtlError>
  }
}
 800bcc6:	bf00      	nop
 800bcc8:	bf00      	nop
 800bcca:	3710      	adds	r7, #16
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	885b      	ldrh	r3, [r3, #2]
 800bce2:	b2da      	uxtb	r2, r3
 800bce4:	4b4e      	ldr	r3, [pc, #312]	; (800be20 <USBD_SetConfig+0x150>)
 800bce6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bce8:	4b4d      	ldr	r3, [pc, #308]	; (800be20 <USBD_SetConfig+0x150>)
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	d905      	bls.n	800bcfc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bcf0:	6839      	ldr	r1, [r7, #0]
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f000 f985 	bl	800c002 <USBD_CtlError>
    return USBD_FAIL;
 800bcf8:	2303      	movs	r3, #3
 800bcfa:	e08c      	b.n	800be16 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	2b02      	cmp	r3, #2
 800bd06:	d002      	beq.n	800bd0e <USBD_SetConfig+0x3e>
 800bd08:	2b03      	cmp	r3, #3
 800bd0a:	d029      	beq.n	800bd60 <USBD_SetConfig+0x90>
 800bd0c:	e075      	b.n	800bdfa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bd0e:	4b44      	ldr	r3, [pc, #272]	; (800be20 <USBD_SetConfig+0x150>)
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d020      	beq.n	800bd58 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bd16:	4b42      	ldr	r3, [pc, #264]	; (800be20 <USBD_SetConfig+0x150>)
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bd20:	4b3f      	ldr	r3, [pc, #252]	; (800be20 <USBD_SetConfig+0x150>)
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	4619      	mov	r1, r3
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f7fe ffe7 	bl	800acfa <USBD_SetClassConfig>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bd30:	7bfb      	ldrb	r3, [r7, #15]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d008      	beq.n	800bd48 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bd36:	6839      	ldr	r1, [r7, #0]
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f000 f962 	bl	800c002 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2202      	movs	r2, #2
 800bd42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bd46:	e065      	b.n	800be14 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f000 fa25 	bl	800c198 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2203      	movs	r2, #3
 800bd52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bd56:	e05d      	b.n	800be14 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f000 fa1d 	bl	800c198 <USBD_CtlSendStatus>
      break;
 800bd5e:	e059      	b.n	800be14 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bd60:	4b2f      	ldr	r3, [pc, #188]	; (800be20 <USBD_SetConfig+0x150>)
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d112      	bne.n	800bd8e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2202      	movs	r2, #2
 800bd6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bd70:	4b2b      	ldr	r3, [pc, #172]	; (800be20 <USBD_SetConfig+0x150>)
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	461a      	mov	r2, r3
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bd7a:	4b29      	ldr	r3, [pc, #164]	; (800be20 <USBD_SetConfig+0x150>)
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	4619      	mov	r1, r3
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f7fe ffd6 	bl	800ad32 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f000 fa06 	bl	800c198 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bd8c:	e042      	b.n	800be14 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bd8e:	4b24      	ldr	r3, [pc, #144]	; (800be20 <USBD_SetConfig+0x150>)
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	461a      	mov	r2, r3
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d02a      	beq.n	800bdf2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	b2db      	uxtb	r3, r3
 800bda2:	4619      	mov	r1, r3
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f7fe ffc4 	bl	800ad32 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bdaa:	4b1d      	ldr	r3, [pc, #116]	; (800be20 <USBD_SetConfig+0x150>)
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	461a      	mov	r2, r3
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bdb4:	4b1a      	ldr	r3, [pc, #104]	; (800be20 <USBD_SetConfig+0x150>)
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	4619      	mov	r1, r3
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f7fe ff9d 	bl	800acfa <USBD_SetClassConfig>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bdc4:	7bfb      	ldrb	r3, [r7, #15]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d00f      	beq.n	800bdea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bdca:	6839      	ldr	r1, [r7, #0]
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f000 f918 	bl	800c002 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	b2db      	uxtb	r3, r3
 800bdd8:	4619      	mov	r1, r3
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f7fe ffa9 	bl	800ad32 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2202      	movs	r2, #2
 800bde4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bde8:	e014      	b.n	800be14 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f000 f9d4 	bl	800c198 <USBD_CtlSendStatus>
      break;
 800bdf0:	e010      	b.n	800be14 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 f9d0 	bl	800c198 <USBD_CtlSendStatus>
      break;
 800bdf8:	e00c      	b.n	800be14 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bdfa:	6839      	ldr	r1, [r7, #0]
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f000 f900 	bl	800c002 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800be02:	4b07      	ldr	r3, [pc, #28]	; (800be20 <USBD_SetConfig+0x150>)
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	4619      	mov	r1, r3
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f7fe ff92 	bl	800ad32 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800be0e:	2303      	movs	r3, #3
 800be10:	73fb      	strb	r3, [r7, #15]
      break;
 800be12:	bf00      	nop
  }

  return ret;
 800be14:	7bfb      	ldrb	r3, [r7, #15]
}
 800be16:	4618      	mov	r0, r3
 800be18:	3710      	adds	r7, #16
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop
 800be20:	20000820 	.word	0x20000820

0800be24 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b082      	sub	sp, #8
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	88db      	ldrh	r3, [r3, #6]
 800be32:	2b01      	cmp	r3, #1
 800be34:	d004      	beq.n	800be40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800be36:	6839      	ldr	r1, [r7, #0]
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f000 f8e2 	bl	800c002 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800be3e:	e023      	b.n	800be88 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be46:	b2db      	uxtb	r3, r3
 800be48:	2b02      	cmp	r3, #2
 800be4a:	dc02      	bgt.n	800be52 <USBD_GetConfig+0x2e>
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	dc03      	bgt.n	800be58 <USBD_GetConfig+0x34>
 800be50:	e015      	b.n	800be7e <USBD_GetConfig+0x5a>
 800be52:	2b03      	cmp	r3, #3
 800be54:	d00b      	beq.n	800be6e <USBD_GetConfig+0x4a>
 800be56:	e012      	b.n	800be7e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2200      	movs	r2, #0
 800be5c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	3308      	adds	r3, #8
 800be62:	2201      	movs	r2, #1
 800be64:	4619      	mov	r1, r3
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 f93c 	bl	800c0e4 <USBD_CtlSendData>
        break;
 800be6c:	e00c      	b.n	800be88 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	3304      	adds	r3, #4
 800be72:	2201      	movs	r2, #1
 800be74:	4619      	mov	r1, r3
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 f934 	bl	800c0e4 <USBD_CtlSendData>
        break;
 800be7c:	e004      	b.n	800be88 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800be7e:	6839      	ldr	r1, [r7, #0]
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f000 f8be 	bl	800c002 <USBD_CtlError>
        break;
 800be86:	bf00      	nop
}
 800be88:	bf00      	nop
 800be8a:	3708      	adds	r7, #8
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}

0800be90 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b082      	sub	sp, #8
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bea0:	b2db      	uxtb	r3, r3
 800bea2:	3b01      	subs	r3, #1
 800bea4:	2b02      	cmp	r3, #2
 800bea6:	d81e      	bhi.n	800bee6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	88db      	ldrh	r3, [r3, #6]
 800beac:	2b02      	cmp	r3, #2
 800beae:	d004      	beq.n	800beba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800beb0:	6839      	ldr	r1, [r7, #0]
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f000 f8a5 	bl	800c002 <USBD_CtlError>
        break;
 800beb8:	e01a      	b.n	800bef0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2201      	movs	r2, #1
 800bebe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d005      	beq.n	800bed6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	68db      	ldr	r3, [r3, #12]
 800bece:	f043 0202 	orr.w	r2, r3, #2
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	330c      	adds	r3, #12
 800beda:	2202      	movs	r2, #2
 800bedc:	4619      	mov	r1, r3
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 f900 	bl	800c0e4 <USBD_CtlSendData>
      break;
 800bee4:	e004      	b.n	800bef0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bee6:	6839      	ldr	r1, [r7, #0]
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 f88a 	bl	800c002 <USBD_CtlError>
      break;
 800beee:	bf00      	nop
  }
}
 800bef0:	bf00      	nop
 800bef2:	3708      	adds	r7, #8
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}

0800bef8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	885b      	ldrh	r3, [r3, #2]
 800bf06:	2b01      	cmp	r3, #1
 800bf08:	d107      	bne.n	800bf1a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2201      	movs	r2, #1
 800bf0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 f940 	bl	800c198 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bf18:	e013      	b.n	800bf42 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	885b      	ldrh	r3, [r3, #2]
 800bf1e:	2b02      	cmp	r3, #2
 800bf20:	d10b      	bne.n	800bf3a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	889b      	ldrh	r3, [r3, #4]
 800bf26:	0a1b      	lsrs	r3, r3, #8
 800bf28:	b29b      	uxth	r3, r3
 800bf2a:	b2da      	uxtb	r2, r3
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 f930 	bl	800c198 <USBD_CtlSendStatus>
}
 800bf38:	e003      	b.n	800bf42 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bf3a:	6839      	ldr	r1, [r7, #0]
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f000 f860 	bl	800c002 <USBD_CtlError>
}
 800bf42:	bf00      	nop
 800bf44:	3708      	adds	r7, #8
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}

0800bf4a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf4a:	b580      	push	{r7, lr}
 800bf4c:	b082      	sub	sp, #8
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
 800bf52:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	3b01      	subs	r3, #1
 800bf5e:	2b02      	cmp	r3, #2
 800bf60:	d80b      	bhi.n	800bf7a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	885b      	ldrh	r3, [r3, #2]
 800bf66:	2b01      	cmp	r3, #1
 800bf68:	d10c      	bne.n	800bf84 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 f910 	bl	800c198 <USBD_CtlSendStatus>
      }
      break;
 800bf78:	e004      	b.n	800bf84 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bf7a:	6839      	ldr	r1, [r7, #0]
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f000 f840 	bl	800c002 <USBD_CtlError>
      break;
 800bf82:	e000      	b.n	800bf86 <USBD_ClrFeature+0x3c>
      break;
 800bf84:	bf00      	nop
  }
}
 800bf86:	bf00      	nop
 800bf88:	3708      	adds	r7, #8
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}

0800bf8e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bf8e:	b580      	push	{r7, lr}
 800bf90:	b084      	sub	sp, #16
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
 800bf96:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	781a      	ldrb	r2, [r3, #0]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	781a      	ldrb	r2, [r3, #0]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bfb8:	68f8      	ldr	r0, [r7, #12]
 800bfba:	f7ff fa41 	bl	800b440 <SWAPBYTE>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	3301      	adds	r3, #1
 800bfca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	3301      	adds	r3, #1
 800bfd0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bfd2:	68f8      	ldr	r0, [r7, #12]
 800bfd4:	f7ff fa34 	bl	800b440 <SWAPBYTE>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	461a      	mov	r2, r3
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	3301      	adds	r3, #1
 800bfea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bfec:	68f8      	ldr	r0, [r7, #12]
 800bfee:	f7ff fa27 	bl	800b440 <SWAPBYTE>
 800bff2:	4603      	mov	r3, r0
 800bff4:	461a      	mov	r2, r3
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	80da      	strh	r2, [r3, #6]
}
 800bffa:	bf00      	nop
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c002:	b580      	push	{r7, lr}
 800c004:	b082      	sub	sp, #8
 800c006:	af00      	add	r7, sp, #0
 800c008:	6078      	str	r0, [r7, #4]
 800c00a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c00c:	2180      	movs	r1, #128	; 0x80
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f002 fc6a 	bl	800e8e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c014:	2100      	movs	r1, #0
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f002 fc66 	bl	800e8e8 <USBD_LL_StallEP>
}
 800c01c:	bf00      	nop
 800c01e:	3708      	adds	r7, #8
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}

0800c024 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b086      	sub	sp, #24
 800c028:	af00      	add	r7, sp, #0
 800c02a:	60f8      	str	r0, [r7, #12]
 800c02c:	60b9      	str	r1, [r7, #8]
 800c02e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c030:	2300      	movs	r3, #0
 800c032:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d036      	beq.n	800c0a8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c03e:	6938      	ldr	r0, [r7, #16]
 800c040:	f000 f836 	bl	800c0b0 <USBD_GetLen>
 800c044:	4603      	mov	r3, r0
 800c046:	3301      	adds	r3, #1
 800c048:	b29b      	uxth	r3, r3
 800c04a:	005b      	lsls	r3, r3, #1
 800c04c:	b29a      	uxth	r2, r3
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c052:	7dfb      	ldrb	r3, [r7, #23]
 800c054:	68ba      	ldr	r2, [r7, #8]
 800c056:	4413      	add	r3, r2
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	7812      	ldrb	r2, [r2, #0]
 800c05c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c05e:	7dfb      	ldrb	r3, [r7, #23]
 800c060:	3301      	adds	r3, #1
 800c062:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c064:	7dfb      	ldrb	r3, [r7, #23]
 800c066:	68ba      	ldr	r2, [r7, #8]
 800c068:	4413      	add	r3, r2
 800c06a:	2203      	movs	r2, #3
 800c06c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c06e:	7dfb      	ldrb	r3, [r7, #23]
 800c070:	3301      	adds	r3, #1
 800c072:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c074:	e013      	b.n	800c09e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c076:	7dfb      	ldrb	r3, [r7, #23]
 800c078:	68ba      	ldr	r2, [r7, #8]
 800c07a:	4413      	add	r3, r2
 800c07c:	693a      	ldr	r2, [r7, #16]
 800c07e:	7812      	ldrb	r2, [r2, #0]
 800c080:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	3301      	adds	r3, #1
 800c086:	613b      	str	r3, [r7, #16]
    idx++;
 800c088:	7dfb      	ldrb	r3, [r7, #23]
 800c08a:	3301      	adds	r3, #1
 800c08c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c08e:	7dfb      	ldrb	r3, [r7, #23]
 800c090:	68ba      	ldr	r2, [r7, #8]
 800c092:	4413      	add	r3, r2
 800c094:	2200      	movs	r2, #0
 800c096:	701a      	strb	r2, [r3, #0]
    idx++;
 800c098:	7dfb      	ldrb	r3, [r7, #23]
 800c09a:	3301      	adds	r3, #1
 800c09c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d1e7      	bne.n	800c076 <USBD_GetString+0x52>
 800c0a6:	e000      	b.n	800c0aa <USBD_GetString+0x86>
    return;
 800c0a8:	bf00      	nop
  }
}
 800c0aa:	3718      	adds	r7, #24
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b085      	sub	sp, #20
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c0c0:	e005      	b.n	800c0ce <USBD_GetLen+0x1e>
  {
    len++;
 800c0c2:	7bfb      	ldrb	r3, [r7, #15]
 800c0c4:	3301      	adds	r3, #1
 800c0c6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d1f5      	bne.n	800c0c2 <USBD_GetLen+0x12>
  }

  return len;
 800c0d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3714      	adds	r7, #20
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e2:	4770      	bx	lr

0800c0e4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	60f8      	str	r0, [r7, #12]
 800c0ec:	60b9      	str	r1, [r7, #8]
 800c0ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	2202      	movs	r2, #2
 800c0f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	687a      	ldr	r2, [r7, #4]
 800c0fc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	68ba      	ldr	r2, [r7, #8]
 800c108:	2100      	movs	r1, #0
 800c10a:	68f8      	ldr	r0, [r7, #12]
 800c10c:	f002 fc75 	bl	800e9fa <USBD_LL_Transmit>

  return USBD_OK;
 800c110:	2300      	movs	r3, #0
}
 800c112:	4618      	mov	r0, r3
 800c114:	3710      	adds	r7, #16
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}

0800c11a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c11a:	b580      	push	{r7, lr}
 800c11c:	b084      	sub	sp, #16
 800c11e:	af00      	add	r7, sp, #0
 800c120:	60f8      	str	r0, [r7, #12]
 800c122:	60b9      	str	r1, [r7, #8]
 800c124:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	68ba      	ldr	r2, [r7, #8]
 800c12a:	2100      	movs	r1, #0
 800c12c:	68f8      	ldr	r0, [r7, #12]
 800c12e:	f002 fc64 	bl	800e9fa <USBD_LL_Transmit>

  return USBD_OK;
 800c132:	2300      	movs	r3, #0
}
 800c134:	4618      	mov	r0, r3
 800c136:	3710      	adds	r7, #16
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	60f8      	str	r0, [r7, #12]
 800c144:	60b9      	str	r1, [r7, #8]
 800c146:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	2203      	movs	r2, #3
 800c14c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	687a      	ldr	r2, [r7, #4]
 800c154:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	68ba      	ldr	r2, [r7, #8]
 800c164:	2100      	movs	r1, #0
 800c166:	68f8      	ldr	r0, [r7, #12]
 800c168:	f002 fc68 	bl	800ea3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c16c:	2300      	movs	r3, #0
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3710      	adds	r7, #16
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}

0800c176 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c176:	b580      	push	{r7, lr}
 800c178:	b084      	sub	sp, #16
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	60f8      	str	r0, [r7, #12]
 800c17e:	60b9      	str	r1, [r7, #8]
 800c180:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	68ba      	ldr	r2, [r7, #8]
 800c186:	2100      	movs	r1, #0
 800c188:	68f8      	ldr	r0, [r7, #12]
 800c18a:	f002 fc57 	bl	800ea3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c18e:	2300      	movs	r3, #0
}
 800c190:	4618      	mov	r0, r3
 800c192:	3710      	adds	r7, #16
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}

0800c198 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2204      	movs	r2, #4
 800c1a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	2100      	movs	r1, #0
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f002 fc23 	bl	800e9fa <USBD_LL_Transmit>

  return USBD_OK;
 800c1b4:	2300      	movs	r3, #0
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3708      	adds	r7, #8
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}

0800c1be <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c1be:	b580      	push	{r7, lr}
 800c1c0:	b082      	sub	sp, #8
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2205      	movs	r2, #5
 800c1ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	2100      	movs	r1, #0
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f002 fc31 	bl	800ea3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c1da:	2300      	movs	r3, #0
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3708      	adds	r7, #8
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b085      	sub	sp, #20
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c1f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c1f6:	2b84      	cmp	r3, #132	; 0x84
 800c1f8:	d005      	beq.n	800c206 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c1fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	4413      	add	r3, r2
 800c202:	3303      	adds	r3, #3
 800c204:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c206:	68fb      	ldr	r3, [r7, #12]
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3714      	adds	r7, #20
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr

0800c214 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c218:	f000 fe5a 	bl	800ced0 <vTaskStartScheduler>
  
  return osOK;
 800c21c:	2300      	movs	r3, #0
}
 800c21e:	4618      	mov	r0, r3
 800c220:	bd80      	pop	{r7, pc}

0800c222 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c222:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c224:	b089      	sub	sp, #36	; 0x24
 800c226:	af04      	add	r7, sp, #16
 800c228:	6078      	str	r0, [r7, #4]
 800c22a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	695b      	ldr	r3, [r3, #20]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d020      	beq.n	800c276 <osThreadCreate+0x54>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	699b      	ldr	r3, [r3, #24]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d01c      	beq.n	800c276 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	685c      	ldr	r4, [r3, #4]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	691e      	ldr	r6, [r3, #16]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c24e:	4618      	mov	r0, r3
 800c250:	f7ff ffc8 	bl	800c1e4 <makeFreeRtosPriority>
 800c254:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	695b      	ldr	r3, [r3, #20]
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c25e:	9202      	str	r2, [sp, #8]
 800c260:	9301      	str	r3, [sp, #4]
 800c262:	9100      	str	r1, [sp, #0]
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	4632      	mov	r2, r6
 800c268:	4629      	mov	r1, r5
 800c26a:	4620      	mov	r0, r4
 800c26c:	f000 fc5e 	bl	800cb2c <xTaskCreateStatic>
 800c270:	4603      	mov	r3, r0
 800c272:	60fb      	str	r3, [r7, #12]
 800c274:	e01c      	b.n	800c2b0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	685c      	ldr	r4, [r3, #4]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c282:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7ff ffaa 	bl	800c1e4 <makeFreeRtosPriority>
 800c290:	4602      	mov	r2, r0
 800c292:	f107 030c 	add.w	r3, r7, #12
 800c296:	9301      	str	r3, [sp, #4]
 800c298:	9200      	str	r2, [sp, #0]
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	4632      	mov	r2, r6
 800c29e:	4629      	mov	r1, r5
 800c2a0:	4620      	mov	r0, r4
 800c2a2:	f000 fca0 	bl	800cbe6 <xTaskCreate>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	d001      	beq.n	800c2b0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	e000      	b.n	800c2b2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3714      	adds	r7, #20
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c2ba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c2ba:	b580      	push	{r7, lr}
 800c2bc:	b084      	sub	sp, #16
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d001      	beq.n	800c2d0 <osDelay+0x16>
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	e000      	b.n	800c2d2 <osDelay+0x18>
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f000 fdc8 	bl	800ce68 <vTaskDelay>
  
  return osOK;
 800c2d8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3710      	adds	r7, #16
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}

0800c2e2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800c2e2:	b580      	push	{r7, lr}
 800c2e4:	b082      	sub	sp, #8
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	685b      	ldr	r3, [r3, #4]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d007      	beq.n	800c302 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	2001      	movs	r0, #1
 800c2fa:	f000 fa2a 	bl	800c752 <xQueueCreateMutexStatic>
 800c2fe:	4603      	mov	r3, r0
 800c300:	e003      	b.n	800c30a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800c302:	2001      	movs	r0, #1
 800c304:	f000 fa0d 	bl	800c722 <xQueueCreateMutex>
 800c308:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3708      	adds	r7, #8
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c312:	b480      	push	{r7}
 800c314:	b083      	sub	sp, #12
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f103 0208 	add.w	r2, r3, #8
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f04f 32ff 	mov.w	r2, #4294967295
 800c32a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f103 0208 	add.w	r2, r3, #8
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f103 0208 	add.w	r2, r3, #8
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2200      	movs	r2, #0
 800c344:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c346:	bf00      	nop
 800c348:	370c      	adds	r7, #12
 800c34a:	46bd      	mov	sp, r7
 800c34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c350:	4770      	bx	lr

0800c352 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c352:	b480      	push	{r7}
 800c354:	b083      	sub	sp, #12
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2200      	movs	r2, #0
 800c35e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c360:	bf00      	nop
 800c362:	370c      	adds	r7, #12
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr

0800c36c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c36c:	b480      	push	{r7}
 800c36e:	b085      	sub	sp, #20
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	68fa      	ldr	r2, [r7, #12]
 800c380:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	689a      	ldr	r2, [r3, #8]
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	689b      	ldr	r3, [r3, #8]
 800c38e:	683a      	ldr	r2, [r7, #0]
 800c390:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	683a      	ldr	r2, [r7, #0]
 800c396:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	687a      	ldr	r2, [r7, #4]
 800c39c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	1c5a      	adds	r2, r3, #1
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	601a      	str	r2, [r3, #0]
}
 800c3a8:	bf00      	nop
 800c3aa:	3714      	adds	r7, #20
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b085      	sub	sp, #20
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ca:	d103      	bne.n	800c3d4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	691b      	ldr	r3, [r3, #16]
 800c3d0:	60fb      	str	r3, [r7, #12]
 800c3d2:	e00c      	b.n	800c3ee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	3308      	adds	r3, #8
 800c3d8:	60fb      	str	r3, [r7, #12]
 800c3da:	e002      	b.n	800c3e2 <vListInsert+0x2e>
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	60fb      	str	r3, [r7, #12]
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	68ba      	ldr	r2, [r7, #8]
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d2f6      	bcs.n	800c3dc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	685a      	ldr	r2, [r3, #4]
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	685b      	ldr	r3, [r3, #4]
 800c3fa:	683a      	ldr	r2, [r7, #0]
 800c3fc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	68fa      	ldr	r2, [r7, #12]
 800c402:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	683a      	ldr	r2, [r7, #0]
 800c408:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	1c5a      	adds	r2, r3, #1
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	601a      	str	r2, [r3, #0]
}
 800c41a:	bf00      	nop
 800c41c:	3714      	adds	r7, #20
 800c41e:	46bd      	mov	sp, r7
 800c420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c424:	4770      	bx	lr

0800c426 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c426:	b480      	push	{r7}
 800c428:	b085      	sub	sp, #20
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	691b      	ldr	r3, [r3, #16]
 800c432:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	687a      	ldr	r2, [r7, #4]
 800c43a:	6892      	ldr	r2, [r2, #8]
 800c43c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	689b      	ldr	r3, [r3, #8]
 800c442:	687a      	ldr	r2, [r7, #4]
 800c444:	6852      	ldr	r2, [r2, #4]
 800c446:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	429a      	cmp	r2, r3
 800c450:	d103      	bne.n	800c45a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	689a      	ldr	r2, [r3, #8]
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2200      	movs	r2, #0
 800c45e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	1e5a      	subs	r2, r3, #1
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3714      	adds	r7, #20
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr
	...

0800c47c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b084      	sub	sp, #16
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d10a      	bne.n	800c4a6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c494:	f383 8811 	msr	BASEPRI, r3
 800c498:	f3bf 8f6f 	isb	sy
 800c49c:	f3bf 8f4f 	dsb	sy
 800c4a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c4a2:	bf00      	nop
 800c4a4:	e7fe      	b.n	800c4a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c4a6:	f001 fb6d 	bl	800db84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681a      	ldr	r2, [r3, #0]
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4b2:	68f9      	ldr	r1, [r7, #12]
 800c4b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c4b6:	fb01 f303 	mul.w	r3, r1, r3
 800c4ba:	441a      	add	r2, r3
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681a      	ldr	r2, [r3, #0]
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681a      	ldr	r2, [r3, #0]
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4d6:	3b01      	subs	r3, #1
 800c4d8:	68f9      	ldr	r1, [r7, #12]
 800c4da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c4dc:	fb01 f303 	mul.w	r3, r1, r3
 800c4e0:	441a      	add	r2, r3
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	22ff      	movs	r2, #255	; 0xff
 800c4ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	22ff      	movs	r2, #255	; 0xff
 800c4f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d114      	bne.n	800c526 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	691b      	ldr	r3, [r3, #16]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d01a      	beq.n	800c53a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	3310      	adds	r3, #16
 800c508:	4618      	mov	r0, r3
 800c50a:	f000 ff47 	bl	800d39c <xTaskRemoveFromEventList>
 800c50e:	4603      	mov	r3, r0
 800c510:	2b00      	cmp	r3, #0
 800c512:	d012      	beq.n	800c53a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c514:	4b0c      	ldr	r3, [pc, #48]	; (800c548 <xQueueGenericReset+0xcc>)
 800c516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c51a:	601a      	str	r2, [r3, #0]
 800c51c:	f3bf 8f4f 	dsb	sy
 800c520:	f3bf 8f6f 	isb	sy
 800c524:	e009      	b.n	800c53a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	3310      	adds	r3, #16
 800c52a:	4618      	mov	r0, r3
 800c52c:	f7ff fef1 	bl	800c312 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	3324      	adds	r3, #36	; 0x24
 800c534:	4618      	mov	r0, r3
 800c536:	f7ff feec 	bl	800c312 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c53a:	f001 fb53 	bl	800dbe4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c53e:	2301      	movs	r3, #1
}
 800c540:	4618      	mov	r0, r3
 800c542:	3710      	adds	r7, #16
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}
 800c548:	e000ed04 	.word	0xe000ed04

0800c54c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b08e      	sub	sp, #56	; 0x38
 800c550:	af02      	add	r7, sp, #8
 800c552:	60f8      	str	r0, [r7, #12]
 800c554:	60b9      	str	r1, [r7, #8]
 800c556:	607a      	str	r2, [r7, #4]
 800c558:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d10a      	bne.n	800c576 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c564:	f383 8811 	msr	BASEPRI, r3
 800c568:	f3bf 8f6f 	isb	sy
 800c56c:	f3bf 8f4f 	dsb	sy
 800c570:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c572:	bf00      	nop
 800c574:	e7fe      	b.n	800c574 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d10a      	bne.n	800c592 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c580:	f383 8811 	msr	BASEPRI, r3
 800c584:	f3bf 8f6f 	isb	sy
 800c588:	f3bf 8f4f 	dsb	sy
 800c58c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c58e:	bf00      	nop
 800c590:	e7fe      	b.n	800c590 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d002      	beq.n	800c59e <xQueueGenericCreateStatic+0x52>
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d001      	beq.n	800c5a2 <xQueueGenericCreateStatic+0x56>
 800c59e:	2301      	movs	r3, #1
 800c5a0:	e000      	b.n	800c5a4 <xQueueGenericCreateStatic+0x58>
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d10a      	bne.n	800c5be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ac:	f383 8811 	msr	BASEPRI, r3
 800c5b0:	f3bf 8f6f 	isb	sy
 800c5b4:	f3bf 8f4f 	dsb	sy
 800c5b8:	623b      	str	r3, [r7, #32]
}
 800c5ba:	bf00      	nop
 800c5bc:	e7fe      	b.n	800c5bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d102      	bne.n	800c5ca <xQueueGenericCreateStatic+0x7e>
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d101      	bne.n	800c5ce <xQueueGenericCreateStatic+0x82>
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	e000      	b.n	800c5d0 <xQueueGenericCreateStatic+0x84>
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d10a      	bne.n	800c5ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d8:	f383 8811 	msr	BASEPRI, r3
 800c5dc:	f3bf 8f6f 	isb	sy
 800c5e0:	f3bf 8f4f 	dsb	sy
 800c5e4:	61fb      	str	r3, [r7, #28]
}
 800c5e6:	bf00      	nop
 800c5e8:	e7fe      	b.n	800c5e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c5ea:	2348      	movs	r3, #72	; 0x48
 800c5ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	2b48      	cmp	r3, #72	; 0x48
 800c5f2:	d00a      	beq.n	800c60a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f8:	f383 8811 	msr	BASEPRI, r3
 800c5fc:	f3bf 8f6f 	isb	sy
 800c600:	f3bf 8f4f 	dsb	sy
 800c604:	61bb      	str	r3, [r7, #24]
}
 800c606:	bf00      	nop
 800c608:	e7fe      	b.n	800c608 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c60a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c612:	2b00      	cmp	r3, #0
 800c614:	d00d      	beq.n	800c632 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c618:	2201      	movs	r2, #1
 800c61a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c61e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c624:	9300      	str	r3, [sp, #0]
 800c626:	4613      	mov	r3, r2
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	68b9      	ldr	r1, [r7, #8]
 800c62c:	68f8      	ldr	r0, [r7, #12]
 800c62e:	f000 f83f 	bl	800c6b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c634:	4618      	mov	r0, r3
 800c636:	3730      	adds	r7, #48	; 0x30
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b08a      	sub	sp, #40	; 0x28
 800c640:	af02      	add	r7, sp, #8
 800c642:	60f8      	str	r0, [r7, #12]
 800c644:	60b9      	str	r1, [r7, #8]
 800c646:	4613      	mov	r3, r2
 800c648:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d10a      	bne.n	800c666 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c654:	f383 8811 	msr	BASEPRI, r3
 800c658:	f3bf 8f6f 	isb	sy
 800c65c:	f3bf 8f4f 	dsb	sy
 800c660:	613b      	str	r3, [r7, #16]
}
 800c662:	bf00      	nop
 800c664:	e7fe      	b.n	800c664 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	68ba      	ldr	r2, [r7, #8]
 800c66a:	fb02 f303 	mul.w	r3, r2, r3
 800c66e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c670:	69fb      	ldr	r3, [r7, #28]
 800c672:	3348      	adds	r3, #72	; 0x48
 800c674:	4618      	mov	r0, r3
 800c676:	f001 fb67 	bl	800dd48 <pvPortMalloc>
 800c67a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c67c:	69bb      	ldr	r3, [r7, #24]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d011      	beq.n	800c6a6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c682:	69bb      	ldr	r3, [r7, #24]
 800c684:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	3348      	adds	r3, #72	; 0x48
 800c68a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c68c:	69bb      	ldr	r3, [r7, #24]
 800c68e:	2200      	movs	r2, #0
 800c690:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c694:	79fa      	ldrb	r2, [r7, #7]
 800c696:	69bb      	ldr	r3, [r7, #24]
 800c698:	9300      	str	r3, [sp, #0]
 800c69a:	4613      	mov	r3, r2
 800c69c:	697a      	ldr	r2, [r7, #20]
 800c69e:	68b9      	ldr	r1, [r7, #8]
 800c6a0:	68f8      	ldr	r0, [r7, #12]
 800c6a2:	f000 f805 	bl	800c6b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c6a6:	69bb      	ldr	r3, [r7, #24]
	}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3720      	adds	r7, #32
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b084      	sub	sp, #16
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	607a      	str	r2, [r7, #4]
 800c6bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d103      	bne.n	800c6cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c6c4:	69bb      	ldr	r3, [r7, #24]
 800c6c6:	69ba      	ldr	r2, [r7, #24]
 800c6c8:	601a      	str	r2, [r3, #0]
 800c6ca:	e002      	b.n	800c6d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c6cc:	69bb      	ldr	r3, [r7, #24]
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c6d2:	69bb      	ldr	r3, [r7, #24]
 800c6d4:	68fa      	ldr	r2, [r7, #12]
 800c6d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c6d8:	69bb      	ldr	r3, [r7, #24]
 800c6da:	68ba      	ldr	r2, [r7, #8]
 800c6dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c6de:	2101      	movs	r1, #1
 800c6e0:	69b8      	ldr	r0, [r7, #24]
 800c6e2:	f7ff fecb 	bl	800c47c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c6e6:	bf00      	nop
 800c6e8:	3710      	adds	r7, #16
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}

0800c6ee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c6ee:	b580      	push	{r7, lr}
 800c6f0:	b082      	sub	sp, #8
 800c6f2:	af00      	add	r7, sp, #0
 800c6f4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d00e      	beq.n	800c71a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2200      	movs	r2, #0
 800c700:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2200      	movs	r2, #0
 800c706:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2200      	movs	r2, #0
 800c70c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c70e:	2300      	movs	r3, #0
 800c710:	2200      	movs	r2, #0
 800c712:	2100      	movs	r1, #0
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f000 f837 	bl	800c788 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c71a:	bf00      	nop
 800c71c:	3708      	adds	r7, #8
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}

0800c722 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c722:	b580      	push	{r7, lr}
 800c724:	b086      	sub	sp, #24
 800c726:	af00      	add	r7, sp, #0
 800c728:	4603      	mov	r3, r0
 800c72a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c72c:	2301      	movs	r3, #1
 800c72e:	617b      	str	r3, [r7, #20]
 800c730:	2300      	movs	r3, #0
 800c732:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c734:	79fb      	ldrb	r3, [r7, #7]
 800c736:	461a      	mov	r2, r3
 800c738:	6939      	ldr	r1, [r7, #16]
 800c73a:	6978      	ldr	r0, [r7, #20]
 800c73c:	f7ff ff7e 	bl	800c63c <xQueueGenericCreate>
 800c740:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c742:	68f8      	ldr	r0, [r7, #12]
 800c744:	f7ff ffd3 	bl	800c6ee <prvInitialiseMutex>

		return xNewQueue;
 800c748:	68fb      	ldr	r3, [r7, #12]
	}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3718      	adds	r7, #24
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}

0800c752 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c752:	b580      	push	{r7, lr}
 800c754:	b088      	sub	sp, #32
 800c756:	af02      	add	r7, sp, #8
 800c758:	4603      	mov	r3, r0
 800c75a:	6039      	str	r1, [r7, #0]
 800c75c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c75e:	2301      	movs	r3, #1
 800c760:	617b      	str	r3, [r7, #20]
 800c762:	2300      	movs	r3, #0
 800c764:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c766:	79fb      	ldrb	r3, [r7, #7]
 800c768:	9300      	str	r3, [sp, #0]
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	2200      	movs	r2, #0
 800c76e:	6939      	ldr	r1, [r7, #16]
 800c770:	6978      	ldr	r0, [r7, #20]
 800c772:	f7ff feeb 	bl	800c54c <xQueueGenericCreateStatic>
 800c776:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c778:	68f8      	ldr	r0, [r7, #12]
 800c77a:	f7ff ffb8 	bl	800c6ee <prvInitialiseMutex>

		return xNewQueue;
 800c77e:	68fb      	ldr	r3, [r7, #12]
	}
 800c780:	4618      	mov	r0, r3
 800c782:	3718      	adds	r7, #24
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b08e      	sub	sp, #56	; 0x38
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	60f8      	str	r0, [r7, #12]
 800c790:	60b9      	str	r1, [r7, #8]
 800c792:	607a      	str	r2, [r7, #4]
 800c794:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c796:	2300      	movs	r3, #0
 800c798:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d10a      	bne.n	800c7ba <xQueueGenericSend+0x32>
	__asm volatile
 800c7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a8:	f383 8811 	msr	BASEPRI, r3
 800c7ac:	f3bf 8f6f 	isb	sy
 800c7b0:	f3bf 8f4f 	dsb	sy
 800c7b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c7b6:	bf00      	nop
 800c7b8:	e7fe      	b.n	800c7b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d103      	bne.n	800c7c8 <xQueueGenericSend+0x40>
 800c7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d101      	bne.n	800c7cc <xQueueGenericSend+0x44>
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	e000      	b.n	800c7ce <xQueueGenericSend+0x46>
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d10a      	bne.n	800c7e8 <xQueueGenericSend+0x60>
	__asm volatile
 800c7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d6:	f383 8811 	msr	BASEPRI, r3
 800c7da:	f3bf 8f6f 	isb	sy
 800c7de:	f3bf 8f4f 	dsb	sy
 800c7e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c7e4:	bf00      	nop
 800c7e6:	e7fe      	b.n	800c7e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	2b02      	cmp	r3, #2
 800c7ec:	d103      	bne.n	800c7f6 <xQueueGenericSend+0x6e>
 800c7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	d101      	bne.n	800c7fa <xQueueGenericSend+0x72>
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	e000      	b.n	800c7fc <xQueueGenericSend+0x74>
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d10a      	bne.n	800c816 <xQueueGenericSend+0x8e>
	__asm volatile
 800c800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c804:	f383 8811 	msr	BASEPRI, r3
 800c808:	f3bf 8f6f 	isb	sy
 800c80c:	f3bf 8f4f 	dsb	sy
 800c810:	623b      	str	r3, [r7, #32]
}
 800c812:	bf00      	nop
 800c814:	e7fe      	b.n	800c814 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c816:	f000 ff7f 	bl	800d718 <xTaskGetSchedulerState>
 800c81a:	4603      	mov	r3, r0
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d102      	bne.n	800c826 <xQueueGenericSend+0x9e>
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d101      	bne.n	800c82a <xQueueGenericSend+0xa2>
 800c826:	2301      	movs	r3, #1
 800c828:	e000      	b.n	800c82c <xQueueGenericSend+0xa4>
 800c82a:	2300      	movs	r3, #0
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d10a      	bne.n	800c846 <xQueueGenericSend+0xbe>
	__asm volatile
 800c830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c834:	f383 8811 	msr	BASEPRI, r3
 800c838:	f3bf 8f6f 	isb	sy
 800c83c:	f3bf 8f4f 	dsb	sy
 800c840:	61fb      	str	r3, [r7, #28]
}
 800c842:	bf00      	nop
 800c844:	e7fe      	b.n	800c844 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c846:	f001 f99d 	bl	800db84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c84c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c852:	429a      	cmp	r2, r3
 800c854:	d302      	bcc.n	800c85c <xQueueGenericSend+0xd4>
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	2b02      	cmp	r3, #2
 800c85a:	d129      	bne.n	800c8b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c85c:	683a      	ldr	r2, [r7, #0]
 800c85e:	68b9      	ldr	r1, [r7, #8]
 800c860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c862:	f000 f88f 	bl	800c984 <prvCopyDataToQueue>
 800c866:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d010      	beq.n	800c892 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c872:	3324      	adds	r3, #36	; 0x24
 800c874:	4618      	mov	r0, r3
 800c876:	f000 fd91 	bl	800d39c <xTaskRemoveFromEventList>
 800c87a:	4603      	mov	r3, r0
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d013      	beq.n	800c8a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c880:	4b3f      	ldr	r3, [pc, #252]	; (800c980 <xQueueGenericSend+0x1f8>)
 800c882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c886:	601a      	str	r2, [r3, #0]
 800c888:	f3bf 8f4f 	dsb	sy
 800c88c:	f3bf 8f6f 	isb	sy
 800c890:	e00a      	b.n	800c8a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c894:	2b00      	cmp	r3, #0
 800c896:	d007      	beq.n	800c8a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c898:	4b39      	ldr	r3, [pc, #228]	; (800c980 <xQueueGenericSend+0x1f8>)
 800c89a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c89e:	601a      	str	r2, [r3, #0]
 800c8a0:	f3bf 8f4f 	dsb	sy
 800c8a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c8a8:	f001 f99c 	bl	800dbe4 <vPortExitCritical>
				return pdPASS;
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	e063      	b.n	800c978 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d103      	bne.n	800c8be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c8b6:	f001 f995 	bl	800dbe4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	e05c      	b.n	800c978 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d106      	bne.n	800c8d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c8c4:	f107 0314 	add.w	r3, r7, #20
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f000 fdc9 	bl	800d460 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c8d2:	f001 f987 	bl	800dbe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c8d6:	f000 fb5b 	bl	800cf90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c8da:	f001 f953 	bl	800db84 <vPortEnterCritical>
 800c8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c8e4:	b25b      	sxtb	r3, r3
 800c8e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8ea:	d103      	bne.n	800c8f4 <xQueueGenericSend+0x16c>
 800c8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8fa:	b25b      	sxtb	r3, r3
 800c8fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c900:	d103      	bne.n	800c90a <xQueueGenericSend+0x182>
 800c902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c904:	2200      	movs	r2, #0
 800c906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c90a:	f001 f96b 	bl	800dbe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c90e:	1d3a      	adds	r2, r7, #4
 800c910:	f107 0314 	add.w	r3, r7, #20
 800c914:	4611      	mov	r1, r2
 800c916:	4618      	mov	r0, r3
 800c918:	f000 fdb8 	bl	800d48c <xTaskCheckForTimeOut>
 800c91c:	4603      	mov	r3, r0
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d124      	bne.n	800c96c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c922:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c924:	f000 f8ea 	bl	800cafc <prvIsQueueFull>
 800c928:	4603      	mov	r3, r0
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d018      	beq.n	800c960 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c930:	3310      	adds	r3, #16
 800c932:	687a      	ldr	r2, [r7, #4]
 800c934:	4611      	mov	r1, r2
 800c936:	4618      	mov	r0, r3
 800c938:	f000 fd0c 	bl	800d354 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c93c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c93e:	f000 f88b 	bl	800ca58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c942:	f000 fb33 	bl	800cfac <xTaskResumeAll>
 800c946:	4603      	mov	r3, r0
 800c948:	2b00      	cmp	r3, #0
 800c94a:	f47f af7c 	bne.w	800c846 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c94e:	4b0c      	ldr	r3, [pc, #48]	; (800c980 <xQueueGenericSend+0x1f8>)
 800c950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c954:	601a      	str	r2, [r3, #0]
 800c956:	f3bf 8f4f 	dsb	sy
 800c95a:	f3bf 8f6f 	isb	sy
 800c95e:	e772      	b.n	800c846 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c962:	f000 f879 	bl	800ca58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c966:	f000 fb21 	bl	800cfac <xTaskResumeAll>
 800c96a:	e76c      	b.n	800c846 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c96c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c96e:	f000 f873 	bl	800ca58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c972:	f000 fb1b 	bl	800cfac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c976:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3738      	adds	r7, #56	; 0x38
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}
 800c980:	e000ed04 	.word	0xe000ed04

0800c984 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b086      	sub	sp, #24
 800c988:	af00      	add	r7, sp, #0
 800c98a:	60f8      	str	r0, [r7, #12]
 800c98c:	60b9      	str	r1, [r7, #8]
 800c98e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c990:	2300      	movs	r3, #0
 800c992:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c998:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d10d      	bne.n	800c9be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d14d      	bne.n	800ca46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	689b      	ldr	r3, [r3, #8]
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f000 fed0 	bl	800d754 <xTaskPriorityDisinherit>
 800c9b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	609a      	str	r2, [r3, #8]
 800c9bc:	e043      	b.n	800ca46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d119      	bne.n	800c9f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	6858      	ldr	r0, [r3, #4]
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9cc:	461a      	mov	r2, r3
 800c9ce:	68b9      	ldr	r1, [r7, #8]
 800c9d0:	f002 fa99 	bl	800ef06 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	685a      	ldr	r2, [r3, #4]
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9dc:	441a      	add	r2, r3
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	685a      	ldr	r2, [r3, #4]
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	689b      	ldr	r3, [r3, #8]
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d32b      	bcc.n	800ca46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681a      	ldr	r2, [r3, #0]
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	605a      	str	r2, [r3, #4]
 800c9f6:	e026      	b.n	800ca46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	68d8      	ldr	r0, [r3, #12]
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca00:	461a      	mov	r2, r3
 800ca02:	68b9      	ldr	r1, [r7, #8]
 800ca04:	f002 fa7f 	bl	800ef06 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	68da      	ldr	r2, [r3, #12]
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca10:	425b      	negs	r3, r3
 800ca12:	441a      	add	r2, r3
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	68da      	ldr	r2, [r3, #12]
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d207      	bcs.n	800ca34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	689a      	ldr	r2, [r3, #8]
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca2c:	425b      	negs	r3, r3
 800ca2e:	441a      	add	r2, r3
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2b02      	cmp	r3, #2
 800ca38:	d105      	bne.n	800ca46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d002      	beq.n	800ca46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	3b01      	subs	r3, #1
 800ca44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	1c5a      	adds	r2, r3, #1
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ca4e:	697b      	ldr	r3, [r7, #20]
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3718      	adds	r7, #24
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ca60:	f001 f890 	bl	800db84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca6c:	e011      	b.n	800ca92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d012      	beq.n	800ca9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	3324      	adds	r3, #36	; 0x24
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f000 fc8e 	bl	800d39c <xTaskRemoveFromEventList>
 800ca80:	4603      	mov	r3, r0
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d001      	beq.n	800ca8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ca86:	f000 fd63 	bl	800d550 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ca8a:	7bfb      	ldrb	r3, [r7, #15]
 800ca8c:	3b01      	subs	r3, #1
 800ca8e:	b2db      	uxtb	r3, r3
 800ca90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	dce9      	bgt.n	800ca6e <prvUnlockQueue+0x16>
 800ca9a:	e000      	b.n	800ca9e <prvUnlockQueue+0x46>
					break;
 800ca9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	22ff      	movs	r2, #255	; 0xff
 800caa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800caa6:	f001 f89d 	bl	800dbe4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800caaa:	f001 f86b 	bl	800db84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cab4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cab6:	e011      	b.n	800cadc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	691b      	ldr	r3, [r3, #16]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d012      	beq.n	800cae6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	3310      	adds	r3, #16
 800cac4:	4618      	mov	r0, r3
 800cac6:	f000 fc69 	bl	800d39c <xTaskRemoveFromEventList>
 800caca:	4603      	mov	r3, r0
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d001      	beq.n	800cad4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cad0:	f000 fd3e 	bl	800d550 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cad4:	7bbb      	ldrb	r3, [r7, #14]
 800cad6:	3b01      	subs	r3, #1
 800cad8:	b2db      	uxtb	r3, r3
 800cada:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cadc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	dce9      	bgt.n	800cab8 <prvUnlockQueue+0x60>
 800cae4:	e000      	b.n	800cae8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cae6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	22ff      	movs	r2, #255	; 0xff
 800caec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800caf0:	f001 f878 	bl	800dbe4 <vPortExitCritical>
}
 800caf4:	bf00      	nop
 800caf6:	3710      	adds	r7, #16
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}

0800cafc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b084      	sub	sp, #16
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb04:	f001 f83e 	bl	800db84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d102      	bne.n	800cb1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cb14:	2301      	movs	r3, #1
 800cb16:	60fb      	str	r3, [r7, #12]
 800cb18:	e001      	b.n	800cb1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb1e:	f001 f861 	bl	800dbe4 <vPortExitCritical>

	return xReturn;
 800cb22:	68fb      	ldr	r3, [r7, #12]
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3710      	adds	r7, #16
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}

0800cb2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b08e      	sub	sp, #56	; 0x38
 800cb30:	af04      	add	r7, sp, #16
 800cb32:	60f8      	str	r0, [r7, #12]
 800cb34:	60b9      	str	r1, [r7, #8]
 800cb36:	607a      	str	r2, [r7, #4]
 800cb38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cb3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d10a      	bne.n	800cb56 <xTaskCreateStatic+0x2a>
	__asm volatile
 800cb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb44:	f383 8811 	msr	BASEPRI, r3
 800cb48:	f3bf 8f6f 	isb	sy
 800cb4c:	f3bf 8f4f 	dsb	sy
 800cb50:	623b      	str	r3, [r7, #32]
}
 800cb52:	bf00      	nop
 800cb54:	e7fe      	b.n	800cb54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d10a      	bne.n	800cb72 <xTaskCreateStatic+0x46>
	__asm volatile
 800cb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb60:	f383 8811 	msr	BASEPRI, r3
 800cb64:	f3bf 8f6f 	isb	sy
 800cb68:	f3bf 8f4f 	dsb	sy
 800cb6c:	61fb      	str	r3, [r7, #28]
}
 800cb6e:	bf00      	nop
 800cb70:	e7fe      	b.n	800cb70 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cb72:	2358      	movs	r3, #88	; 0x58
 800cb74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	2b58      	cmp	r3, #88	; 0x58
 800cb7a:	d00a      	beq.n	800cb92 <xTaskCreateStatic+0x66>
	__asm volatile
 800cb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb80:	f383 8811 	msr	BASEPRI, r3
 800cb84:	f3bf 8f6f 	isb	sy
 800cb88:	f3bf 8f4f 	dsb	sy
 800cb8c:	61bb      	str	r3, [r7, #24]
}
 800cb8e:	bf00      	nop
 800cb90:	e7fe      	b.n	800cb90 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cb92:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d01e      	beq.n	800cbd8 <xTaskCreateStatic+0xac>
 800cb9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d01b      	beq.n	800cbd8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cba8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbac:	2202      	movs	r2, #2
 800cbae:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	9303      	str	r3, [sp, #12]
 800cbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb8:	9302      	str	r3, [sp, #8]
 800cbba:	f107 0314 	add.w	r3, r7, #20
 800cbbe:	9301      	str	r3, [sp, #4]
 800cbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc2:	9300      	str	r3, [sp, #0]
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	687a      	ldr	r2, [r7, #4]
 800cbc8:	68b9      	ldr	r1, [r7, #8]
 800cbca:	68f8      	ldr	r0, [r7, #12]
 800cbcc:	f000 f850 	bl	800cc70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cbd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cbd2:	f000 f8df 	bl	800cd94 <prvAddNewTaskToReadyList>
 800cbd6:	e001      	b.n	800cbdc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cbdc:	697b      	ldr	r3, [r7, #20]
	}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3728      	adds	r7, #40	; 0x28
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}

0800cbe6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cbe6:	b580      	push	{r7, lr}
 800cbe8:	b08c      	sub	sp, #48	; 0x30
 800cbea:	af04      	add	r7, sp, #16
 800cbec:	60f8      	str	r0, [r7, #12]
 800cbee:	60b9      	str	r1, [r7, #8]
 800cbf0:	603b      	str	r3, [r7, #0]
 800cbf2:	4613      	mov	r3, r2
 800cbf4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cbf6:	88fb      	ldrh	r3, [r7, #6]
 800cbf8:	009b      	lsls	r3, r3, #2
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f001 f8a4 	bl	800dd48 <pvPortMalloc>
 800cc00:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d00e      	beq.n	800cc26 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cc08:	2058      	movs	r0, #88	; 0x58
 800cc0a:	f001 f89d 	bl	800dd48 <pvPortMalloc>
 800cc0e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cc10:	69fb      	ldr	r3, [r7, #28]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d003      	beq.n	800cc1e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cc16:	69fb      	ldr	r3, [r7, #28]
 800cc18:	697a      	ldr	r2, [r7, #20]
 800cc1a:	631a      	str	r2, [r3, #48]	; 0x30
 800cc1c:	e005      	b.n	800cc2a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cc1e:	6978      	ldr	r0, [r7, #20]
 800cc20:	f001 f962 	bl	800dee8 <vPortFree>
 800cc24:	e001      	b.n	800cc2a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cc26:	2300      	movs	r3, #0
 800cc28:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cc2a:	69fb      	ldr	r3, [r7, #28]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d017      	beq.n	800cc60 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cc30:	69fb      	ldr	r3, [r7, #28]
 800cc32:	2200      	movs	r2, #0
 800cc34:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cc38:	88fa      	ldrh	r2, [r7, #6]
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	9303      	str	r3, [sp, #12]
 800cc3e:	69fb      	ldr	r3, [r7, #28]
 800cc40:	9302      	str	r3, [sp, #8]
 800cc42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc44:	9301      	str	r3, [sp, #4]
 800cc46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc48:	9300      	str	r3, [sp, #0]
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	68b9      	ldr	r1, [r7, #8]
 800cc4e:	68f8      	ldr	r0, [r7, #12]
 800cc50:	f000 f80e 	bl	800cc70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc54:	69f8      	ldr	r0, [r7, #28]
 800cc56:	f000 f89d 	bl	800cd94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	61bb      	str	r3, [r7, #24]
 800cc5e:	e002      	b.n	800cc66 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cc60:	f04f 33ff 	mov.w	r3, #4294967295
 800cc64:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cc66:	69bb      	ldr	r3, [r7, #24]
	}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3720      	adds	r7, #32
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b088      	sub	sp, #32
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	60f8      	str	r0, [r7, #12]
 800cc78:	60b9      	str	r1, [r7, #8]
 800cc7a:	607a      	str	r2, [r7, #4]
 800cc7c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc80:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	009b      	lsls	r3, r3, #2
 800cc86:	461a      	mov	r2, r3
 800cc88:	21a5      	movs	r1, #165	; 0xa5
 800cc8a:	f002 f8c0 	bl	800ee0e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cc98:	3b01      	subs	r3, #1
 800cc9a:	009b      	lsls	r3, r3, #2
 800cc9c:	4413      	add	r3, r2
 800cc9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cca0:	69bb      	ldr	r3, [r7, #24]
 800cca2:	f023 0307 	bic.w	r3, r3, #7
 800cca6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cca8:	69bb      	ldr	r3, [r7, #24]
 800ccaa:	f003 0307 	and.w	r3, r3, #7
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d00a      	beq.n	800ccc8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ccb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb6:	f383 8811 	msr	BASEPRI, r3
 800ccba:	f3bf 8f6f 	isb	sy
 800ccbe:	f3bf 8f4f 	dsb	sy
 800ccc2:	617b      	str	r3, [r7, #20]
}
 800ccc4:	bf00      	nop
 800ccc6:	e7fe      	b.n	800ccc6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d01f      	beq.n	800cd0e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ccce:	2300      	movs	r3, #0
 800ccd0:	61fb      	str	r3, [r7, #28]
 800ccd2:	e012      	b.n	800ccfa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ccd4:	68ba      	ldr	r2, [r7, #8]
 800ccd6:	69fb      	ldr	r3, [r7, #28]
 800ccd8:	4413      	add	r3, r2
 800ccda:	7819      	ldrb	r1, [r3, #0]
 800ccdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccde:	69fb      	ldr	r3, [r7, #28]
 800cce0:	4413      	add	r3, r2
 800cce2:	3334      	adds	r3, #52	; 0x34
 800cce4:	460a      	mov	r2, r1
 800cce6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cce8:	68ba      	ldr	r2, [r7, #8]
 800ccea:	69fb      	ldr	r3, [r7, #28]
 800ccec:	4413      	add	r3, r2
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d006      	beq.n	800cd02 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ccf4:	69fb      	ldr	r3, [r7, #28]
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	61fb      	str	r3, [r7, #28]
 800ccfa:	69fb      	ldr	r3, [r7, #28]
 800ccfc:	2b0f      	cmp	r3, #15
 800ccfe:	d9e9      	bls.n	800ccd4 <prvInitialiseNewTask+0x64>
 800cd00:	e000      	b.n	800cd04 <prvInitialiseNewTask+0x94>
			{
				break;
 800cd02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd06:	2200      	movs	r2, #0
 800cd08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cd0c:	e003      	b.n	800cd16 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd10:	2200      	movs	r2, #0
 800cd12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd18:	2b06      	cmp	r3, #6
 800cd1a:	d901      	bls.n	800cd20 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cd1c:	2306      	movs	r3, #6
 800cd1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cd20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd2a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd2e:	2200      	movs	r2, #0
 800cd30:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd34:	3304      	adds	r3, #4
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7ff fb0b 	bl	800c352 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd3e:	3318      	adds	r3, #24
 800cd40:	4618      	mov	r0, r3
 800cd42:	f7ff fb06 	bl	800c352 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd4e:	f1c3 0207 	rsb	r2, r3, #7
 800cd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800cd5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd5e:	2200      	movs	r2, #0
 800cd60:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd64:	2200      	movs	r2, #0
 800cd66:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cd70:	683a      	ldr	r2, [r7, #0]
 800cd72:	68f9      	ldr	r1, [r7, #12]
 800cd74:	69b8      	ldr	r0, [r7, #24]
 800cd76:	f000 fdd9 	bl	800d92c <pxPortInitialiseStack>
 800cd7a:	4602      	mov	r2, r0
 800cd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d002      	beq.n	800cd8c <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd8a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd8c:	bf00      	nop
 800cd8e:	3720      	adds	r7, #32
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b082      	sub	sp, #8
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cd9c:	f000 fef2 	bl	800db84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cda0:	4b2a      	ldr	r3, [pc, #168]	; (800ce4c <prvAddNewTaskToReadyList+0xb8>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	3301      	adds	r3, #1
 800cda6:	4a29      	ldr	r2, [pc, #164]	; (800ce4c <prvAddNewTaskToReadyList+0xb8>)
 800cda8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cdaa:	4b29      	ldr	r3, [pc, #164]	; (800ce50 <prvAddNewTaskToReadyList+0xbc>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d109      	bne.n	800cdc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cdb2:	4a27      	ldr	r2, [pc, #156]	; (800ce50 <prvAddNewTaskToReadyList+0xbc>)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cdb8:	4b24      	ldr	r3, [pc, #144]	; (800ce4c <prvAddNewTaskToReadyList+0xb8>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	d110      	bne.n	800cde2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cdc0:	f000 fbec 	bl	800d59c <prvInitialiseTaskLists>
 800cdc4:	e00d      	b.n	800cde2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cdc6:	4b23      	ldr	r3, [pc, #140]	; (800ce54 <prvAddNewTaskToReadyList+0xc0>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d109      	bne.n	800cde2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cdce:	4b20      	ldr	r3, [pc, #128]	; (800ce50 <prvAddNewTaskToReadyList+0xbc>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d802      	bhi.n	800cde2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cddc:	4a1c      	ldr	r2, [pc, #112]	; (800ce50 <prvAddNewTaskToReadyList+0xbc>)
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cde2:	4b1d      	ldr	r3, [pc, #116]	; (800ce58 <prvAddNewTaskToReadyList+0xc4>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	3301      	adds	r3, #1
 800cde8:	4a1b      	ldr	r2, [pc, #108]	; (800ce58 <prvAddNewTaskToReadyList+0xc4>)
 800cdea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	409a      	lsls	r2, r3
 800cdf4:	4b19      	ldr	r3, [pc, #100]	; (800ce5c <prvAddNewTaskToReadyList+0xc8>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	4313      	orrs	r3, r2
 800cdfa:	4a18      	ldr	r2, [pc, #96]	; (800ce5c <prvAddNewTaskToReadyList+0xc8>)
 800cdfc:	6013      	str	r3, [r2, #0]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce02:	4613      	mov	r3, r2
 800ce04:	009b      	lsls	r3, r3, #2
 800ce06:	4413      	add	r3, r2
 800ce08:	009b      	lsls	r3, r3, #2
 800ce0a:	4a15      	ldr	r2, [pc, #84]	; (800ce60 <prvAddNewTaskToReadyList+0xcc>)
 800ce0c:	441a      	add	r2, r3
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	3304      	adds	r3, #4
 800ce12:	4619      	mov	r1, r3
 800ce14:	4610      	mov	r0, r2
 800ce16:	f7ff faa9 	bl	800c36c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ce1a:	f000 fee3 	bl	800dbe4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ce1e:	4b0d      	ldr	r3, [pc, #52]	; (800ce54 <prvAddNewTaskToReadyList+0xc0>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d00e      	beq.n	800ce44 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ce26:	4b0a      	ldr	r3, [pc, #40]	; (800ce50 <prvAddNewTaskToReadyList+0xbc>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce30:	429a      	cmp	r2, r3
 800ce32:	d207      	bcs.n	800ce44 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ce34:	4b0b      	ldr	r3, [pc, #44]	; (800ce64 <prvAddNewTaskToReadyList+0xd0>)
 800ce36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce3a:	601a      	str	r2, [r3, #0]
 800ce3c:	f3bf 8f4f 	dsb	sy
 800ce40:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce44:	bf00      	nop
 800ce46:	3708      	adds	r7, #8
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}
 800ce4c:	20000924 	.word	0x20000924
 800ce50:	20000824 	.word	0x20000824
 800ce54:	20000930 	.word	0x20000930
 800ce58:	20000940 	.word	0x20000940
 800ce5c:	2000092c 	.word	0x2000092c
 800ce60:	20000828 	.word	0x20000828
 800ce64:	e000ed04 	.word	0xe000ed04

0800ce68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ce70:	2300      	movs	r3, #0
 800ce72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d017      	beq.n	800ceaa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ce7a:	4b13      	ldr	r3, [pc, #76]	; (800cec8 <vTaskDelay+0x60>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d00a      	beq.n	800ce98 <vTaskDelay+0x30>
	__asm volatile
 800ce82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce86:	f383 8811 	msr	BASEPRI, r3
 800ce8a:	f3bf 8f6f 	isb	sy
 800ce8e:	f3bf 8f4f 	dsb	sy
 800ce92:	60bb      	str	r3, [r7, #8]
}
 800ce94:	bf00      	nop
 800ce96:	e7fe      	b.n	800ce96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ce98:	f000 f87a 	bl	800cf90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ce9c:	2100      	movs	r1, #0
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f000 fcde 	bl	800d860 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cea4:	f000 f882 	bl	800cfac <xTaskResumeAll>
 800cea8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d107      	bne.n	800cec0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ceb0:	4b06      	ldr	r3, [pc, #24]	; (800cecc <vTaskDelay+0x64>)
 800ceb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceb6:	601a      	str	r2, [r3, #0]
 800ceb8:	f3bf 8f4f 	dsb	sy
 800cebc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cec0:	bf00      	nop
 800cec2:	3710      	adds	r7, #16
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}
 800cec8:	2000094c 	.word	0x2000094c
 800cecc:	e000ed04 	.word	0xe000ed04

0800ced0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b08a      	sub	sp, #40	; 0x28
 800ced4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ced6:	2300      	movs	r3, #0
 800ced8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ceda:	2300      	movs	r3, #0
 800cedc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cede:	463a      	mov	r2, r7
 800cee0:	1d39      	adds	r1, r7, #4
 800cee2:	f107 0308 	add.w	r3, r7, #8
 800cee6:	4618      	mov	r0, r3
 800cee8:	f7f4 fafe 	bl	80014e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ceec:	6839      	ldr	r1, [r7, #0]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	68ba      	ldr	r2, [r7, #8]
 800cef2:	9202      	str	r2, [sp, #8]
 800cef4:	9301      	str	r3, [sp, #4]
 800cef6:	2300      	movs	r3, #0
 800cef8:	9300      	str	r3, [sp, #0]
 800cefa:	2300      	movs	r3, #0
 800cefc:	460a      	mov	r2, r1
 800cefe:	491e      	ldr	r1, [pc, #120]	; (800cf78 <vTaskStartScheduler+0xa8>)
 800cf00:	481e      	ldr	r0, [pc, #120]	; (800cf7c <vTaskStartScheduler+0xac>)
 800cf02:	f7ff fe13 	bl	800cb2c <xTaskCreateStatic>
 800cf06:	4603      	mov	r3, r0
 800cf08:	4a1d      	ldr	r2, [pc, #116]	; (800cf80 <vTaskStartScheduler+0xb0>)
 800cf0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cf0c:	4b1c      	ldr	r3, [pc, #112]	; (800cf80 <vTaskStartScheduler+0xb0>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d002      	beq.n	800cf1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cf14:	2301      	movs	r3, #1
 800cf16:	617b      	str	r3, [r7, #20]
 800cf18:	e001      	b.n	800cf1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	d116      	bne.n	800cf52 <vTaskStartScheduler+0x82>
	__asm volatile
 800cf24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf28:	f383 8811 	msr	BASEPRI, r3
 800cf2c:	f3bf 8f6f 	isb	sy
 800cf30:	f3bf 8f4f 	dsb	sy
 800cf34:	613b      	str	r3, [r7, #16]
}
 800cf36:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cf38:	4b12      	ldr	r3, [pc, #72]	; (800cf84 <vTaskStartScheduler+0xb4>)
 800cf3a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf3e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cf40:	4b11      	ldr	r3, [pc, #68]	; (800cf88 <vTaskStartScheduler+0xb8>)
 800cf42:	2201      	movs	r2, #1
 800cf44:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cf46:	4b11      	ldr	r3, [pc, #68]	; (800cf8c <vTaskStartScheduler+0xbc>)
 800cf48:	2200      	movs	r2, #0
 800cf4a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cf4c:	f000 fd78 	bl	800da40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cf50:	e00e      	b.n	800cf70 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf58:	d10a      	bne.n	800cf70 <vTaskStartScheduler+0xa0>
	__asm volatile
 800cf5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf5e:	f383 8811 	msr	BASEPRI, r3
 800cf62:	f3bf 8f6f 	isb	sy
 800cf66:	f3bf 8f4f 	dsb	sy
 800cf6a:	60fb      	str	r3, [r7, #12]
}
 800cf6c:	bf00      	nop
 800cf6e:	e7fe      	b.n	800cf6e <vTaskStartScheduler+0x9e>
}
 800cf70:	bf00      	nop
 800cf72:	3718      	adds	r7, #24
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}
 800cf78:	0800fe10 	.word	0x0800fe10
 800cf7c:	0800d569 	.word	0x0800d569
 800cf80:	20000948 	.word	0x20000948
 800cf84:	20000944 	.word	0x20000944
 800cf88:	20000930 	.word	0x20000930
 800cf8c:	20000928 	.word	0x20000928

0800cf90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cf90:	b480      	push	{r7}
 800cf92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cf94:	4b04      	ldr	r3, [pc, #16]	; (800cfa8 <vTaskSuspendAll+0x18>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	3301      	adds	r3, #1
 800cf9a:	4a03      	ldr	r2, [pc, #12]	; (800cfa8 <vTaskSuspendAll+0x18>)
 800cf9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cf9e:	bf00      	nop
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr
 800cfa8:	2000094c 	.word	0x2000094c

0800cfac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b084      	sub	sp, #16
 800cfb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cfba:	4b41      	ldr	r3, [pc, #260]	; (800d0c0 <xTaskResumeAll+0x114>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d10a      	bne.n	800cfd8 <xTaskResumeAll+0x2c>
	__asm volatile
 800cfc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc6:	f383 8811 	msr	BASEPRI, r3
 800cfca:	f3bf 8f6f 	isb	sy
 800cfce:	f3bf 8f4f 	dsb	sy
 800cfd2:	603b      	str	r3, [r7, #0]
}
 800cfd4:	bf00      	nop
 800cfd6:	e7fe      	b.n	800cfd6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cfd8:	f000 fdd4 	bl	800db84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cfdc:	4b38      	ldr	r3, [pc, #224]	; (800d0c0 <xTaskResumeAll+0x114>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	3b01      	subs	r3, #1
 800cfe2:	4a37      	ldr	r2, [pc, #220]	; (800d0c0 <xTaskResumeAll+0x114>)
 800cfe4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfe6:	4b36      	ldr	r3, [pc, #216]	; (800d0c0 <xTaskResumeAll+0x114>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d161      	bne.n	800d0b2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cfee:	4b35      	ldr	r3, [pc, #212]	; (800d0c4 <xTaskResumeAll+0x118>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d05d      	beq.n	800d0b2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cff6:	e02e      	b.n	800d056 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cff8:	4b33      	ldr	r3, [pc, #204]	; (800d0c8 <xTaskResumeAll+0x11c>)
 800cffa:	68db      	ldr	r3, [r3, #12]
 800cffc:	68db      	ldr	r3, [r3, #12]
 800cffe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	3318      	adds	r3, #24
 800d004:	4618      	mov	r0, r3
 800d006:	f7ff fa0e 	bl	800c426 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	3304      	adds	r3, #4
 800d00e:	4618      	mov	r0, r3
 800d010:	f7ff fa09 	bl	800c426 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d018:	2201      	movs	r2, #1
 800d01a:	409a      	lsls	r2, r3
 800d01c:	4b2b      	ldr	r3, [pc, #172]	; (800d0cc <xTaskResumeAll+0x120>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4313      	orrs	r3, r2
 800d022:	4a2a      	ldr	r2, [pc, #168]	; (800d0cc <xTaskResumeAll+0x120>)
 800d024:	6013      	str	r3, [r2, #0]
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d02a:	4613      	mov	r3, r2
 800d02c:	009b      	lsls	r3, r3, #2
 800d02e:	4413      	add	r3, r2
 800d030:	009b      	lsls	r3, r3, #2
 800d032:	4a27      	ldr	r2, [pc, #156]	; (800d0d0 <xTaskResumeAll+0x124>)
 800d034:	441a      	add	r2, r3
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	3304      	adds	r3, #4
 800d03a:	4619      	mov	r1, r3
 800d03c:	4610      	mov	r0, r2
 800d03e:	f7ff f995 	bl	800c36c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d046:	4b23      	ldr	r3, [pc, #140]	; (800d0d4 <xTaskResumeAll+0x128>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d04c:	429a      	cmp	r2, r3
 800d04e:	d302      	bcc.n	800d056 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d050:	4b21      	ldr	r3, [pc, #132]	; (800d0d8 <xTaskResumeAll+0x12c>)
 800d052:	2201      	movs	r2, #1
 800d054:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d056:	4b1c      	ldr	r3, [pc, #112]	; (800d0c8 <xTaskResumeAll+0x11c>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d1cc      	bne.n	800cff8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d001      	beq.n	800d068 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d064:	f000 fb38 	bl	800d6d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d068:	4b1c      	ldr	r3, [pc, #112]	; (800d0dc <xTaskResumeAll+0x130>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d010      	beq.n	800d096 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d074:	f000 f836 	bl	800d0e4 <xTaskIncrementTick>
 800d078:	4603      	mov	r3, r0
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d002      	beq.n	800d084 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d07e:	4b16      	ldr	r3, [pc, #88]	; (800d0d8 <xTaskResumeAll+0x12c>)
 800d080:	2201      	movs	r2, #1
 800d082:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	3b01      	subs	r3, #1
 800d088:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d1f1      	bne.n	800d074 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d090:	4b12      	ldr	r3, [pc, #72]	; (800d0dc <xTaskResumeAll+0x130>)
 800d092:	2200      	movs	r2, #0
 800d094:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d096:	4b10      	ldr	r3, [pc, #64]	; (800d0d8 <xTaskResumeAll+0x12c>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d009      	beq.n	800d0b2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d09e:	2301      	movs	r3, #1
 800d0a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d0a2:	4b0f      	ldr	r3, [pc, #60]	; (800d0e0 <xTaskResumeAll+0x134>)
 800d0a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0a8:	601a      	str	r2, [r3, #0]
 800d0aa:	f3bf 8f4f 	dsb	sy
 800d0ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d0b2:	f000 fd97 	bl	800dbe4 <vPortExitCritical>

	return xAlreadyYielded;
 800d0b6:	68bb      	ldr	r3, [r7, #8]
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3710      	adds	r7, #16
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}
 800d0c0:	2000094c 	.word	0x2000094c
 800d0c4:	20000924 	.word	0x20000924
 800d0c8:	200008e4 	.word	0x200008e4
 800d0cc:	2000092c 	.word	0x2000092c
 800d0d0:	20000828 	.word	0x20000828
 800d0d4:	20000824 	.word	0x20000824
 800d0d8:	20000938 	.word	0x20000938
 800d0dc:	20000934 	.word	0x20000934
 800d0e0:	e000ed04 	.word	0xe000ed04

0800d0e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b086      	sub	sp, #24
 800d0e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0ee:	4b4e      	ldr	r3, [pc, #312]	; (800d228 <xTaskIncrementTick+0x144>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	f040 808e 	bne.w	800d214 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d0f8:	4b4c      	ldr	r3, [pc, #304]	; (800d22c <xTaskIncrementTick+0x148>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d100:	4a4a      	ldr	r2, [pc, #296]	; (800d22c <xTaskIncrementTick+0x148>)
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d106:	693b      	ldr	r3, [r7, #16]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d120      	bne.n	800d14e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d10c:	4b48      	ldr	r3, [pc, #288]	; (800d230 <xTaskIncrementTick+0x14c>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d00a      	beq.n	800d12c <xTaskIncrementTick+0x48>
	__asm volatile
 800d116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11a:	f383 8811 	msr	BASEPRI, r3
 800d11e:	f3bf 8f6f 	isb	sy
 800d122:	f3bf 8f4f 	dsb	sy
 800d126:	603b      	str	r3, [r7, #0]
}
 800d128:	bf00      	nop
 800d12a:	e7fe      	b.n	800d12a <xTaskIncrementTick+0x46>
 800d12c:	4b40      	ldr	r3, [pc, #256]	; (800d230 <xTaskIncrementTick+0x14c>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	60fb      	str	r3, [r7, #12]
 800d132:	4b40      	ldr	r3, [pc, #256]	; (800d234 <xTaskIncrementTick+0x150>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	4a3e      	ldr	r2, [pc, #248]	; (800d230 <xTaskIncrementTick+0x14c>)
 800d138:	6013      	str	r3, [r2, #0]
 800d13a:	4a3e      	ldr	r2, [pc, #248]	; (800d234 <xTaskIncrementTick+0x150>)
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	6013      	str	r3, [r2, #0]
 800d140:	4b3d      	ldr	r3, [pc, #244]	; (800d238 <xTaskIncrementTick+0x154>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	3301      	adds	r3, #1
 800d146:	4a3c      	ldr	r2, [pc, #240]	; (800d238 <xTaskIncrementTick+0x154>)
 800d148:	6013      	str	r3, [r2, #0]
 800d14a:	f000 fac5 	bl	800d6d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d14e:	4b3b      	ldr	r3, [pc, #236]	; (800d23c <xTaskIncrementTick+0x158>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	693a      	ldr	r2, [r7, #16]
 800d154:	429a      	cmp	r2, r3
 800d156:	d348      	bcc.n	800d1ea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d158:	4b35      	ldr	r3, [pc, #212]	; (800d230 <xTaskIncrementTick+0x14c>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d104      	bne.n	800d16c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d162:	4b36      	ldr	r3, [pc, #216]	; (800d23c <xTaskIncrementTick+0x158>)
 800d164:	f04f 32ff 	mov.w	r2, #4294967295
 800d168:	601a      	str	r2, [r3, #0]
					break;
 800d16a:	e03e      	b.n	800d1ea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d16c:	4b30      	ldr	r3, [pc, #192]	; (800d230 <xTaskIncrementTick+0x14c>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	68db      	ldr	r3, [r3, #12]
 800d172:	68db      	ldr	r3, [r3, #12]
 800d174:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	685b      	ldr	r3, [r3, #4]
 800d17a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d17c:	693a      	ldr	r2, [r7, #16]
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	429a      	cmp	r2, r3
 800d182:	d203      	bcs.n	800d18c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d184:	4a2d      	ldr	r2, [pc, #180]	; (800d23c <xTaskIncrementTick+0x158>)
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d18a:	e02e      	b.n	800d1ea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	3304      	adds	r3, #4
 800d190:	4618      	mov	r0, r3
 800d192:	f7ff f948 	bl	800c426 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d004      	beq.n	800d1a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	3318      	adds	r3, #24
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f7ff f93f 	bl	800c426 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	409a      	lsls	r2, r3
 800d1b0:	4b23      	ldr	r3, [pc, #140]	; (800d240 <xTaskIncrementTick+0x15c>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4313      	orrs	r3, r2
 800d1b6:	4a22      	ldr	r2, [pc, #136]	; (800d240 <xTaskIncrementTick+0x15c>)
 800d1b8:	6013      	str	r3, [r2, #0]
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1be:	4613      	mov	r3, r2
 800d1c0:	009b      	lsls	r3, r3, #2
 800d1c2:	4413      	add	r3, r2
 800d1c4:	009b      	lsls	r3, r3, #2
 800d1c6:	4a1f      	ldr	r2, [pc, #124]	; (800d244 <xTaskIncrementTick+0x160>)
 800d1c8:	441a      	add	r2, r3
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	3304      	adds	r3, #4
 800d1ce:	4619      	mov	r1, r3
 800d1d0:	4610      	mov	r0, r2
 800d1d2:	f7ff f8cb 	bl	800c36c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1da:	4b1b      	ldr	r3, [pc, #108]	; (800d248 <xTaskIncrementTick+0x164>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	d3b9      	bcc.n	800d158 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1e8:	e7b6      	b.n	800d158 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d1ea:	4b17      	ldr	r3, [pc, #92]	; (800d248 <xTaskIncrementTick+0x164>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1f0:	4914      	ldr	r1, [pc, #80]	; (800d244 <xTaskIncrementTick+0x160>)
 800d1f2:	4613      	mov	r3, r2
 800d1f4:	009b      	lsls	r3, r3, #2
 800d1f6:	4413      	add	r3, r2
 800d1f8:	009b      	lsls	r3, r3, #2
 800d1fa:	440b      	add	r3, r1
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	2b01      	cmp	r3, #1
 800d200:	d901      	bls.n	800d206 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d202:	2301      	movs	r3, #1
 800d204:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d206:	4b11      	ldr	r3, [pc, #68]	; (800d24c <xTaskIncrementTick+0x168>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d007      	beq.n	800d21e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d20e:	2301      	movs	r3, #1
 800d210:	617b      	str	r3, [r7, #20]
 800d212:	e004      	b.n	800d21e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d214:	4b0e      	ldr	r3, [pc, #56]	; (800d250 <xTaskIncrementTick+0x16c>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	3301      	adds	r3, #1
 800d21a:	4a0d      	ldr	r2, [pc, #52]	; (800d250 <xTaskIncrementTick+0x16c>)
 800d21c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d21e:	697b      	ldr	r3, [r7, #20]
}
 800d220:	4618      	mov	r0, r3
 800d222:	3718      	adds	r7, #24
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}
 800d228:	2000094c 	.word	0x2000094c
 800d22c:	20000928 	.word	0x20000928
 800d230:	200008dc 	.word	0x200008dc
 800d234:	200008e0 	.word	0x200008e0
 800d238:	2000093c 	.word	0x2000093c
 800d23c:	20000944 	.word	0x20000944
 800d240:	2000092c 	.word	0x2000092c
 800d244:	20000828 	.word	0x20000828
 800d248:	20000824 	.word	0x20000824
 800d24c:	20000938 	.word	0x20000938
 800d250:	20000934 	.word	0x20000934

0800d254 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b088      	sub	sp, #32
 800d258:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d25a:	4b39      	ldr	r3, [pc, #228]	; (800d340 <vTaskSwitchContext+0xec>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d003      	beq.n	800d26a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d262:	4b38      	ldr	r3, [pc, #224]	; (800d344 <vTaskSwitchContext+0xf0>)
 800d264:	2201      	movs	r2, #1
 800d266:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d268:	e066      	b.n	800d338 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800d26a:	4b36      	ldr	r3, [pc, #216]	; (800d344 <vTaskSwitchContext+0xf0>)
 800d26c:	2200      	movs	r2, #0
 800d26e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800d270:	4b35      	ldr	r3, [pc, #212]	; (800d348 <vTaskSwitchContext+0xf4>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d276:	61fb      	str	r3, [r7, #28]
 800d278:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800d27c:	61bb      	str	r3, [r7, #24]
 800d27e:	69fb      	ldr	r3, [r7, #28]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	69ba      	ldr	r2, [r7, #24]
 800d284:	429a      	cmp	r2, r3
 800d286:	d111      	bne.n	800d2ac <vTaskSwitchContext+0x58>
 800d288:	69fb      	ldr	r3, [r7, #28]
 800d28a:	3304      	adds	r3, #4
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	69ba      	ldr	r2, [r7, #24]
 800d290:	429a      	cmp	r2, r3
 800d292:	d10b      	bne.n	800d2ac <vTaskSwitchContext+0x58>
 800d294:	69fb      	ldr	r3, [r7, #28]
 800d296:	3308      	adds	r3, #8
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	69ba      	ldr	r2, [r7, #24]
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d105      	bne.n	800d2ac <vTaskSwitchContext+0x58>
 800d2a0:	69fb      	ldr	r3, [r7, #28]
 800d2a2:	330c      	adds	r3, #12
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	69ba      	ldr	r2, [r7, #24]
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d008      	beq.n	800d2be <vTaskSwitchContext+0x6a>
 800d2ac:	4b26      	ldr	r3, [pc, #152]	; (800d348 <vTaskSwitchContext+0xf4>)
 800d2ae:	681a      	ldr	r2, [r3, #0]
 800d2b0:	4b25      	ldr	r3, [pc, #148]	; (800d348 <vTaskSwitchContext+0xf4>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	3334      	adds	r3, #52	; 0x34
 800d2b6:	4619      	mov	r1, r3
 800d2b8:	4610      	mov	r0, r2
 800d2ba:	f7f4 f902 	bl	80014c2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2be:	4b23      	ldr	r3, [pc, #140]	; (800d34c <vTaskSwitchContext+0xf8>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	fab3 f383 	clz	r3, r3
 800d2ca:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d2cc:	7afb      	ldrb	r3, [r7, #11]
 800d2ce:	f1c3 031f 	rsb	r3, r3, #31
 800d2d2:	617b      	str	r3, [r7, #20]
 800d2d4:	491e      	ldr	r1, [pc, #120]	; (800d350 <vTaskSwitchContext+0xfc>)
 800d2d6:	697a      	ldr	r2, [r7, #20]
 800d2d8:	4613      	mov	r3, r2
 800d2da:	009b      	lsls	r3, r3, #2
 800d2dc:	4413      	add	r3, r2
 800d2de:	009b      	lsls	r3, r3, #2
 800d2e0:	440b      	add	r3, r1
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d10a      	bne.n	800d2fe <vTaskSwitchContext+0xaa>
	__asm volatile
 800d2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ec:	f383 8811 	msr	BASEPRI, r3
 800d2f0:	f3bf 8f6f 	isb	sy
 800d2f4:	f3bf 8f4f 	dsb	sy
 800d2f8:	607b      	str	r3, [r7, #4]
}
 800d2fa:	bf00      	nop
 800d2fc:	e7fe      	b.n	800d2fc <vTaskSwitchContext+0xa8>
 800d2fe:	697a      	ldr	r2, [r7, #20]
 800d300:	4613      	mov	r3, r2
 800d302:	009b      	lsls	r3, r3, #2
 800d304:	4413      	add	r3, r2
 800d306:	009b      	lsls	r3, r3, #2
 800d308:	4a11      	ldr	r2, [pc, #68]	; (800d350 <vTaskSwitchContext+0xfc>)
 800d30a:	4413      	add	r3, r2
 800d30c:	613b      	str	r3, [r7, #16]
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	685b      	ldr	r3, [r3, #4]
 800d312:	685a      	ldr	r2, [r3, #4]
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	605a      	str	r2, [r3, #4]
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	685a      	ldr	r2, [r3, #4]
 800d31c:	693b      	ldr	r3, [r7, #16]
 800d31e:	3308      	adds	r3, #8
 800d320:	429a      	cmp	r2, r3
 800d322:	d104      	bne.n	800d32e <vTaskSwitchContext+0xda>
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	685a      	ldr	r2, [r3, #4]
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	605a      	str	r2, [r3, #4]
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	685b      	ldr	r3, [r3, #4]
 800d332:	68db      	ldr	r3, [r3, #12]
 800d334:	4a04      	ldr	r2, [pc, #16]	; (800d348 <vTaskSwitchContext+0xf4>)
 800d336:	6013      	str	r3, [r2, #0]
}
 800d338:	bf00      	nop
 800d33a:	3720      	adds	r7, #32
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}
 800d340:	2000094c 	.word	0x2000094c
 800d344:	20000938 	.word	0x20000938
 800d348:	20000824 	.word	0x20000824
 800d34c:	2000092c 	.word	0x2000092c
 800d350:	20000828 	.word	0x20000828

0800d354 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b084      	sub	sp, #16
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d10a      	bne.n	800d37a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d368:	f383 8811 	msr	BASEPRI, r3
 800d36c:	f3bf 8f6f 	isb	sy
 800d370:	f3bf 8f4f 	dsb	sy
 800d374:	60fb      	str	r3, [r7, #12]
}
 800d376:	bf00      	nop
 800d378:	e7fe      	b.n	800d378 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d37a:	4b07      	ldr	r3, [pc, #28]	; (800d398 <vTaskPlaceOnEventList+0x44>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	3318      	adds	r3, #24
 800d380:	4619      	mov	r1, r3
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	f7ff f816 	bl	800c3b4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d388:	2101      	movs	r1, #1
 800d38a:	6838      	ldr	r0, [r7, #0]
 800d38c:	f000 fa68 	bl	800d860 <prvAddCurrentTaskToDelayedList>
}
 800d390:	bf00      	nop
 800d392:	3710      	adds	r7, #16
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}
 800d398:	20000824 	.word	0x20000824

0800d39c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b086      	sub	sp, #24
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	68db      	ldr	r3, [r3, #12]
 800d3a8:	68db      	ldr	r3, [r3, #12]
 800d3aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d10a      	bne.n	800d3c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b6:	f383 8811 	msr	BASEPRI, r3
 800d3ba:	f3bf 8f6f 	isb	sy
 800d3be:	f3bf 8f4f 	dsb	sy
 800d3c2:	60fb      	str	r3, [r7, #12]
}
 800d3c4:	bf00      	nop
 800d3c6:	e7fe      	b.n	800d3c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d3c8:	693b      	ldr	r3, [r7, #16]
 800d3ca:	3318      	adds	r3, #24
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f7ff f82a 	bl	800c426 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3d2:	4b1d      	ldr	r3, [pc, #116]	; (800d448 <xTaskRemoveFromEventList+0xac>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d11c      	bne.n	800d414 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	3304      	adds	r3, #4
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7ff f821 	bl	800c426 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e8:	2201      	movs	r2, #1
 800d3ea:	409a      	lsls	r2, r3
 800d3ec:	4b17      	ldr	r3, [pc, #92]	; (800d44c <xTaskRemoveFromEventList+0xb0>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	4313      	orrs	r3, r2
 800d3f2:	4a16      	ldr	r2, [pc, #88]	; (800d44c <xTaskRemoveFromEventList+0xb0>)
 800d3f4:	6013      	str	r3, [r2, #0]
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3fa:	4613      	mov	r3, r2
 800d3fc:	009b      	lsls	r3, r3, #2
 800d3fe:	4413      	add	r3, r2
 800d400:	009b      	lsls	r3, r3, #2
 800d402:	4a13      	ldr	r2, [pc, #76]	; (800d450 <xTaskRemoveFromEventList+0xb4>)
 800d404:	441a      	add	r2, r3
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	3304      	adds	r3, #4
 800d40a:	4619      	mov	r1, r3
 800d40c:	4610      	mov	r0, r2
 800d40e:	f7fe ffad 	bl	800c36c <vListInsertEnd>
 800d412:	e005      	b.n	800d420 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	3318      	adds	r3, #24
 800d418:	4619      	mov	r1, r3
 800d41a:	480e      	ldr	r0, [pc, #56]	; (800d454 <xTaskRemoveFromEventList+0xb8>)
 800d41c:	f7fe ffa6 	bl	800c36c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d420:	693b      	ldr	r3, [r7, #16]
 800d422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d424:	4b0c      	ldr	r3, [pc, #48]	; (800d458 <xTaskRemoveFromEventList+0xbc>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d905      	bls.n	800d43a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d42e:	2301      	movs	r3, #1
 800d430:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d432:	4b0a      	ldr	r3, [pc, #40]	; (800d45c <xTaskRemoveFromEventList+0xc0>)
 800d434:	2201      	movs	r2, #1
 800d436:	601a      	str	r2, [r3, #0]
 800d438:	e001      	b.n	800d43e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d43a:	2300      	movs	r3, #0
 800d43c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d43e:	697b      	ldr	r3, [r7, #20]
}
 800d440:	4618      	mov	r0, r3
 800d442:	3718      	adds	r7, #24
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}
 800d448:	2000094c 	.word	0x2000094c
 800d44c:	2000092c 	.word	0x2000092c
 800d450:	20000828 	.word	0x20000828
 800d454:	200008e4 	.word	0x200008e4
 800d458:	20000824 	.word	0x20000824
 800d45c:	20000938 	.word	0x20000938

0800d460 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d460:	b480      	push	{r7}
 800d462:	b083      	sub	sp, #12
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d468:	4b06      	ldr	r3, [pc, #24]	; (800d484 <vTaskInternalSetTimeOutState+0x24>)
 800d46a:	681a      	ldr	r2, [r3, #0]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d470:	4b05      	ldr	r3, [pc, #20]	; (800d488 <vTaskInternalSetTimeOutState+0x28>)
 800d472:	681a      	ldr	r2, [r3, #0]
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	605a      	str	r2, [r3, #4]
}
 800d478:	bf00      	nop
 800d47a:	370c      	adds	r7, #12
 800d47c:	46bd      	mov	sp, r7
 800d47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d482:	4770      	bx	lr
 800d484:	2000093c 	.word	0x2000093c
 800d488:	20000928 	.word	0x20000928

0800d48c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b088      	sub	sp, #32
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
 800d494:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d10a      	bne.n	800d4b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a0:	f383 8811 	msr	BASEPRI, r3
 800d4a4:	f3bf 8f6f 	isb	sy
 800d4a8:	f3bf 8f4f 	dsb	sy
 800d4ac:	613b      	str	r3, [r7, #16]
}
 800d4ae:	bf00      	nop
 800d4b0:	e7fe      	b.n	800d4b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d10a      	bne.n	800d4ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4bc:	f383 8811 	msr	BASEPRI, r3
 800d4c0:	f3bf 8f6f 	isb	sy
 800d4c4:	f3bf 8f4f 	dsb	sy
 800d4c8:	60fb      	str	r3, [r7, #12]
}
 800d4ca:	bf00      	nop
 800d4cc:	e7fe      	b.n	800d4cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d4ce:	f000 fb59 	bl	800db84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d4d2:	4b1d      	ldr	r3, [pc, #116]	; (800d548 <xTaskCheckForTimeOut+0xbc>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	685b      	ldr	r3, [r3, #4]
 800d4dc:	69ba      	ldr	r2, [r7, #24]
 800d4de:	1ad3      	subs	r3, r2, r3
 800d4e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ea:	d102      	bne.n	800d4f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	61fb      	str	r3, [r7, #28]
 800d4f0:	e023      	b.n	800d53a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681a      	ldr	r2, [r3, #0]
 800d4f6:	4b15      	ldr	r3, [pc, #84]	; (800d54c <xTaskCheckForTimeOut+0xc0>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d007      	beq.n	800d50e <xTaskCheckForTimeOut+0x82>
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	685b      	ldr	r3, [r3, #4]
 800d502:	69ba      	ldr	r2, [r7, #24]
 800d504:	429a      	cmp	r2, r3
 800d506:	d302      	bcc.n	800d50e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d508:	2301      	movs	r3, #1
 800d50a:	61fb      	str	r3, [r7, #28]
 800d50c:	e015      	b.n	800d53a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	697a      	ldr	r2, [r7, #20]
 800d514:	429a      	cmp	r2, r3
 800d516:	d20b      	bcs.n	800d530 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	681a      	ldr	r2, [r3, #0]
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	1ad2      	subs	r2, r2, r3
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f7ff ff9b 	bl	800d460 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d52a:	2300      	movs	r3, #0
 800d52c:	61fb      	str	r3, [r7, #28]
 800d52e:	e004      	b.n	800d53a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	2200      	movs	r2, #0
 800d534:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d536:	2301      	movs	r3, #1
 800d538:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d53a:	f000 fb53 	bl	800dbe4 <vPortExitCritical>

	return xReturn;
 800d53e:	69fb      	ldr	r3, [r7, #28]
}
 800d540:	4618      	mov	r0, r3
 800d542:	3720      	adds	r7, #32
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}
 800d548:	20000928 	.word	0x20000928
 800d54c:	2000093c 	.word	0x2000093c

0800d550 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d550:	b480      	push	{r7}
 800d552:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d554:	4b03      	ldr	r3, [pc, #12]	; (800d564 <vTaskMissedYield+0x14>)
 800d556:	2201      	movs	r2, #1
 800d558:	601a      	str	r2, [r3, #0]
}
 800d55a:	bf00      	nop
 800d55c:	46bd      	mov	sp, r7
 800d55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d562:	4770      	bx	lr
 800d564:	20000938 	.word	0x20000938

0800d568 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b082      	sub	sp, #8
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d570:	f000 f854 	bl	800d61c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d574:	4b07      	ldr	r3, [pc, #28]	; (800d594 <prvIdleTask+0x2c>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	2b01      	cmp	r3, #1
 800d57a:	d907      	bls.n	800d58c <prvIdleTask+0x24>
			{
				taskYIELD();
 800d57c:	4b06      	ldr	r3, [pc, #24]	; (800d598 <prvIdleTask+0x30>)
 800d57e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d582:	601a      	str	r2, [r3, #0]
 800d584:	f3bf 8f4f 	dsb	sy
 800d588:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d58c:	f7f3 ff92 	bl	80014b4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d590:	e7ee      	b.n	800d570 <prvIdleTask+0x8>
 800d592:	bf00      	nop
 800d594:	20000828 	.word	0x20000828
 800d598:	e000ed04 	.word	0xe000ed04

0800d59c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	607b      	str	r3, [r7, #4]
 800d5a6:	e00c      	b.n	800d5c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d5a8:	687a      	ldr	r2, [r7, #4]
 800d5aa:	4613      	mov	r3, r2
 800d5ac:	009b      	lsls	r3, r3, #2
 800d5ae:	4413      	add	r3, r2
 800d5b0:	009b      	lsls	r3, r3, #2
 800d5b2:	4a12      	ldr	r2, [pc, #72]	; (800d5fc <prvInitialiseTaskLists+0x60>)
 800d5b4:	4413      	add	r3, r2
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f7fe feab 	bl	800c312 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	3301      	adds	r3, #1
 800d5c0:	607b      	str	r3, [r7, #4]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2b06      	cmp	r3, #6
 800d5c6:	d9ef      	bls.n	800d5a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d5c8:	480d      	ldr	r0, [pc, #52]	; (800d600 <prvInitialiseTaskLists+0x64>)
 800d5ca:	f7fe fea2 	bl	800c312 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d5ce:	480d      	ldr	r0, [pc, #52]	; (800d604 <prvInitialiseTaskLists+0x68>)
 800d5d0:	f7fe fe9f 	bl	800c312 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d5d4:	480c      	ldr	r0, [pc, #48]	; (800d608 <prvInitialiseTaskLists+0x6c>)
 800d5d6:	f7fe fe9c 	bl	800c312 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d5da:	480c      	ldr	r0, [pc, #48]	; (800d60c <prvInitialiseTaskLists+0x70>)
 800d5dc:	f7fe fe99 	bl	800c312 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d5e0:	480b      	ldr	r0, [pc, #44]	; (800d610 <prvInitialiseTaskLists+0x74>)
 800d5e2:	f7fe fe96 	bl	800c312 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d5e6:	4b0b      	ldr	r3, [pc, #44]	; (800d614 <prvInitialiseTaskLists+0x78>)
 800d5e8:	4a05      	ldr	r2, [pc, #20]	; (800d600 <prvInitialiseTaskLists+0x64>)
 800d5ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d5ec:	4b0a      	ldr	r3, [pc, #40]	; (800d618 <prvInitialiseTaskLists+0x7c>)
 800d5ee:	4a05      	ldr	r2, [pc, #20]	; (800d604 <prvInitialiseTaskLists+0x68>)
 800d5f0:	601a      	str	r2, [r3, #0]
}
 800d5f2:	bf00      	nop
 800d5f4:	3708      	adds	r7, #8
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}
 800d5fa:	bf00      	nop
 800d5fc:	20000828 	.word	0x20000828
 800d600:	200008b4 	.word	0x200008b4
 800d604:	200008c8 	.word	0x200008c8
 800d608:	200008e4 	.word	0x200008e4
 800d60c:	200008f8 	.word	0x200008f8
 800d610:	20000910 	.word	0x20000910
 800d614:	200008dc 	.word	0x200008dc
 800d618:	200008e0 	.word	0x200008e0

0800d61c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b082      	sub	sp, #8
 800d620:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d622:	e019      	b.n	800d658 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d624:	f000 faae 	bl	800db84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d628:	4b10      	ldr	r3, [pc, #64]	; (800d66c <prvCheckTasksWaitingTermination+0x50>)
 800d62a:	68db      	ldr	r3, [r3, #12]
 800d62c:	68db      	ldr	r3, [r3, #12]
 800d62e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	3304      	adds	r3, #4
 800d634:	4618      	mov	r0, r3
 800d636:	f7fe fef6 	bl	800c426 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d63a:	4b0d      	ldr	r3, [pc, #52]	; (800d670 <prvCheckTasksWaitingTermination+0x54>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	3b01      	subs	r3, #1
 800d640:	4a0b      	ldr	r2, [pc, #44]	; (800d670 <prvCheckTasksWaitingTermination+0x54>)
 800d642:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d644:	4b0b      	ldr	r3, [pc, #44]	; (800d674 <prvCheckTasksWaitingTermination+0x58>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	3b01      	subs	r3, #1
 800d64a:	4a0a      	ldr	r2, [pc, #40]	; (800d674 <prvCheckTasksWaitingTermination+0x58>)
 800d64c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d64e:	f000 fac9 	bl	800dbe4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f000 f810 	bl	800d678 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d658:	4b06      	ldr	r3, [pc, #24]	; (800d674 <prvCheckTasksWaitingTermination+0x58>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d1e1      	bne.n	800d624 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d660:	bf00      	nop
 800d662:	bf00      	nop
 800d664:	3708      	adds	r7, #8
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}
 800d66a:	bf00      	nop
 800d66c:	200008f8 	.word	0x200008f8
 800d670:	20000924 	.word	0x20000924
 800d674:	2000090c 	.word	0x2000090c

0800d678 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b084      	sub	sp, #16
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d686:	2b00      	cmp	r3, #0
 800d688:	d108      	bne.n	800d69c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d68e:	4618      	mov	r0, r3
 800d690:	f000 fc2a 	bl	800dee8 <vPortFree>
				vPortFree( pxTCB );
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f000 fc27 	bl	800dee8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d69a:	e018      	b.n	800d6ce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	d103      	bne.n	800d6ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f000 fc1e 	bl	800dee8 <vPortFree>
	}
 800d6ac:	e00f      	b.n	800d6ce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d6b4:	2b02      	cmp	r3, #2
 800d6b6:	d00a      	beq.n	800d6ce <prvDeleteTCB+0x56>
	__asm volatile
 800d6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6bc:	f383 8811 	msr	BASEPRI, r3
 800d6c0:	f3bf 8f6f 	isb	sy
 800d6c4:	f3bf 8f4f 	dsb	sy
 800d6c8:	60fb      	str	r3, [r7, #12]
}
 800d6ca:	bf00      	nop
 800d6cc:	e7fe      	b.n	800d6cc <prvDeleteTCB+0x54>
	}
 800d6ce:	bf00      	nop
 800d6d0:	3710      	adds	r7, #16
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}
	...

0800d6d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b083      	sub	sp, #12
 800d6dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d6de:	4b0c      	ldr	r3, [pc, #48]	; (800d710 <prvResetNextTaskUnblockTime+0x38>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d104      	bne.n	800d6f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d6e8:	4b0a      	ldr	r3, [pc, #40]	; (800d714 <prvResetNextTaskUnblockTime+0x3c>)
 800d6ea:	f04f 32ff 	mov.w	r2, #4294967295
 800d6ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d6f0:	e008      	b.n	800d704 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6f2:	4b07      	ldr	r3, [pc, #28]	; (800d710 <prvResetNextTaskUnblockTime+0x38>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	68db      	ldr	r3, [r3, #12]
 800d6f8:	68db      	ldr	r3, [r3, #12]
 800d6fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	685b      	ldr	r3, [r3, #4]
 800d700:	4a04      	ldr	r2, [pc, #16]	; (800d714 <prvResetNextTaskUnblockTime+0x3c>)
 800d702:	6013      	str	r3, [r2, #0]
}
 800d704:	bf00      	nop
 800d706:	370c      	adds	r7, #12
 800d708:	46bd      	mov	sp, r7
 800d70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70e:	4770      	bx	lr
 800d710:	200008dc 	.word	0x200008dc
 800d714:	20000944 	.word	0x20000944

0800d718 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d718:	b480      	push	{r7}
 800d71a:	b083      	sub	sp, #12
 800d71c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d71e:	4b0b      	ldr	r3, [pc, #44]	; (800d74c <xTaskGetSchedulerState+0x34>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d102      	bne.n	800d72c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d726:	2301      	movs	r3, #1
 800d728:	607b      	str	r3, [r7, #4]
 800d72a:	e008      	b.n	800d73e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d72c:	4b08      	ldr	r3, [pc, #32]	; (800d750 <xTaskGetSchedulerState+0x38>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d102      	bne.n	800d73a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d734:	2302      	movs	r3, #2
 800d736:	607b      	str	r3, [r7, #4]
 800d738:	e001      	b.n	800d73e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d73a:	2300      	movs	r3, #0
 800d73c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d73e:	687b      	ldr	r3, [r7, #4]
	}
 800d740:	4618      	mov	r0, r3
 800d742:	370c      	adds	r7, #12
 800d744:	46bd      	mov	sp, r7
 800d746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74a:	4770      	bx	lr
 800d74c:	20000930 	.word	0x20000930
 800d750:	2000094c 	.word	0x2000094c

0800d754 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d754:	b580      	push	{r7, lr}
 800d756:	b086      	sub	sp, #24
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d760:	2300      	movs	r3, #0
 800d762:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d06e      	beq.n	800d848 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d76a:	4b3a      	ldr	r3, [pc, #232]	; (800d854 <xTaskPriorityDisinherit+0x100>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	693a      	ldr	r2, [r7, #16]
 800d770:	429a      	cmp	r2, r3
 800d772:	d00a      	beq.n	800d78a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d778:	f383 8811 	msr	BASEPRI, r3
 800d77c:	f3bf 8f6f 	isb	sy
 800d780:	f3bf 8f4f 	dsb	sy
 800d784:	60fb      	str	r3, [r7, #12]
}
 800d786:	bf00      	nop
 800d788:	e7fe      	b.n	800d788 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d10a      	bne.n	800d7a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d796:	f383 8811 	msr	BASEPRI, r3
 800d79a:	f3bf 8f6f 	isb	sy
 800d79e:	f3bf 8f4f 	dsb	sy
 800d7a2:	60bb      	str	r3, [r7, #8]
}
 800d7a4:	bf00      	nop
 800d7a6:	e7fe      	b.n	800d7a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d7ac:	1e5a      	subs	r2, r3, #1
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d044      	beq.n	800d848 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d140      	bne.n	800d848 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	3304      	adds	r3, #4
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f7fe fe2b 	bl	800c426 <uxListRemove>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d115      	bne.n	800d802 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d7d6:	693b      	ldr	r3, [r7, #16]
 800d7d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7da:	491f      	ldr	r1, [pc, #124]	; (800d858 <xTaskPriorityDisinherit+0x104>)
 800d7dc:	4613      	mov	r3, r2
 800d7de:	009b      	lsls	r3, r3, #2
 800d7e0:	4413      	add	r3, r2
 800d7e2:	009b      	lsls	r3, r3, #2
 800d7e4:	440b      	add	r3, r1
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d10a      	bne.n	800d802 <xTaskPriorityDisinherit+0xae>
 800d7ec:	693b      	ldr	r3, [r7, #16]
 800d7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f0:	2201      	movs	r2, #1
 800d7f2:	fa02 f303 	lsl.w	r3, r2, r3
 800d7f6:	43da      	mvns	r2, r3
 800d7f8:	4b18      	ldr	r3, [pc, #96]	; (800d85c <xTaskPriorityDisinherit+0x108>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	4013      	ands	r3, r2
 800d7fe:	4a17      	ldr	r2, [pc, #92]	; (800d85c <xTaskPriorityDisinherit+0x108>)
 800d800:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d80a:	693b      	ldr	r3, [r7, #16]
 800d80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d80e:	f1c3 0207 	rsb	r2, r3, #7
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d81a:	2201      	movs	r2, #1
 800d81c:	409a      	lsls	r2, r3
 800d81e:	4b0f      	ldr	r3, [pc, #60]	; (800d85c <xTaskPriorityDisinherit+0x108>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	4313      	orrs	r3, r2
 800d824:	4a0d      	ldr	r2, [pc, #52]	; (800d85c <xTaskPriorityDisinherit+0x108>)
 800d826:	6013      	str	r3, [r2, #0]
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d82c:	4613      	mov	r3, r2
 800d82e:	009b      	lsls	r3, r3, #2
 800d830:	4413      	add	r3, r2
 800d832:	009b      	lsls	r3, r3, #2
 800d834:	4a08      	ldr	r2, [pc, #32]	; (800d858 <xTaskPriorityDisinherit+0x104>)
 800d836:	441a      	add	r2, r3
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	3304      	adds	r3, #4
 800d83c:	4619      	mov	r1, r3
 800d83e:	4610      	mov	r0, r2
 800d840:	f7fe fd94 	bl	800c36c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d844:	2301      	movs	r3, #1
 800d846:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d848:	697b      	ldr	r3, [r7, #20]
	}
 800d84a:	4618      	mov	r0, r3
 800d84c:	3718      	adds	r7, #24
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}
 800d852:	bf00      	nop
 800d854:	20000824 	.word	0x20000824
 800d858:	20000828 	.word	0x20000828
 800d85c:	2000092c 	.word	0x2000092c

0800d860 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b084      	sub	sp, #16
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d86a:	4b29      	ldr	r3, [pc, #164]	; (800d910 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d870:	4b28      	ldr	r3, [pc, #160]	; (800d914 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	3304      	adds	r3, #4
 800d876:	4618      	mov	r0, r3
 800d878:	f7fe fdd5 	bl	800c426 <uxListRemove>
 800d87c:	4603      	mov	r3, r0
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d10b      	bne.n	800d89a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d882:	4b24      	ldr	r3, [pc, #144]	; (800d914 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d888:	2201      	movs	r2, #1
 800d88a:	fa02 f303 	lsl.w	r3, r2, r3
 800d88e:	43da      	mvns	r2, r3
 800d890:	4b21      	ldr	r3, [pc, #132]	; (800d918 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4013      	ands	r3, r2
 800d896:	4a20      	ldr	r2, [pc, #128]	; (800d918 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d898:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8a0:	d10a      	bne.n	800d8b8 <prvAddCurrentTaskToDelayedList+0x58>
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d007      	beq.n	800d8b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d8a8:	4b1a      	ldr	r3, [pc, #104]	; (800d914 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	3304      	adds	r3, #4
 800d8ae:	4619      	mov	r1, r3
 800d8b0:	481a      	ldr	r0, [pc, #104]	; (800d91c <prvAddCurrentTaskToDelayedList+0xbc>)
 800d8b2:	f7fe fd5b 	bl	800c36c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d8b6:	e026      	b.n	800d906 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d8b8:	68fa      	ldr	r2, [r7, #12]
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	4413      	add	r3, r2
 800d8be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d8c0:	4b14      	ldr	r3, [pc, #80]	; (800d914 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	68ba      	ldr	r2, [r7, #8]
 800d8c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d8c8:	68ba      	ldr	r2, [r7, #8]
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	d209      	bcs.n	800d8e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d8d0:	4b13      	ldr	r3, [pc, #76]	; (800d920 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d8d2:	681a      	ldr	r2, [r3, #0]
 800d8d4:	4b0f      	ldr	r3, [pc, #60]	; (800d914 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	3304      	adds	r3, #4
 800d8da:	4619      	mov	r1, r3
 800d8dc:	4610      	mov	r0, r2
 800d8de:	f7fe fd69 	bl	800c3b4 <vListInsert>
}
 800d8e2:	e010      	b.n	800d906 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d8e4:	4b0f      	ldr	r3, [pc, #60]	; (800d924 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d8e6:	681a      	ldr	r2, [r3, #0]
 800d8e8:	4b0a      	ldr	r3, [pc, #40]	; (800d914 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	3304      	adds	r3, #4
 800d8ee:	4619      	mov	r1, r3
 800d8f0:	4610      	mov	r0, r2
 800d8f2:	f7fe fd5f 	bl	800c3b4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d8f6:	4b0c      	ldr	r3, [pc, #48]	; (800d928 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	68ba      	ldr	r2, [r7, #8]
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d202      	bcs.n	800d906 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d900:	4a09      	ldr	r2, [pc, #36]	; (800d928 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	6013      	str	r3, [r2, #0]
}
 800d906:	bf00      	nop
 800d908:	3710      	adds	r7, #16
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}
 800d90e:	bf00      	nop
 800d910:	20000928 	.word	0x20000928
 800d914:	20000824 	.word	0x20000824
 800d918:	2000092c 	.word	0x2000092c
 800d91c:	20000910 	.word	0x20000910
 800d920:	200008e0 	.word	0x200008e0
 800d924:	200008dc 	.word	0x200008dc
 800d928:	20000944 	.word	0x20000944

0800d92c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d92c:	b480      	push	{r7}
 800d92e:	b085      	sub	sp, #20
 800d930:	af00      	add	r7, sp, #0
 800d932:	60f8      	str	r0, [r7, #12]
 800d934:	60b9      	str	r1, [r7, #8]
 800d936:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	3b04      	subs	r3, #4
 800d93c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d944:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	3b04      	subs	r3, #4
 800d94a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	f023 0201 	bic.w	r2, r3, #1
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	3b04      	subs	r3, #4
 800d95a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d95c:	4a0c      	ldr	r2, [pc, #48]	; (800d990 <pxPortInitialiseStack+0x64>)
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	3b14      	subs	r3, #20
 800d966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d968:	687a      	ldr	r2, [r7, #4]
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	3b04      	subs	r3, #4
 800d972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	f06f 0202 	mvn.w	r2, #2
 800d97a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	3b20      	subs	r3, #32
 800d980:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d982:	68fb      	ldr	r3, [r7, #12]
}
 800d984:	4618      	mov	r0, r3
 800d986:	3714      	adds	r7, #20
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr
 800d990:	0800d995 	.word	0x0800d995

0800d994 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d994:	b480      	push	{r7}
 800d996:	b085      	sub	sp, #20
 800d998:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d99a:	2300      	movs	r3, #0
 800d99c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d99e:	4b12      	ldr	r3, [pc, #72]	; (800d9e8 <prvTaskExitError+0x54>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9a6:	d00a      	beq.n	800d9be <prvTaskExitError+0x2a>
	__asm volatile
 800d9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ac:	f383 8811 	msr	BASEPRI, r3
 800d9b0:	f3bf 8f6f 	isb	sy
 800d9b4:	f3bf 8f4f 	dsb	sy
 800d9b8:	60fb      	str	r3, [r7, #12]
}
 800d9ba:	bf00      	nop
 800d9bc:	e7fe      	b.n	800d9bc <prvTaskExitError+0x28>
	__asm volatile
 800d9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c2:	f383 8811 	msr	BASEPRI, r3
 800d9c6:	f3bf 8f6f 	isb	sy
 800d9ca:	f3bf 8f4f 	dsb	sy
 800d9ce:	60bb      	str	r3, [r7, #8]
}
 800d9d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d9d2:	bf00      	nop
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d0fc      	beq.n	800d9d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d9da:	bf00      	nop
 800d9dc:	bf00      	nop
 800d9de:	3714      	adds	r7, #20
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e6:	4770      	bx	lr
 800d9e8:	200000e0 	.word	0x200000e0
 800d9ec:	00000000 	.word	0x00000000

0800d9f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d9f0:	4b07      	ldr	r3, [pc, #28]	; (800da10 <pxCurrentTCBConst2>)
 800d9f2:	6819      	ldr	r1, [r3, #0]
 800d9f4:	6808      	ldr	r0, [r1, #0]
 800d9f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9fa:	f380 8809 	msr	PSP, r0
 800d9fe:	f3bf 8f6f 	isb	sy
 800da02:	f04f 0000 	mov.w	r0, #0
 800da06:	f380 8811 	msr	BASEPRI, r0
 800da0a:	4770      	bx	lr
 800da0c:	f3af 8000 	nop.w

0800da10 <pxCurrentTCBConst2>:
 800da10:	20000824 	.word	0x20000824
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800da14:	bf00      	nop
 800da16:	bf00      	nop

0800da18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800da18:	4808      	ldr	r0, [pc, #32]	; (800da3c <prvPortStartFirstTask+0x24>)
 800da1a:	6800      	ldr	r0, [r0, #0]
 800da1c:	6800      	ldr	r0, [r0, #0]
 800da1e:	f380 8808 	msr	MSP, r0
 800da22:	f04f 0000 	mov.w	r0, #0
 800da26:	f380 8814 	msr	CONTROL, r0
 800da2a:	b662      	cpsie	i
 800da2c:	b661      	cpsie	f
 800da2e:	f3bf 8f4f 	dsb	sy
 800da32:	f3bf 8f6f 	isb	sy
 800da36:	df00      	svc	0
 800da38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800da3a:	bf00      	nop
 800da3c:	e000ed08 	.word	0xe000ed08

0800da40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b086      	sub	sp, #24
 800da44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800da46:	4b46      	ldr	r3, [pc, #280]	; (800db60 <xPortStartScheduler+0x120>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	4a46      	ldr	r2, [pc, #280]	; (800db64 <xPortStartScheduler+0x124>)
 800da4c:	4293      	cmp	r3, r2
 800da4e:	d10a      	bne.n	800da66 <xPortStartScheduler+0x26>
	__asm volatile
 800da50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da54:	f383 8811 	msr	BASEPRI, r3
 800da58:	f3bf 8f6f 	isb	sy
 800da5c:	f3bf 8f4f 	dsb	sy
 800da60:	613b      	str	r3, [r7, #16]
}
 800da62:	bf00      	nop
 800da64:	e7fe      	b.n	800da64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800da66:	4b3e      	ldr	r3, [pc, #248]	; (800db60 <xPortStartScheduler+0x120>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	4a3f      	ldr	r2, [pc, #252]	; (800db68 <xPortStartScheduler+0x128>)
 800da6c:	4293      	cmp	r3, r2
 800da6e:	d10a      	bne.n	800da86 <xPortStartScheduler+0x46>
	__asm volatile
 800da70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da74:	f383 8811 	msr	BASEPRI, r3
 800da78:	f3bf 8f6f 	isb	sy
 800da7c:	f3bf 8f4f 	dsb	sy
 800da80:	60fb      	str	r3, [r7, #12]
}
 800da82:	bf00      	nop
 800da84:	e7fe      	b.n	800da84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800da86:	4b39      	ldr	r3, [pc, #228]	; (800db6c <xPortStartScheduler+0x12c>)
 800da88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800da8a:	697b      	ldr	r3, [r7, #20]
 800da8c:	781b      	ldrb	r3, [r3, #0]
 800da8e:	b2db      	uxtb	r3, r3
 800da90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	22ff      	movs	r2, #255	; 0xff
 800da96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	b2db      	uxtb	r3, r3
 800da9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800daa0:	78fb      	ldrb	r3, [r7, #3]
 800daa2:	b2db      	uxtb	r3, r3
 800daa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800daa8:	b2da      	uxtb	r2, r3
 800daaa:	4b31      	ldr	r3, [pc, #196]	; (800db70 <xPortStartScheduler+0x130>)
 800daac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800daae:	4b31      	ldr	r3, [pc, #196]	; (800db74 <xPortStartScheduler+0x134>)
 800dab0:	2207      	movs	r2, #7
 800dab2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dab4:	e009      	b.n	800daca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800dab6:	4b2f      	ldr	r3, [pc, #188]	; (800db74 <xPortStartScheduler+0x134>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	3b01      	subs	r3, #1
 800dabc:	4a2d      	ldr	r2, [pc, #180]	; (800db74 <xPortStartScheduler+0x134>)
 800dabe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dac0:	78fb      	ldrb	r3, [r7, #3]
 800dac2:	b2db      	uxtb	r3, r3
 800dac4:	005b      	lsls	r3, r3, #1
 800dac6:	b2db      	uxtb	r3, r3
 800dac8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800daca:	78fb      	ldrb	r3, [r7, #3]
 800dacc:	b2db      	uxtb	r3, r3
 800dace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dad2:	2b80      	cmp	r3, #128	; 0x80
 800dad4:	d0ef      	beq.n	800dab6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dad6:	4b27      	ldr	r3, [pc, #156]	; (800db74 <xPortStartScheduler+0x134>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	f1c3 0307 	rsb	r3, r3, #7
 800dade:	2b04      	cmp	r3, #4
 800dae0:	d00a      	beq.n	800daf8 <xPortStartScheduler+0xb8>
	__asm volatile
 800dae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae6:	f383 8811 	msr	BASEPRI, r3
 800daea:	f3bf 8f6f 	isb	sy
 800daee:	f3bf 8f4f 	dsb	sy
 800daf2:	60bb      	str	r3, [r7, #8]
}
 800daf4:	bf00      	nop
 800daf6:	e7fe      	b.n	800daf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800daf8:	4b1e      	ldr	r3, [pc, #120]	; (800db74 <xPortStartScheduler+0x134>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	021b      	lsls	r3, r3, #8
 800dafe:	4a1d      	ldr	r2, [pc, #116]	; (800db74 <xPortStartScheduler+0x134>)
 800db00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800db02:	4b1c      	ldr	r3, [pc, #112]	; (800db74 <xPortStartScheduler+0x134>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800db0a:	4a1a      	ldr	r2, [pc, #104]	; (800db74 <xPortStartScheduler+0x134>)
 800db0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	b2da      	uxtb	r2, r3
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800db16:	4b18      	ldr	r3, [pc, #96]	; (800db78 <xPortStartScheduler+0x138>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	4a17      	ldr	r2, [pc, #92]	; (800db78 <xPortStartScheduler+0x138>)
 800db1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800db20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800db22:	4b15      	ldr	r3, [pc, #84]	; (800db78 <xPortStartScheduler+0x138>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	4a14      	ldr	r2, [pc, #80]	; (800db78 <xPortStartScheduler+0x138>)
 800db28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800db2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800db2e:	f000 f8dd 	bl	800dcec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800db32:	4b12      	ldr	r3, [pc, #72]	; (800db7c <xPortStartScheduler+0x13c>)
 800db34:	2200      	movs	r2, #0
 800db36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800db38:	f000 f8fc 	bl	800dd34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800db3c:	4b10      	ldr	r3, [pc, #64]	; (800db80 <xPortStartScheduler+0x140>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	4a0f      	ldr	r2, [pc, #60]	; (800db80 <xPortStartScheduler+0x140>)
 800db42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800db46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800db48:	f7ff ff66 	bl	800da18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800db4c:	f7ff fb82 	bl	800d254 <vTaskSwitchContext>
	prvTaskExitError();
 800db50:	f7ff ff20 	bl	800d994 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800db54:	2300      	movs	r3, #0
}
 800db56:	4618      	mov	r0, r3
 800db58:	3718      	adds	r7, #24
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}
 800db5e:	bf00      	nop
 800db60:	e000ed00 	.word	0xe000ed00
 800db64:	410fc271 	.word	0x410fc271
 800db68:	410fc270 	.word	0x410fc270
 800db6c:	e000e400 	.word	0xe000e400
 800db70:	20000950 	.word	0x20000950
 800db74:	20000954 	.word	0x20000954
 800db78:	e000ed20 	.word	0xe000ed20
 800db7c:	200000e0 	.word	0x200000e0
 800db80:	e000ef34 	.word	0xe000ef34

0800db84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800db84:	b480      	push	{r7}
 800db86:	b083      	sub	sp, #12
 800db88:	af00      	add	r7, sp, #0
	__asm volatile
 800db8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db8e:	f383 8811 	msr	BASEPRI, r3
 800db92:	f3bf 8f6f 	isb	sy
 800db96:	f3bf 8f4f 	dsb	sy
 800db9a:	607b      	str	r3, [r7, #4]
}
 800db9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800db9e:	4b0f      	ldr	r3, [pc, #60]	; (800dbdc <vPortEnterCritical+0x58>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	3301      	adds	r3, #1
 800dba4:	4a0d      	ldr	r2, [pc, #52]	; (800dbdc <vPortEnterCritical+0x58>)
 800dba6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dba8:	4b0c      	ldr	r3, [pc, #48]	; (800dbdc <vPortEnterCritical+0x58>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	2b01      	cmp	r3, #1
 800dbae:	d10f      	bne.n	800dbd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dbb0:	4b0b      	ldr	r3, [pc, #44]	; (800dbe0 <vPortEnterCritical+0x5c>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	b2db      	uxtb	r3, r3
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d00a      	beq.n	800dbd0 <vPortEnterCritical+0x4c>
	__asm volatile
 800dbba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbbe:	f383 8811 	msr	BASEPRI, r3
 800dbc2:	f3bf 8f6f 	isb	sy
 800dbc6:	f3bf 8f4f 	dsb	sy
 800dbca:	603b      	str	r3, [r7, #0]
}
 800dbcc:	bf00      	nop
 800dbce:	e7fe      	b.n	800dbce <vPortEnterCritical+0x4a>
	}
}
 800dbd0:	bf00      	nop
 800dbd2:	370c      	adds	r7, #12
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbda:	4770      	bx	lr
 800dbdc:	200000e0 	.word	0x200000e0
 800dbe0:	e000ed04 	.word	0xe000ed04

0800dbe4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b083      	sub	sp, #12
 800dbe8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dbea:	4b12      	ldr	r3, [pc, #72]	; (800dc34 <vPortExitCritical+0x50>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d10a      	bne.n	800dc08 <vPortExitCritical+0x24>
	__asm volatile
 800dbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbf6:	f383 8811 	msr	BASEPRI, r3
 800dbfa:	f3bf 8f6f 	isb	sy
 800dbfe:	f3bf 8f4f 	dsb	sy
 800dc02:	607b      	str	r3, [r7, #4]
}
 800dc04:	bf00      	nop
 800dc06:	e7fe      	b.n	800dc06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dc08:	4b0a      	ldr	r3, [pc, #40]	; (800dc34 <vPortExitCritical+0x50>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	3b01      	subs	r3, #1
 800dc0e:	4a09      	ldr	r2, [pc, #36]	; (800dc34 <vPortExitCritical+0x50>)
 800dc10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dc12:	4b08      	ldr	r3, [pc, #32]	; (800dc34 <vPortExitCritical+0x50>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d105      	bne.n	800dc26 <vPortExitCritical+0x42>
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dc24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dc26:	bf00      	nop
 800dc28:	370c      	adds	r7, #12
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc30:	4770      	bx	lr
 800dc32:	bf00      	nop
 800dc34:	200000e0 	.word	0x200000e0
	...

0800dc40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dc40:	f3ef 8009 	mrs	r0, PSP
 800dc44:	f3bf 8f6f 	isb	sy
 800dc48:	4b15      	ldr	r3, [pc, #84]	; (800dca0 <pxCurrentTCBConst>)
 800dc4a:	681a      	ldr	r2, [r3, #0]
 800dc4c:	f01e 0f10 	tst.w	lr, #16
 800dc50:	bf08      	it	eq
 800dc52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dc56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc5a:	6010      	str	r0, [r2, #0]
 800dc5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dc60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dc64:	f380 8811 	msr	BASEPRI, r0
 800dc68:	f3bf 8f4f 	dsb	sy
 800dc6c:	f3bf 8f6f 	isb	sy
 800dc70:	f7ff faf0 	bl	800d254 <vTaskSwitchContext>
 800dc74:	f04f 0000 	mov.w	r0, #0
 800dc78:	f380 8811 	msr	BASEPRI, r0
 800dc7c:	bc09      	pop	{r0, r3}
 800dc7e:	6819      	ldr	r1, [r3, #0]
 800dc80:	6808      	ldr	r0, [r1, #0]
 800dc82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc86:	f01e 0f10 	tst.w	lr, #16
 800dc8a:	bf08      	it	eq
 800dc8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dc90:	f380 8809 	msr	PSP, r0
 800dc94:	f3bf 8f6f 	isb	sy
 800dc98:	4770      	bx	lr
 800dc9a:	bf00      	nop
 800dc9c:	f3af 8000 	nop.w

0800dca0 <pxCurrentTCBConst>:
 800dca0:	20000824 	.word	0x20000824
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dca4:	bf00      	nop
 800dca6:	bf00      	nop

0800dca8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b082      	sub	sp, #8
 800dcac:	af00      	add	r7, sp, #0
	__asm volatile
 800dcae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb2:	f383 8811 	msr	BASEPRI, r3
 800dcb6:	f3bf 8f6f 	isb	sy
 800dcba:	f3bf 8f4f 	dsb	sy
 800dcbe:	607b      	str	r3, [r7, #4]
}
 800dcc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dcc2:	f7ff fa0f 	bl	800d0e4 <xTaskIncrementTick>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d003      	beq.n	800dcd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dccc:	4b06      	ldr	r3, [pc, #24]	; (800dce8 <SysTick_Handler+0x40>)
 800dcce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcd2:	601a      	str	r2, [r3, #0]
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	f383 8811 	msr	BASEPRI, r3
}
 800dcde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dce0:	bf00      	nop
 800dce2:	3708      	adds	r7, #8
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}
 800dce8:	e000ed04 	.word	0xe000ed04

0800dcec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dcec:	b480      	push	{r7}
 800dcee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dcf0:	4b0b      	ldr	r3, [pc, #44]	; (800dd20 <vPortSetupTimerInterrupt+0x34>)
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dcf6:	4b0b      	ldr	r3, [pc, #44]	; (800dd24 <vPortSetupTimerInterrupt+0x38>)
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dcfc:	4b0a      	ldr	r3, [pc, #40]	; (800dd28 <vPortSetupTimerInterrupt+0x3c>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	4a0a      	ldr	r2, [pc, #40]	; (800dd2c <vPortSetupTimerInterrupt+0x40>)
 800dd02:	fba2 2303 	umull	r2, r3, r2, r3
 800dd06:	099b      	lsrs	r3, r3, #6
 800dd08:	4a09      	ldr	r2, [pc, #36]	; (800dd30 <vPortSetupTimerInterrupt+0x44>)
 800dd0a:	3b01      	subs	r3, #1
 800dd0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dd0e:	4b04      	ldr	r3, [pc, #16]	; (800dd20 <vPortSetupTimerInterrupt+0x34>)
 800dd10:	2207      	movs	r2, #7
 800dd12:	601a      	str	r2, [r3, #0]
}
 800dd14:	bf00      	nop
 800dd16:	46bd      	mov	sp, r7
 800dd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1c:	4770      	bx	lr
 800dd1e:	bf00      	nop
 800dd20:	e000e010 	.word	0xe000e010
 800dd24:	e000e018 	.word	0xe000e018
 800dd28:	20000000 	.word	0x20000000
 800dd2c:	10624dd3 	.word	0x10624dd3
 800dd30:	e000e014 	.word	0xe000e014

0800dd34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dd34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dd44 <vPortEnableVFP+0x10>
 800dd38:	6801      	ldr	r1, [r0, #0]
 800dd3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dd3e:	6001      	str	r1, [r0, #0]
 800dd40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dd42:	bf00      	nop
 800dd44:	e000ed88 	.word	0xe000ed88

0800dd48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b08a      	sub	sp, #40	; 0x28
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dd50:	2300      	movs	r3, #0
 800dd52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dd54:	f7ff f91c 	bl	800cf90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dd58:	4b5d      	ldr	r3, [pc, #372]	; (800ded0 <pvPortMalloc+0x188>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d101      	bne.n	800dd64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dd60:	f000 f924 	bl	800dfac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dd64:	4b5b      	ldr	r3, [pc, #364]	; (800ded4 <pvPortMalloc+0x18c>)
 800dd66:	681a      	ldr	r2, [r3, #0]
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	4013      	ands	r3, r2
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	f040 8093 	bne.w	800de98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d01d      	beq.n	800ddb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800dd78:	2208      	movs	r2, #8
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	4413      	add	r3, r2
 800dd7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f003 0307 	and.w	r3, r3, #7
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d014      	beq.n	800ddb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f023 0307 	bic.w	r3, r3, #7
 800dd90:	3308      	adds	r3, #8
 800dd92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f003 0307 	and.w	r3, r3, #7
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d00a      	beq.n	800ddb4 <pvPortMalloc+0x6c>
	__asm volatile
 800dd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda2:	f383 8811 	msr	BASEPRI, r3
 800dda6:	f3bf 8f6f 	isb	sy
 800ddaa:	f3bf 8f4f 	dsb	sy
 800ddae:	617b      	str	r3, [r7, #20]
}
 800ddb0:	bf00      	nop
 800ddb2:	e7fe      	b.n	800ddb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d06e      	beq.n	800de98 <pvPortMalloc+0x150>
 800ddba:	4b47      	ldr	r3, [pc, #284]	; (800ded8 <pvPortMalloc+0x190>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	687a      	ldr	r2, [r7, #4]
 800ddc0:	429a      	cmp	r2, r3
 800ddc2:	d869      	bhi.n	800de98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ddc4:	4b45      	ldr	r3, [pc, #276]	; (800dedc <pvPortMalloc+0x194>)
 800ddc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ddc8:	4b44      	ldr	r3, [pc, #272]	; (800dedc <pvPortMalloc+0x194>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ddce:	e004      	b.n	800ddda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ddd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ddd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ddda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dddc:	685b      	ldr	r3, [r3, #4]
 800ddde:	687a      	ldr	r2, [r7, #4]
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d903      	bls.n	800ddec <pvPortMalloc+0xa4>
 800dde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d1f1      	bne.n	800ddd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ddec:	4b38      	ldr	r3, [pc, #224]	; (800ded0 <pvPortMalloc+0x188>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddf2:	429a      	cmp	r2, r3
 800ddf4:	d050      	beq.n	800de98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ddf6:	6a3b      	ldr	r3, [r7, #32]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	2208      	movs	r2, #8
 800ddfc:	4413      	add	r3, r2
 800ddfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800de00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de02:	681a      	ldr	r2, [r3, #0]
 800de04:	6a3b      	ldr	r3, [r7, #32]
 800de06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800de08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de0a:	685a      	ldr	r2, [r3, #4]
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	1ad2      	subs	r2, r2, r3
 800de10:	2308      	movs	r3, #8
 800de12:	005b      	lsls	r3, r3, #1
 800de14:	429a      	cmp	r2, r3
 800de16:	d91f      	bls.n	800de58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800de18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	4413      	add	r3, r2
 800de1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800de20:	69bb      	ldr	r3, [r7, #24]
 800de22:	f003 0307 	and.w	r3, r3, #7
 800de26:	2b00      	cmp	r3, #0
 800de28:	d00a      	beq.n	800de40 <pvPortMalloc+0xf8>
	__asm volatile
 800de2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de2e:	f383 8811 	msr	BASEPRI, r3
 800de32:	f3bf 8f6f 	isb	sy
 800de36:	f3bf 8f4f 	dsb	sy
 800de3a:	613b      	str	r3, [r7, #16]
}
 800de3c:	bf00      	nop
 800de3e:	e7fe      	b.n	800de3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800de40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de42:	685a      	ldr	r2, [r3, #4]
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	1ad2      	subs	r2, r2, r3
 800de48:	69bb      	ldr	r3, [r7, #24]
 800de4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800de4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de4e:	687a      	ldr	r2, [r7, #4]
 800de50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800de52:	69b8      	ldr	r0, [r7, #24]
 800de54:	f000 f90c 	bl	800e070 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800de58:	4b1f      	ldr	r3, [pc, #124]	; (800ded8 <pvPortMalloc+0x190>)
 800de5a:	681a      	ldr	r2, [r3, #0]
 800de5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de5e:	685b      	ldr	r3, [r3, #4]
 800de60:	1ad3      	subs	r3, r2, r3
 800de62:	4a1d      	ldr	r2, [pc, #116]	; (800ded8 <pvPortMalloc+0x190>)
 800de64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800de66:	4b1c      	ldr	r3, [pc, #112]	; (800ded8 <pvPortMalloc+0x190>)
 800de68:	681a      	ldr	r2, [r3, #0]
 800de6a:	4b1d      	ldr	r3, [pc, #116]	; (800dee0 <pvPortMalloc+0x198>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	429a      	cmp	r2, r3
 800de70:	d203      	bcs.n	800de7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800de72:	4b19      	ldr	r3, [pc, #100]	; (800ded8 <pvPortMalloc+0x190>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	4a1a      	ldr	r2, [pc, #104]	; (800dee0 <pvPortMalloc+0x198>)
 800de78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800de7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de7c:	685a      	ldr	r2, [r3, #4]
 800de7e:	4b15      	ldr	r3, [pc, #84]	; (800ded4 <pvPortMalloc+0x18c>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	431a      	orrs	r2, r3
 800de84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800de88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de8a:	2200      	movs	r2, #0
 800de8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800de8e:	4b15      	ldr	r3, [pc, #84]	; (800dee4 <pvPortMalloc+0x19c>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	3301      	adds	r3, #1
 800de94:	4a13      	ldr	r2, [pc, #76]	; (800dee4 <pvPortMalloc+0x19c>)
 800de96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800de98:	f7ff f888 	bl	800cfac <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800de9c:	69fb      	ldr	r3, [r7, #28]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d101      	bne.n	800dea6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800dea2:	f7f3 fb19 	bl	80014d8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dea6:	69fb      	ldr	r3, [r7, #28]
 800dea8:	f003 0307 	and.w	r3, r3, #7
 800deac:	2b00      	cmp	r3, #0
 800deae:	d00a      	beq.n	800dec6 <pvPortMalloc+0x17e>
	__asm volatile
 800deb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deb4:	f383 8811 	msr	BASEPRI, r3
 800deb8:	f3bf 8f6f 	isb	sy
 800debc:	f3bf 8f4f 	dsb	sy
 800dec0:	60fb      	str	r3, [r7, #12]
}
 800dec2:	bf00      	nop
 800dec4:	e7fe      	b.n	800dec4 <pvPortMalloc+0x17c>
	return pvReturn;
 800dec6:	69fb      	ldr	r3, [r7, #28]
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3728      	adds	r7, #40	; 0x28
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	20008960 	.word	0x20008960
 800ded4:	20008974 	.word	0x20008974
 800ded8:	20008964 	.word	0x20008964
 800dedc:	20008958 	.word	0x20008958
 800dee0:	20008968 	.word	0x20008968
 800dee4:	2000896c 	.word	0x2000896c

0800dee8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b086      	sub	sp, #24
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d04d      	beq.n	800df96 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800defa:	2308      	movs	r3, #8
 800defc:	425b      	negs	r3, r3
 800defe:	697a      	ldr	r2, [r7, #20]
 800df00:	4413      	add	r3, r2
 800df02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800df08:	693b      	ldr	r3, [r7, #16]
 800df0a:	685a      	ldr	r2, [r3, #4]
 800df0c:	4b24      	ldr	r3, [pc, #144]	; (800dfa0 <vPortFree+0xb8>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4013      	ands	r3, r2
 800df12:	2b00      	cmp	r3, #0
 800df14:	d10a      	bne.n	800df2c <vPortFree+0x44>
	__asm volatile
 800df16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df1a:	f383 8811 	msr	BASEPRI, r3
 800df1e:	f3bf 8f6f 	isb	sy
 800df22:	f3bf 8f4f 	dsb	sy
 800df26:	60fb      	str	r3, [r7, #12]
}
 800df28:	bf00      	nop
 800df2a:	e7fe      	b.n	800df2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800df2c:	693b      	ldr	r3, [r7, #16]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d00a      	beq.n	800df4a <vPortFree+0x62>
	__asm volatile
 800df34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df38:	f383 8811 	msr	BASEPRI, r3
 800df3c:	f3bf 8f6f 	isb	sy
 800df40:	f3bf 8f4f 	dsb	sy
 800df44:	60bb      	str	r3, [r7, #8]
}
 800df46:	bf00      	nop
 800df48:	e7fe      	b.n	800df48 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800df4a:	693b      	ldr	r3, [r7, #16]
 800df4c:	685a      	ldr	r2, [r3, #4]
 800df4e:	4b14      	ldr	r3, [pc, #80]	; (800dfa0 <vPortFree+0xb8>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	4013      	ands	r3, r2
 800df54:	2b00      	cmp	r3, #0
 800df56:	d01e      	beq.n	800df96 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800df58:	693b      	ldr	r3, [r7, #16]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d11a      	bne.n	800df96 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800df60:	693b      	ldr	r3, [r7, #16]
 800df62:	685a      	ldr	r2, [r3, #4]
 800df64:	4b0e      	ldr	r3, [pc, #56]	; (800dfa0 <vPortFree+0xb8>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	43db      	mvns	r3, r3
 800df6a:	401a      	ands	r2, r3
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800df70:	f7ff f80e 	bl	800cf90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	685a      	ldr	r2, [r3, #4]
 800df78:	4b0a      	ldr	r3, [pc, #40]	; (800dfa4 <vPortFree+0xbc>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	4413      	add	r3, r2
 800df7e:	4a09      	ldr	r2, [pc, #36]	; (800dfa4 <vPortFree+0xbc>)
 800df80:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800df82:	6938      	ldr	r0, [r7, #16]
 800df84:	f000 f874 	bl	800e070 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800df88:	4b07      	ldr	r3, [pc, #28]	; (800dfa8 <vPortFree+0xc0>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	3301      	adds	r3, #1
 800df8e:	4a06      	ldr	r2, [pc, #24]	; (800dfa8 <vPortFree+0xc0>)
 800df90:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800df92:	f7ff f80b 	bl	800cfac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800df96:	bf00      	nop
 800df98:	3718      	adds	r7, #24
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}
 800df9e:	bf00      	nop
 800dfa0:	20008974 	.word	0x20008974
 800dfa4:	20008964 	.word	0x20008964
 800dfa8:	20008970 	.word	0x20008970

0800dfac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dfac:	b480      	push	{r7}
 800dfae:	b085      	sub	sp, #20
 800dfb0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dfb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dfb6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dfb8:	4b27      	ldr	r3, [pc, #156]	; (800e058 <prvHeapInit+0xac>)
 800dfba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	f003 0307 	and.w	r3, r3, #7
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d00c      	beq.n	800dfe0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	3307      	adds	r3, #7
 800dfca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	f023 0307 	bic.w	r3, r3, #7
 800dfd2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dfd4:	68ba      	ldr	r2, [r7, #8]
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	1ad3      	subs	r3, r2, r3
 800dfda:	4a1f      	ldr	r2, [pc, #124]	; (800e058 <prvHeapInit+0xac>)
 800dfdc:	4413      	add	r3, r2
 800dfde:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dfe4:	4a1d      	ldr	r2, [pc, #116]	; (800e05c <prvHeapInit+0xb0>)
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dfea:	4b1c      	ldr	r3, [pc, #112]	; (800e05c <prvHeapInit+0xb0>)
 800dfec:	2200      	movs	r2, #0
 800dfee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	68ba      	ldr	r2, [r7, #8]
 800dff4:	4413      	add	r3, r2
 800dff6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dff8:	2208      	movs	r2, #8
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	1a9b      	subs	r3, r3, r2
 800dffe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	f023 0307 	bic.w	r3, r3, #7
 800e006:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	4a15      	ldr	r2, [pc, #84]	; (800e060 <prvHeapInit+0xb4>)
 800e00c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e00e:	4b14      	ldr	r3, [pc, #80]	; (800e060 <prvHeapInit+0xb4>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	2200      	movs	r2, #0
 800e014:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e016:	4b12      	ldr	r3, [pc, #72]	; (800e060 <prvHeapInit+0xb4>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	2200      	movs	r2, #0
 800e01c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	68fa      	ldr	r2, [r7, #12]
 800e026:	1ad2      	subs	r2, r2, r3
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e02c:	4b0c      	ldr	r3, [pc, #48]	; (800e060 <prvHeapInit+0xb4>)
 800e02e:	681a      	ldr	r2, [r3, #0]
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	685b      	ldr	r3, [r3, #4]
 800e038:	4a0a      	ldr	r2, [pc, #40]	; (800e064 <prvHeapInit+0xb8>)
 800e03a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	685b      	ldr	r3, [r3, #4]
 800e040:	4a09      	ldr	r2, [pc, #36]	; (800e068 <prvHeapInit+0xbc>)
 800e042:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e044:	4b09      	ldr	r3, [pc, #36]	; (800e06c <prvHeapInit+0xc0>)
 800e046:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e04a:	601a      	str	r2, [r3, #0]
}
 800e04c:	bf00      	nop
 800e04e:	3714      	adds	r7, #20
 800e050:	46bd      	mov	sp, r7
 800e052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e056:	4770      	bx	lr
 800e058:	20000958 	.word	0x20000958
 800e05c:	20008958 	.word	0x20008958
 800e060:	20008960 	.word	0x20008960
 800e064:	20008968 	.word	0x20008968
 800e068:	20008964 	.word	0x20008964
 800e06c:	20008974 	.word	0x20008974

0800e070 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e070:	b480      	push	{r7}
 800e072:	b085      	sub	sp, #20
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e078:	4b28      	ldr	r3, [pc, #160]	; (800e11c <prvInsertBlockIntoFreeList+0xac>)
 800e07a:	60fb      	str	r3, [r7, #12]
 800e07c:	e002      	b.n	800e084 <prvInsertBlockIntoFreeList+0x14>
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	60fb      	str	r3, [r7, #12]
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	687a      	ldr	r2, [r7, #4]
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d8f7      	bhi.n	800e07e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	68ba      	ldr	r2, [r7, #8]
 800e098:	4413      	add	r3, r2
 800e09a:	687a      	ldr	r2, [r7, #4]
 800e09c:	429a      	cmp	r2, r3
 800e09e:	d108      	bne.n	800e0b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	685a      	ldr	r2, [r3, #4]
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	685b      	ldr	r3, [r3, #4]
 800e0a8:	441a      	add	r2, r3
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	685b      	ldr	r3, [r3, #4]
 800e0ba:	68ba      	ldr	r2, [r7, #8]
 800e0bc:	441a      	add	r2, r3
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	d118      	bne.n	800e0f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681a      	ldr	r2, [r3, #0]
 800e0ca:	4b15      	ldr	r3, [pc, #84]	; (800e120 <prvInsertBlockIntoFreeList+0xb0>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d00d      	beq.n	800e0ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	685a      	ldr	r2, [r3, #4]
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	685b      	ldr	r3, [r3, #4]
 800e0dc:	441a      	add	r2, r3
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	681a      	ldr	r2, [r3, #0]
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	601a      	str	r2, [r3, #0]
 800e0ec:	e008      	b.n	800e100 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e0ee:	4b0c      	ldr	r3, [pc, #48]	; (800e120 <prvInsertBlockIntoFreeList+0xb0>)
 800e0f0:	681a      	ldr	r2, [r3, #0]
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	601a      	str	r2, [r3, #0]
 800e0f6:	e003      	b.n	800e100 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	681a      	ldr	r2, [r3, #0]
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e100:	68fa      	ldr	r2, [r7, #12]
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	429a      	cmp	r2, r3
 800e106:	d002      	beq.n	800e10e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	687a      	ldr	r2, [r7, #4]
 800e10c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e10e:	bf00      	nop
 800e110:	3714      	adds	r7, #20
 800e112:	46bd      	mov	sp, r7
 800e114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e118:	4770      	bx	lr
 800e11a:	bf00      	nop
 800e11c:	20008958 	.word	0x20008958
 800e120:	20008960 	.word	0x20008960

0800e124 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800e128:	2201      	movs	r2, #1
 800e12a:	4912      	ldr	r1, [pc, #72]	; (800e174 <MX_USB_DEVICE_Init+0x50>)
 800e12c:	4812      	ldr	r0, [pc, #72]	; (800e178 <MX_USB_DEVICE_Init+0x54>)
 800e12e:	f7fc fd67 	bl	800ac00 <USBD_Init>
 800e132:	4603      	mov	r3, r0
 800e134:	2b00      	cmp	r3, #0
 800e136:	d001      	beq.n	800e13c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e138:	f7f3 fec2 	bl	8001ec0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800e13c:	490f      	ldr	r1, [pc, #60]	; (800e17c <MX_USB_DEVICE_Init+0x58>)
 800e13e:	480e      	ldr	r0, [pc, #56]	; (800e178 <MX_USB_DEVICE_Init+0x54>)
 800e140:	f7fc fd8e 	bl	800ac60 <USBD_RegisterClass>
 800e144:	4603      	mov	r3, r0
 800e146:	2b00      	cmp	r3, #0
 800e148:	d001      	beq.n	800e14e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e14a:	f7f3 feb9 	bl	8001ec0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800e14e:	490c      	ldr	r1, [pc, #48]	; (800e180 <MX_USB_DEVICE_Init+0x5c>)
 800e150:	4809      	ldr	r0, [pc, #36]	; (800e178 <MX_USB_DEVICE_Init+0x54>)
 800e152:	f7fc fcc5 	bl	800aae0 <USBD_CDC_RegisterInterface>
 800e156:	4603      	mov	r3, r0
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d001      	beq.n	800e160 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e15c:	f7f3 feb0 	bl	8001ec0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800e160:	4805      	ldr	r0, [pc, #20]	; (800e178 <MX_USB_DEVICE_Init+0x54>)
 800e162:	f7fc fdb3 	bl	800accc <USBD_Start>
 800e166:	4603      	mov	r3, r0
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d001      	beq.n	800e170 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e16c:	f7f3 fea8 	bl	8001ec0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e170:	bf00      	nop
 800e172:	bd80      	pop	{r7, pc}
 800e174:	200000f8 	.word	0x200000f8
 800e178:	20008978 	.word	0x20008978
 800e17c:	20000060 	.word	0x20000060
 800e180:	200000e4 	.word	0x200000e4

0800e184 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800e188:	2200      	movs	r2, #0
 800e18a:	4905      	ldr	r1, [pc, #20]	; (800e1a0 <CDC_Init_HS+0x1c>)
 800e18c:	4805      	ldr	r0, [pc, #20]	; (800e1a4 <CDC_Init_HS+0x20>)
 800e18e:	f7fc fcc1 	bl	800ab14 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800e192:	4905      	ldr	r1, [pc, #20]	; (800e1a8 <CDC_Init_HS+0x24>)
 800e194:	4803      	ldr	r0, [pc, #12]	; (800e1a4 <CDC_Init_HS+0x20>)
 800e196:	f7fc fcdf 	bl	800ab58 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e19a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	bd80      	pop	{r7, pc}
 800e1a0:	20009454 	.word	0x20009454
 800e1a4:	20008978 	.word	0x20008978
 800e1a8:	20008c54 	.word	0x20008c54

0800e1ac <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800e1b0:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ba:	4770      	bx	lr

0800e1bc <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e1bc:	b480      	push	{r7}
 800e1be:	b083      	sub	sp, #12
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	6039      	str	r1, [r7, #0]
 800e1c6:	71fb      	strb	r3, [r7, #7]
 800e1c8:	4613      	mov	r3, r2
 800e1ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800e1cc:	79fb      	ldrb	r3, [r7, #7]
 800e1ce:	2b23      	cmp	r3, #35	; 0x23
 800e1d0:	d84a      	bhi.n	800e268 <CDC_Control_HS+0xac>
 800e1d2:	a201      	add	r2, pc, #4	; (adr r2, 800e1d8 <CDC_Control_HS+0x1c>)
 800e1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1d8:	0800e269 	.word	0x0800e269
 800e1dc:	0800e269 	.word	0x0800e269
 800e1e0:	0800e269 	.word	0x0800e269
 800e1e4:	0800e269 	.word	0x0800e269
 800e1e8:	0800e269 	.word	0x0800e269
 800e1ec:	0800e269 	.word	0x0800e269
 800e1f0:	0800e269 	.word	0x0800e269
 800e1f4:	0800e269 	.word	0x0800e269
 800e1f8:	0800e269 	.word	0x0800e269
 800e1fc:	0800e269 	.word	0x0800e269
 800e200:	0800e269 	.word	0x0800e269
 800e204:	0800e269 	.word	0x0800e269
 800e208:	0800e269 	.word	0x0800e269
 800e20c:	0800e269 	.word	0x0800e269
 800e210:	0800e269 	.word	0x0800e269
 800e214:	0800e269 	.word	0x0800e269
 800e218:	0800e269 	.word	0x0800e269
 800e21c:	0800e269 	.word	0x0800e269
 800e220:	0800e269 	.word	0x0800e269
 800e224:	0800e269 	.word	0x0800e269
 800e228:	0800e269 	.word	0x0800e269
 800e22c:	0800e269 	.word	0x0800e269
 800e230:	0800e269 	.word	0x0800e269
 800e234:	0800e269 	.word	0x0800e269
 800e238:	0800e269 	.word	0x0800e269
 800e23c:	0800e269 	.word	0x0800e269
 800e240:	0800e269 	.word	0x0800e269
 800e244:	0800e269 	.word	0x0800e269
 800e248:	0800e269 	.word	0x0800e269
 800e24c:	0800e269 	.word	0x0800e269
 800e250:	0800e269 	.word	0x0800e269
 800e254:	0800e269 	.word	0x0800e269
 800e258:	0800e269 	.word	0x0800e269
 800e25c:	0800e269 	.word	0x0800e269
 800e260:	0800e269 	.word	0x0800e269
 800e264:	0800e269 	.word	0x0800e269
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e268:	bf00      	nop
  }

  return (USBD_OK);
 800e26a:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800e26c:	4618      	mov	r0, r3
 800e26e:	370c      	adds	r7, #12
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr

0800e278 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b082      	sub	sp, #8
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800e282:	6879      	ldr	r1, [r7, #4]
 800e284:	4805      	ldr	r0, [pc, #20]	; (800e29c <CDC_Receive_HS+0x24>)
 800e286:	f7fc fc67 	bl	800ab58 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800e28a:	4804      	ldr	r0, [pc, #16]	; (800e29c <CDC_Receive_HS+0x24>)
 800e28c:	f7fc fc82 	bl	800ab94 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e290:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800e292:	4618      	mov	r0, r3
 800e294:	3708      	adds	r7, #8
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}
 800e29a:	bf00      	nop
 800e29c:	20008978 	.word	0x20008978

0800e2a0 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e2a0:	b480      	push	{r7}
 800e2a2:	b087      	sub	sp, #28
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	60f8      	str	r0, [r7, #12]
 800e2a8:	60b9      	str	r1, [r7, #8]
 800e2aa:	4613      	mov	r3, r2
 800e2ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800e2b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	371c      	adds	r7, #28
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c0:	4770      	bx	lr
	...

0800e2c4 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	b083      	sub	sp, #12
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	6039      	str	r1, [r7, #0]
 800e2ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	2212      	movs	r2, #18
 800e2d4:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800e2d6:	4b03      	ldr	r3, [pc, #12]	; (800e2e4 <USBD_HS_DeviceDescriptor+0x20>)
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	370c      	adds	r7, #12
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e2:	4770      	bx	lr
 800e2e4:	20000114 	.word	0x20000114

0800e2e8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b083      	sub	sp, #12
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	6039      	str	r1, [r7, #0]
 800e2f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	2204      	movs	r2, #4
 800e2f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e2fa:	4b03      	ldr	r3, [pc, #12]	; (800e308 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	370c      	adds	r7, #12
 800e300:	46bd      	mov	sp, r7
 800e302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e306:	4770      	bx	lr
 800e308:	20000128 	.word	0x20000128

0800e30c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b082      	sub	sp, #8
 800e310:	af00      	add	r7, sp, #0
 800e312:	4603      	mov	r3, r0
 800e314:	6039      	str	r1, [r7, #0]
 800e316:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e318:	79fb      	ldrb	r3, [r7, #7]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d105      	bne.n	800e32a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800e31e:	683a      	ldr	r2, [r7, #0]
 800e320:	4907      	ldr	r1, [pc, #28]	; (800e340 <USBD_HS_ProductStrDescriptor+0x34>)
 800e322:	4808      	ldr	r0, [pc, #32]	; (800e344 <USBD_HS_ProductStrDescriptor+0x38>)
 800e324:	f7fd fe7e 	bl	800c024 <USBD_GetString>
 800e328:	e004      	b.n	800e334 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800e32a:	683a      	ldr	r2, [r7, #0]
 800e32c:	4904      	ldr	r1, [pc, #16]	; (800e340 <USBD_HS_ProductStrDescriptor+0x34>)
 800e32e:	4805      	ldr	r0, [pc, #20]	; (800e344 <USBD_HS_ProductStrDescriptor+0x38>)
 800e330:	f7fd fe78 	bl	800c024 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e334:	4b02      	ldr	r3, [pc, #8]	; (800e340 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800e336:	4618      	mov	r0, r3
 800e338:	3708      	adds	r7, #8
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}
 800e33e:	bf00      	nop
 800e340:	20009c54 	.word	0x20009c54
 800e344:	0800fe18 	.word	0x0800fe18

0800e348 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b082      	sub	sp, #8
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	4603      	mov	r3, r0
 800e350:	6039      	str	r1, [r7, #0]
 800e352:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e354:	683a      	ldr	r2, [r7, #0]
 800e356:	4904      	ldr	r1, [pc, #16]	; (800e368 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800e358:	4804      	ldr	r0, [pc, #16]	; (800e36c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800e35a:	f7fd fe63 	bl	800c024 <USBD_GetString>
  return USBD_StrDesc;
 800e35e:	4b02      	ldr	r3, [pc, #8]	; (800e368 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800e360:	4618      	mov	r0, r3
 800e362:	3708      	adds	r7, #8
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}
 800e368:	20009c54 	.word	0x20009c54
 800e36c:	0800fe30 	.word	0x0800fe30

0800e370 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b082      	sub	sp, #8
 800e374:	af00      	add	r7, sp, #0
 800e376:	4603      	mov	r3, r0
 800e378:	6039      	str	r1, [r7, #0]
 800e37a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	221a      	movs	r2, #26
 800e380:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e382:	f000 f843 	bl	800e40c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800e386:	4b02      	ldr	r3, [pc, #8]	; (800e390 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800e388:	4618      	mov	r0, r3
 800e38a:	3708      	adds	r7, #8
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}
 800e390:	2000012c 	.word	0x2000012c

0800e394 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b082      	sub	sp, #8
 800e398:	af00      	add	r7, sp, #0
 800e39a:	4603      	mov	r3, r0
 800e39c:	6039      	str	r1, [r7, #0]
 800e39e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e3a0:	79fb      	ldrb	r3, [r7, #7]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d105      	bne.n	800e3b2 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800e3a6:	683a      	ldr	r2, [r7, #0]
 800e3a8:	4907      	ldr	r1, [pc, #28]	; (800e3c8 <USBD_HS_ConfigStrDescriptor+0x34>)
 800e3aa:	4808      	ldr	r0, [pc, #32]	; (800e3cc <USBD_HS_ConfigStrDescriptor+0x38>)
 800e3ac:	f7fd fe3a 	bl	800c024 <USBD_GetString>
 800e3b0:	e004      	b.n	800e3bc <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800e3b2:	683a      	ldr	r2, [r7, #0]
 800e3b4:	4904      	ldr	r1, [pc, #16]	; (800e3c8 <USBD_HS_ConfigStrDescriptor+0x34>)
 800e3b6:	4805      	ldr	r0, [pc, #20]	; (800e3cc <USBD_HS_ConfigStrDescriptor+0x38>)
 800e3b8:	f7fd fe34 	bl	800c024 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e3bc:	4b02      	ldr	r3, [pc, #8]	; (800e3c8 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	3708      	adds	r7, #8
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}
 800e3c6:	bf00      	nop
 800e3c8:	20009c54 	.word	0x20009c54
 800e3cc:	0800fe44 	.word	0x0800fe44

0800e3d0 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b082      	sub	sp, #8
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	6039      	str	r1, [r7, #0]
 800e3da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e3dc:	79fb      	ldrb	r3, [r7, #7]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d105      	bne.n	800e3ee <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800e3e2:	683a      	ldr	r2, [r7, #0]
 800e3e4:	4907      	ldr	r1, [pc, #28]	; (800e404 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800e3e6:	4808      	ldr	r0, [pc, #32]	; (800e408 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800e3e8:	f7fd fe1c 	bl	800c024 <USBD_GetString>
 800e3ec:	e004      	b.n	800e3f8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800e3ee:	683a      	ldr	r2, [r7, #0]
 800e3f0:	4904      	ldr	r1, [pc, #16]	; (800e404 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800e3f2:	4805      	ldr	r0, [pc, #20]	; (800e408 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800e3f4:	f7fd fe16 	bl	800c024 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e3f8:	4b02      	ldr	r3, [pc, #8]	; (800e404 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	3708      	adds	r7, #8
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
 800e402:	bf00      	nop
 800e404:	20009c54 	.word	0x20009c54
 800e408:	0800fe50 	.word	0x0800fe50

0800e40c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b084      	sub	sp, #16
 800e410:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e412:	4b0f      	ldr	r3, [pc, #60]	; (800e450 <Get_SerialNum+0x44>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e418:	4b0e      	ldr	r3, [pc, #56]	; (800e454 <Get_SerialNum+0x48>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e41e:	4b0e      	ldr	r3, [pc, #56]	; (800e458 <Get_SerialNum+0x4c>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e424:	68fa      	ldr	r2, [r7, #12]
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	4413      	add	r3, r2
 800e42a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d009      	beq.n	800e446 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e432:	2208      	movs	r2, #8
 800e434:	4909      	ldr	r1, [pc, #36]	; (800e45c <Get_SerialNum+0x50>)
 800e436:	68f8      	ldr	r0, [r7, #12]
 800e438:	f000 f814 	bl	800e464 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e43c:	2204      	movs	r2, #4
 800e43e:	4908      	ldr	r1, [pc, #32]	; (800e460 <Get_SerialNum+0x54>)
 800e440:	68b8      	ldr	r0, [r7, #8]
 800e442:	f000 f80f 	bl	800e464 <IntToUnicode>
  }
}
 800e446:	bf00      	nop
 800e448:	3710      	adds	r7, #16
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
 800e44e:	bf00      	nop
 800e450:	1fff7a10 	.word	0x1fff7a10
 800e454:	1fff7a14 	.word	0x1fff7a14
 800e458:	1fff7a18 	.word	0x1fff7a18
 800e45c:	2000012e 	.word	0x2000012e
 800e460:	2000013e 	.word	0x2000013e

0800e464 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e464:	b480      	push	{r7}
 800e466:	b087      	sub	sp, #28
 800e468:	af00      	add	r7, sp, #0
 800e46a:	60f8      	str	r0, [r7, #12]
 800e46c:	60b9      	str	r1, [r7, #8]
 800e46e:	4613      	mov	r3, r2
 800e470:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e472:	2300      	movs	r3, #0
 800e474:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e476:	2300      	movs	r3, #0
 800e478:	75fb      	strb	r3, [r7, #23]
 800e47a:	e027      	b.n	800e4cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	0f1b      	lsrs	r3, r3, #28
 800e480:	2b09      	cmp	r3, #9
 800e482:	d80b      	bhi.n	800e49c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	0f1b      	lsrs	r3, r3, #28
 800e488:	b2da      	uxtb	r2, r3
 800e48a:	7dfb      	ldrb	r3, [r7, #23]
 800e48c:	005b      	lsls	r3, r3, #1
 800e48e:	4619      	mov	r1, r3
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	440b      	add	r3, r1
 800e494:	3230      	adds	r2, #48	; 0x30
 800e496:	b2d2      	uxtb	r2, r2
 800e498:	701a      	strb	r2, [r3, #0]
 800e49a:	e00a      	b.n	800e4b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	0f1b      	lsrs	r3, r3, #28
 800e4a0:	b2da      	uxtb	r2, r3
 800e4a2:	7dfb      	ldrb	r3, [r7, #23]
 800e4a4:	005b      	lsls	r3, r3, #1
 800e4a6:	4619      	mov	r1, r3
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	440b      	add	r3, r1
 800e4ac:	3237      	adds	r2, #55	; 0x37
 800e4ae:	b2d2      	uxtb	r2, r2
 800e4b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	011b      	lsls	r3, r3, #4
 800e4b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e4b8:	7dfb      	ldrb	r3, [r7, #23]
 800e4ba:	005b      	lsls	r3, r3, #1
 800e4bc:	3301      	adds	r3, #1
 800e4be:	68ba      	ldr	r2, [r7, #8]
 800e4c0:	4413      	add	r3, r2
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e4c6:	7dfb      	ldrb	r3, [r7, #23]
 800e4c8:	3301      	adds	r3, #1
 800e4ca:	75fb      	strb	r3, [r7, #23]
 800e4cc:	7dfa      	ldrb	r2, [r7, #23]
 800e4ce:	79fb      	ldrb	r3, [r7, #7]
 800e4d0:	429a      	cmp	r2, r3
 800e4d2:	d3d3      	bcc.n	800e47c <IntToUnicode+0x18>
  }
}
 800e4d4:	bf00      	nop
 800e4d6:	bf00      	nop
 800e4d8:	371c      	adds	r7, #28
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e0:	4770      	bx	lr
	...

0800e4e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b08a      	sub	sp, #40	; 0x28
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e4ec:	f107 0314 	add.w	r3, r7, #20
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	601a      	str	r2, [r3, #0]
 800e4f4:	605a      	str	r2, [r3, #4]
 800e4f6:	609a      	str	r2, [r3, #8]
 800e4f8:	60da      	str	r2, [r3, #12]
 800e4fa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	4a24      	ldr	r2, [pc, #144]	; (800e594 <HAL_PCD_MspInit+0xb0>)
 800e502:	4293      	cmp	r3, r2
 800e504:	d141      	bne.n	800e58a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e506:	2300      	movs	r3, #0
 800e508:	613b      	str	r3, [r7, #16]
 800e50a:	4b23      	ldr	r3, [pc, #140]	; (800e598 <HAL_PCD_MspInit+0xb4>)
 800e50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e50e:	4a22      	ldr	r2, [pc, #136]	; (800e598 <HAL_PCD_MspInit+0xb4>)
 800e510:	f043 0302 	orr.w	r3, r3, #2
 800e514:	6313      	str	r3, [r2, #48]	; 0x30
 800e516:	4b20      	ldr	r3, [pc, #128]	; (800e598 <HAL_PCD_MspInit+0xb4>)
 800e518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e51a:	f003 0302 	and.w	r3, r3, #2
 800e51e:	613b      	str	r3, [r7, #16]
 800e520:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800e522:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800e526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e528:	2302      	movs	r3, #2
 800e52a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e52c:	2300      	movs	r3, #0
 800e52e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e530:	2300      	movs	r3, #0
 800e532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800e534:	230c      	movs	r3, #12
 800e536:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e538:	f107 0314 	add.w	r3, r7, #20
 800e53c:	4619      	mov	r1, r3
 800e53e:	4817      	ldr	r0, [pc, #92]	; (800e59c <HAL_PCD_MspInit+0xb8>)
 800e540:	f7f6 f8e4 	bl	800470c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800e544:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e54a:	2300      	movs	r3, #0
 800e54c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e54e:	2300      	movs	r3, #0
 800e550:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800e552:	f107 0314 	add.w	r3, r7, #20
 800e556:	4619      	mov	r1, r3
 800e558:	4810      	ldr	r0, [pc, #64]	; (800e59c <HAL_PCD_MspInit+0xb8>)
 800e55a:	f7f6 f8d7 	bl	800470c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800e55e:	2300      	movs	r3, #0
 800e560:	60fb      	str	r3, [r7, #12]
 800e562:	4b0d      	ldr	r3, [pc, #52]	; (800e598 <HAL_PCD_MspInit+0xb4>)
 800e564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e566:	4a0c      	ldr	r2, [pc, #48]	; (800e598 <HAL_PCD_MspInit+0xb4>)
 800e568:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e56c:	6313      	str	r3, [r2, #48]	; 0x30
 800e56e:	4b0a      	ldr	r3, [pc, #40]	; (800e598 <HAL_PCD_MspInit+0xb4>)
 800e570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e572:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e576:	60fb      	str	r3, [r7, #12]
 800e578:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800e57a:	2200      	movs	r2, #0
 800e57c:	2105      	movs	r1, #5
 800e57e:	204d      	movs	r0, #77	; 0x4d
 800e580:	f7f5 fb40 	bl	8003c04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800e584:	204d      	movs	r0, #77	; 0x4d
 800e586:	f7f5 fb59 	bl	8003c3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800e58a:	bf00      	nop
 800e58c:	3728      	adds	r7, #40	; 0x28
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}
 800e592:	bf00      	nop
 800e594:	40040000 	.word	0x40040000
 800e598:	40023800 	.word	0x40023800
 800e59c:	40020400 	.word	0x40020400

0800e5a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b082      	sub	sp, #8
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e5b4:	4619      	mov	r1, r3
 800e5b6:	4610      	mov	r0, r2
 800e5b8:	f7fc fbd5 	bl	800ad66 <USBD_LL_SetupStage>
}
 800e5bc:	bf00      	nop
 800e5be:	3708      	adds	r7, #8
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}

0800e5c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b082      	sub	sp, #8
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	460b      	mov	r3, r1
 800e5ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e5d6:	78fa      	ldrb	r2, [r7, #3]
 800e5d8:	6879      	ldr	r1, [r7, #4]
 800e5da:	4613      	mov	r3, r2
 800e5dc:	00db      	lsls	r3, r3, #3
 800e5de:	4413      	add	r3, r2
 800e5e0:	009b      	lsls	r3, r3, #2
 800e5e2:	440b      	add	r3, r1
 800e5e4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e5e8:	681a      	ldr	r2, [r3, #0]
 800e5ea:	78fb      	ldrb	r3, [r7, #3]
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	f7fc fc0f 	bl	800ae10 <USBD_LL_DataOutStage>
}
 800e5f2:	bf00      	nop
 800e5f4:	3708      	adds	r7, #8
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}

0800e5fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5fa:	b580      	push	{r7, lr}
 800e5fc:	b082      	sub	sp, #8
 800e5fe:	af00      	add	r7, sp, #0
 800e600:	6078      	str	r0, [r7, #4]
 800e602:	460b      	mov	r3, r1
 800e604:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e60c:	78fa      	ldrb	r2, [r7, #3]
 800e60e:	6879      	ldr	r1, [r7, #4]
 800e610:	4613      	mov	r3, r2
 800e612:	00db      	lsls	r3, r3, #3
 800e614:	4413      	add	r3, r2
 800e616:	009b      	lsls	r3, r3, #2
 800e618:	440b      	add	r3, r1
 800e61a:	334c      	adds	r3, #76	; 0x4c
 800e61c:	681a      	ldr	r2, [r3, #0]
 800e61e:	78fb      	ldrb	r3, [r7, #3]
 800e620:	4619      	mov	r1, r3
 800e622:	f7fc fca8 	bl	800af76 <USBD_LL_DataInStage>
}
 800e626:	bf00      	nop
 800e628:	3708      	adds	r7, #8
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}

0800e62e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e62e:	b580      	push	{r7, lr}
 800e630:	b082      	sub	sp, #8
 800e632:	af00      	add	r7, sp, #0
 800e634:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e63c:	4618      	mov	r0, r3
 800e63e:	f7fc fddc 	bl	800b1fa <USBD_LL_SOF>
}
 800e642:	bf00      	nop
 800e644:	3708      	adds	r7, #8
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}

0800e64a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e64a:	b580      	push	{r7, lr}
 800e64c:	b084      	sub	sp, #16
 800e64e:	af00      	add	r7, sp, #0
 800e650:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e652:	2301      	movs	r3, #1
 800e654:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	68db      	ldr	r3, [r3, #12]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d102      	bne.n	800e664 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e65e:	2300      	movs	r3, #0
 800e660:	73fb      	strb	r3, [r7, #15]
 800e662:	e008      	b.n	800e676 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	68db      	ldr	r3, [r3, #12]
 800e668:	2b02      	cmp	r3, #2
 800e66a:	d102      	bne.n	800e672 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e66c:	2301      	movs	r3, #1
 800e66e:	73fb      	strb	r3, [r7, #15]
 800e670:	e001      	b.n	800e676 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e672:	f7f3 fc25 	bl	8001ec0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e67c:	7bfa      	ldrb	r2, [r7, #15]
 800e67e:	4611      	mov	r1, r2
 800e680:	4618      	mov	r0, r3
 800e682:	f7fc fd7c 	bl	800b17e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e68c:	4618      	mov	r0, r3
 800e68e:	f7fc fd24 	bl	800b0da <USBD_LL_Reset>
}
 800e692:	bf00      	nop
 800e694:	3710      	adds	r7, #16
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}
	...

0800e69c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b082      	sub	sp, #8
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7fc fd77 	bl	800b19e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	687a      	ldr	r2, [r7, #4]
 800e6bc:	6812      	ldr	r2, [r2, #0]
 800e6be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e6c2:	f043 0301 	orr.w	r3, r3, #1
 800e6c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	6a1b      	ldr	r3, [r3, #32]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d005      	beq.n	800e6dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e6d0:	4b04      	ldr	r3, [pc, #16]	; (800e6e4 <HAL_PCD_SuspendCallback+0x48>)
 800e6d2:	691b      	ldr	r3, [r3, #16]
 800e6d4:	4a03      	ldr	r2, [pc, #12]	; (800e6e4 <HAL_PCD_SuspendCallback+0x48>)
 800e6d6:	f043 0306 	orr.w	r3, r3, #6
 800e6da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e6dc:	bf00      	nop
 800e6de:	3708      	adds	r7, #8
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}
 800e6e4:	e000ed00 	.word	0xe000ed00

0800e6e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b082      	sub	sp, #8
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f7fc fd67 	bl	800b1ca <USBD_LL_Resume>
}
 800e6fc:	bf00      	nop
 800e6fe:	3708      	adds	r7, #8
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}

0800e704 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b082      	sub	sp, #8
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
 800e70c:	460b      	mov	r3, r1
 800e70e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e716:	78fa      	ldrb	r2, [r7, #3]
 800e718:	4611      	mov	r1, r2
 800e71a:	4618      	mov	r0, r3
 800e71c:	f7fc fdbf 	bl	800b29e <USBD_LL_IsoOUTIncomplete>
}
 800e720:	bf00      	nop
 800e722:	3708      	adds	r7, #8
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}

0800e728 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b082      	sub	sp, #8
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	460b      	mov	r3, r1
 800e732:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e73a:	78fa      	ldrb	r2, [r7, #3]
 800e73c:	4611      	mov	r1, r2
 800e73e:	4618      	mov	r0, r3
 800e740:	f7fc fd7b 	bl	800b23a <USBD_LL_IsoINIncomplete>
}
 800e744:	bf00      	nop
 800e746:	3708      	adds	r7, #8
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}

0800e74c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b082      	sub	sp, #8
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e75a:	4618      	mov	r0, r3
 800e75c:	f7fc fdd1 	bl	800b302 <USBD_LL_DevConnected>
}
 800e760:	bf00      	nop
 800e762:	3708      	adds	r7, #8
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}

0800e768 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b082      	sub	sp, #8
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e776:	4618      	mov	r0, r3
 800e778:	f7fc fdce 	bl	800b318 <USBD_LL_DevDisconnected>
}
 800e77c:	bf00      	nop
 800e77e:	3708      	adds	r7, #8
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}

0800e784 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b082      	sub	sp, #8
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	781b      	ldrb	r3, [r3, #0]
 800e790:	2b01      	cmp	r3, #1
 800e792:	d140      	bne.n	800e816 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800e794:	4a22      	ldr	r2, [pc, #136]	; (800e820 <USBD_LL_Init+0x9c>)
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	4a20      	ldr	r2, [pc, #128]	; (800e820 <USBD_LL_Init+0x9c>)
 800e7a0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800e7a4:	4b1e      	ldr	r3, [pc, #120]	; (800e820 <USBD_LL_Init+0x9c>)
 800e7a6:	4a1f      	ldr	r2, [pc, #124]	; (800e824 <USBD_LL_Init+0xa0>)
 800e7a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800e7aa:	4b1d      	ldr	r3, [pc, #116]	; (800e820 <USBD_LL_Init+0x9c>)
 800e7ac:	2206      	movs	r2, #6
 800e7ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800e7b0:	4b1b      	ldr	r3, [pc, #108]	; (800e820 <USBD_LL_Init+0x9c>)
 800e7b2:	2202      	movs	r2, #2
 800e7b4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800e7b6:	4b1a      	ldr	r3, [pc, #104]	; (800e820 <USBD_LL_Init+0x9c>)
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800e7bc:	4b18      	ldr	r3, [pc, #96]	; (800e820 <USBD_LL_Init+0x9c>)
 800e7be:	2202      	movs	r2, #2
 800e7c0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800e7c2:	4b17      	ldr	r3, [pc, #92]	; (800e820 <USBD_LL_Init+0x9c>)
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800e7c8:	4b15      	ldr	r3, [pc, #84]	; (800e820 <USBD_LL_Init+0x9c>)
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800e7ce:	4b14      	ldr	r3, [pc, #80]	; (800e820 <USBD_LL_Init+0x9c>)
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800e7d4:	4b12      	ldr	r3, [pc, #72]	; (800e820 <USBD_LL_Init+0x9c>)
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800e7da:	4b11      	ldr	r3, [pc, #68]	; (800e820 <USBD_LL_Init+0x9c>)
 800e7dc:	2200      	movs	r2, #0
 800e7de:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800e7e0:	4b0f      	ldr	r3, [pc, #60]	; (800e820 <USBD_LL_Init+0x9c>)
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800e7e6:	480e      	ldr	r0, [pc, #56]	; (800e820 <USBD_LL_Init+0x9c>)
 800e7e8:	f7f6 fe0b 	bl	8005402 <HAL_PCD_Init>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d001      	beq.n	800e7f6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800e7f2:	f7f3 fb65 	bl	8001ec0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800e7f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e7fa:	4809      	ldr	r0, [pc, #36]	; (800e820 <USBD_LL_Init+0x9c>)
 800e7fc:	f7f8 f861 	bl	80068c2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800e800:	2280      	movs	r2, #128	; 0x80
 800e802:	2100      	movs	r1, #0
 800e804:	4806      	ldr	r0, [pc, #24]	; (800e820 <USBD_LL_Init+0x9c>)
 800e806:	f7f8 f815 	bl	8006834 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800e80a:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800e80e:	2101      	movs	r1, #1
 800e810:	4803      	ldr	r0, [pc, #12]	; (800e820 <USBD_LL_Init+0x9c>)
 800e812:	f7f8 f80f 	bl	8006834 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e816:	2300      	movs	r3, #0
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3708      	adds	r7, #8
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}
 800e820:	20009e54 	.word	0x20009e54
 800e824:	40040000 	.word	0x40040000

0800e828 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b084      	sub	sp, #16
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e830:	2300      	movs	r3, #0
 800e832:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e834:	2300      	movs	r3, #0
 800e836:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e83e:	4618      	mov	r0, r3
 800e840:	f7f6 fefc 	bl	800563c <HAL_PCD_Start>
 800e844:	4603      	mov	r3, r0
 800e846:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e848:	7bfb      	ldrb	r3, [r7, #15]
 800e84a:	4618      	mov	r0, r3
 800e84c:	f000 f942 	bl	800ead4 <USBD_Get_USB_Status>
 800e850:	4603      	mov	r3, r0
 800e852:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e854:	7bbb      	ldrb	r3, [r7, #14]
}
 800e856:	4618      	mov	r0, r3
 800e858:	3710      	adds	r7, #16
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}

0800e85e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e85e:	b580      	push	{r7, lr}
 800e860:	b084      	sub	sp, #16
 800e862:	af00      	add	r7, sp, #0
 800e864:	6078      	str	r0, [r7, #4]
 800e866:	4608      	mov	r0, r1
 800e868:	4611      	mov	r1, r2
 800e86a:	461a      	mov	r2, r3
 800e86c:	4603      	mov	r3, r0
 800e86e:	70fb      	strb	r3, [r7, #3]
 800e870:	460b      	mov	r3, r1
 800e872:	70bb      	strb	r3, [r7, #2]
 800e874:	4613      	mov	r3, r2
 800e876:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e878:	2300      	movs	r3, #0
 800e87a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e87c:	2300      	movs	r3, #0
 800e87e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e886:	78bb      	ldrb	r3, [r7, #2]
 800e888:	883a      	ldrh	r2, [r7, #0]
 800e88a:	78f9      	ldrb	r1, [r7, #3]
 800e88c:	f7f7 fbcd 	bl	800602a <HAL_PCD_EP_Open>
 800e890:	4603      	mov	r3, r0
 800e892:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e894:	7bfb      	ldrb	r3, [r7, #15]
 800e896:	4618      	mov	r0, r3
 800e898:	f000 f91c 	bl	800ead4 <USBD_Get_USB_Status>
 800e89c:	4603      	mov	r3, r0
 800e89e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e8a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	3710      	adds	r7, #16
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}

0800e8aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e8aa:	b580      	push	{r7, lr}
 800e8ac:	b084      	sub	sp, #16
 800e8ae:	af00      	add	r7, sp, #0
 800e8b0:	6078      	str	r0, [r7, #4]
 800e8b2:	460b      	mov	r3, r1
 800e8b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e8c4:	78fa      	ldrb	r2, [r7, #3]
 800e8c6:	4611      	mov	r1, r2
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7f7 fc16 	bl	80060fa <HAL_PCD_EP_Close>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e8d2:	7bfb      	ldrb	r3, [r7, #15]
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f000 f8fd 	bl	800ead4 <USBD_Get_USB_Status>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e8de:	7bbb      	ldrb	r3, [r7, #14]
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	3710      	adds	r7, #16
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}

0800e8e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b084      	sub	sp, #16
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
 800e8f0:	460b      	mov	r3, r1
 800e8f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e902:	78fa      	ldrb	r2, [r7, #3]
 800e904:	4611      	mov	r1, r2
 800e906:	4618      	mov	r0, r3
 800e908:	f7f7 fcee 	bl	80062e8 <HAL_PCD_EP_SetStall>
 800e90c:	4603      	mov	r3, r0
 800e90e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e910:	7bfb      	ldrb	r3, [r7, #15]
 800e912:	4618      	mov	r0, r3
 800e914:	f000 f8de 	bl	800ead4 <USBD_Get_USB_Status>
 800e918:	4603      	mov	r3, r0
 800e91a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e91c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3710      	adds	r7, #16
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}

0800e926 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e926:	b580      	push	{r7, lr}
 800e928:	b084      	sub	sp, #16
 800e92a:	af00      	add	r7, sp, #0
 800e92c:	6078      	str	r0, [r7, #4]
 800e92e:	460b      	mov	r3, r1
 800e930:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e932:	2300      	movs	r3, #0
 800e934:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e936:	2300      	movs	r3, #0
 800e938:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e940:	78fa      	ldrb	r2, [r7, #3]
 800e942:	4611      	mov	r1, r2
 800e944:	4618      	mov	r0, r3
 800e946:	f7f7 fd33 	bl	80063b0 <HAL_PCD_EP_ClrStall>
 800e94a:	4603      	mov	r3, r0
 800e94c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e94e:	7bfb      	ldrb	r3, [r7, #15]
 800e950:	4618      	mov	r0, r3
 800e952:	f000 f8bf 	bl	800ead4 <USBD_Get_USB_Status>
 800e956:	4603      	mov	r3, r0
 800e958:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e95a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	3710      	adds	r7, #16
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}

0800e964 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e964:	b480      	push	{r7}
 800e966:	b085      	sub	sp, #20
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	460b      	mov	r3, r1
 800e96e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e976:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e978:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	da0b      	bge.n	800e998 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e980:	78fb      	ldrb	r3, [r7, #3]
 800e982:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e986:	68f9      	ldr	r1, [r7, #12]
 800e988:	4613      	mov	r3, r2
 800e98a:	00db      	lsls	r3, r3, #3
 800e98c:	4413      	add	r3, r2
 800e98e:	009b      	lsls	r3, r3, #2
 800e990:	440b      	add	r3, r1
 800e992:	333e      	adds	r3, #62	; 0x3e
 800e994:	781b      	ldrb	r3, [r3, #0]
 800e996:	e00b      	b.n	800e9b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e998:	78fb      	ldrb	r3, [r7, #3]
 800e99a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e99e:	68f9      	ldr	r1, [r7, #12]
 800e9a0:	4613      	mov	r3, r2
 800e9a2:	00db      	lsls	r3, r3, #3
 800e9a4:	4413      	add	r3, r2
 800e9a6:	009b      	lsls	r3, r3, #2
 800e9a8:	440b      	add	r3, r1
 800e9aa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e9ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	3714      	adds	r7, #20
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr

0800e9bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b084      	sub	sp, #16
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
 800e9c4:	460b      	mov	r3, r1
 800e9c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e9d6:	78fa      	ldrb	r2, [r7, #3]
 800e9d8:	4611      	mov	r1, r2
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7f7 fb00 	bl	8005fe0 <HAL_PCD_SetAddress>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9e4:	7bfb      	ldrb	r3, [r7, #15]
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f000 f874 	bl	800ead4 <USBD_Get_USB_Status>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e9f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3710      	adds	r7, #16
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}

0800e9fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e9fa:	b580      	push	{r7, lr}
 800e9fc:	b086      	sub	sp, #24
 800e9fe:	af00      	add	r7, sp, #0
 800ea00:	60f8      	str	r0, [r7, #12]
 800ea02:	607a      	str	r2, [r7, #4]
 800ea04:	603b      	str	r3, [r7, #0]
 800ea06:	460b      	mov	r3, r1
 800ea08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ea18:	7af9      	ldrb	r1, [r7, #11]
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	687a      	ldr	r2, [r7, #4]
 800ea1e:	f7f7 fc19 	bl	8006254 <HAL_PCD_EP_Transmit>
 800ea22:	4603      	mov	r3, r0
 800ea24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea26:	7dfb      	ldrb	r3, [r7, #23]
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f000 f853 	bl	800ead4 <USBD_Get_USB_Status>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ea32:	7dbb      	ldrb	r3, [r7, #22]
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3718      	adds	r7, #24
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}

0800ea3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b086      	sub	sp, #24
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	60f8      	str	r0, [r7, #12]
 800ea44:	607a      	str	r2, [r7, #4]
 800ea46:	603b      	str	r3, [r7, #0]
 800ea48:	460b      	mov	r3, r1
 800ea4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea50:	2300      	movs	r3, #0
 800ea52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ea5a:	7af9      	ldrb	r1, [r7, #11]
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	687a      	ldr	r2, [r7, #4]
 800ea60:	f7f7 fb95 	bl	800618e <HAL_PCD_EP_Receive>
 800ea64:	4603      	mov	r3, r0
 800ea66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea68:	7dfb      	ldrb	r3, [r7, #23]
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f000 f832 	bl	800ead4 <USBD_Get_USB_Status>
 800ea70:	4603      	mov	r3, r0
 800ea72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ea74:	7dbb      	ldrb	r3, [r7, #22]
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3718      	adds	r7, #24
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}

0800ea7e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea7e:	b580      	push	{r7, lr}
 800ea80:	b082      	sub	sp, #8
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	6078      	str	r0, [r7, #4]
 800ea86:	460b      	mov	r3, r1
 800ea88:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ea90:	78fa      	ldrb	r2, [r7, #3]
 800ea92:	4611      	mov	r1, r2
 800ea94:	4618      	mov	r0, r3
 800ea96:	f7f7 fbc5 	bl	8006224 <HAL_PCD_EP_GetRxCount>
 800ea9a:	4603      	mov	r3, r0
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	3708      	adds	r7, #8
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b083      	sub	sp, #12
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800eaac:	4b03      	ldr	r3, [pc, #12]	; (800eabc <USBD_static_malloc+0x18>)
}
 800eaae:	4618      	mov	r0, r3
 800eab0:	370c      	adds	r7, #12
 800eab2:	46bd      	mov	sp, r7
 800eab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab8:	4770      	bx	lr
 800eaba:	bf00      	nop
 800eabc:	2000a360 	.word	0x2000a360

0800eac0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800eac0:	b480      	push	{r7}
 800eac2:	b083      	sub	sp, #12
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]

}
 800eac8:	bf00      	nop
 800eaca:	370c      	adds	r7, #12
 800eacc:	46bd      	mov	sp, r7
 800eace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead2:	4770      	bx	lr

0800ead4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ead4:	b480      	push	{r7}
 800ead6:	b085      	sub	sp, #20
 800ead8:	af00      	add	r7, sp, #0
 800eada:	4603      	mov	r3, r0
 800eadc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eade:	2300      	movs	r3, #0
 800eae0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800eae2:	79fb      	ldrb	r3, [r7, #7]
 800eae4:	2b03      	cmp	r3, #3
 800eae6:	d817      	bhi.n	800eb18 <USBD_Get_USB_Status+0x44>
 800eae8:	a201      	add	r2, pc, #4	; (adr r2, 800eaf0 <USBD_Get_USB_Status+0x1c>)
 800eaea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaee:	bf00      	nop
 800eaf0:	0800eb01 	.word	0x0800eb01
 800eaf4:	0800eb07 	.word	0x0800eb07
 800eaf8:	0800eb0d 	.word	0x0800eb0d
 800eafc:	0800eb13 	.word	0x0800eb13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800eb00:	2300      	movs	r3, #0
 800eb02:	73fb      	strb	r3, [r7, #15]
    break;
 800eb04:	e00b      	b.n	800eb1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eb06:	2303      	movs	r3, #3
 800eb08:	73fb      	strb	r3, [r7, #15]
    break;
 800eb0a:	e008      	b.n	800eb1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eb0c:	2301      	movs	r3, #1
 800eb0e:	73fb      	strb	r3, [r7, #15]
    break;
 800eb10:	e005      	b.n	800eb1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eb12:	2303      	movs	r3, #3
 800eb14:	73fb      	strb	r3, [r7, #15]
    break;
 800eb16:	e002      	b.n	800eb1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800eb18:	2303      	movs	r3, #3
 800eb1a:	73fb      	strb	r3, [r7, #15]
    break;
 800eb1c:	bf00      	nop
  }
  return usb_status;
 800eb1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	3714      	adds	r7, #20
 800eb24:	46bd      	mov	sp, r7
 800eb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2a:	4770      	bx	lr

0800eb2c <srand>:
 800eb2c:	b538      	push	{r3, r4, r5, lr}
 800eb2e:	4b10      	ldr	r3, [pc, #64]	; (800eb70 <srand+0x44>)
 800eb30:	681d      	ldr	r5, [r3, #0]
 800eb32:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800eb34:	4604      	mov	r4, r0
 800eb36:	b9b3      	cbnz	r3, 800eb66 <srand+0x3a>
 800eb38:	2018      	movs	r0, #24
 800eb3a:	f000 fa5d 	bl	800eff8 <malloc>
 800eb3e:	4602      	mov	r2, r0
 800eb40:	6328      	str	r0, [r5, #48]	; 0x30
 800eb42:	b920      	cbnz	r0, 800eb4e <srand+0x22>
 800eb44:	4b0b      	ldr	r3, [pc, #44]	; (800eb74 <srand+0x48>)
 800eb46:	480c      	ldr	r0, [pc, #48]	; (800eb78 <srand+0x4c>)
 800eb48:	2146      	movs	r1, #70	; 0x46
 800eb4a:	f000 f9eb 	bl	800ef24 <__assert_func>
 800eb4e:	490b      	ldr	r1, [pc, #44]	; (800eb7c <srand+0x50>)
 800eb50:	4b0b      	ldr	r3, [pc, #44]	; (800eb80 <srand+0x54>)
 800eb52:	e9c0 1300 	strd	r1, r3, [r0]
 800eb56:	4b0b      	ldr	r3, [pc, #44]	; (800eb84 <srand+0x58>)
 800eb58:	6083      	str	r3, [r0, #8]
 800eb5a:	230b      	movs	r3, #11
 800eb5c:	8183      	strh	r3, [r0, #12]
 800eb5e:	2100      	movs	r1, #0
 800eb60:	2001      	movs	r0, #1
 800eb62:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800eb66:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800eb68:	2200      	movs	r2, #0
 800eb6a:	611c      	str	r4, [r3, #16]
 800eb6c:	615a      	str	r2, [r3, #20]
 800eb6e:	bd38      	pop	{r3, r4, r5, pc}
 800eb70:	200001a0 	.word	0x200001a0
 800eb74:	08011938 	.word	0x08011938
 800eb78:	0801194f 	.word	0x0801194f
 800eb7c:	abcd330e 	.word	0xabcd330e
 800eb80:	e66d1234 	.word	0xe66d1234
 800eb84:	0005deec 	.word	0x0005deec

0800eb88 <rand>:
 800eb88:	4b16      	ldr	r3, [pc, #88]	; (800ebe4 <rand+0x5c>)
 800eb8a:	b510      	push	{r4, lr}
 800eb8c:	681c      	ldr	r4, [r3, #0]
 800eb8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800eb90:	b9b3      	cbnz	r3, 800ebc0 <rand+0x38>
 800eb92:	2018      	movs	r0, #24
 800eb94:	f000 fa30 	bl	800eff8 <malloc>
 800eb98:	4602      	mov	r2, r0
 800eb9a:	6320      	str	r0, [r4, #48]	; 0x30
 800eb9c:	b920      	cbnz	r0, 800eba8 <rand+0x20>
 800eb9e:	4b12      	ldr	r3, [pc, #72]	; (800ebe8 <rand+0x60>)
 800eba0:	4812      	ldr	r0, [pc, #72]	; (800ebec <rand+0x64>)
 800eba2:	2152      	movs	r1, #82	; 0x52
 800eba4:	f000 f9be 	bl	800ef24 <__assert_func>
 800eba8:	4911      	ldr	r1, [pc, #68]	; (800ebf0 <rand+0x68>)
 800ebaa:	4b12      	ldr	r3, [pc, #72]	; (800ebf4 <rand+0x6c>)
 800ebac:	e9c0 1300 	strd	r1, r3, [r0]
 800ebb0:	4b11      	ldr	r3, [pc, #68]	; (800ebf8 <rand+0x70>)
 800ebb2:	6083      	str	r3, [r0, #8]
 800ebb4:	230b      	movs	r3, #11
 800ebb6:	8183      	strh	r3, [r0, #12]
 800ebb8:	2100      	movs	r1, #0
 800ebba:	2001      	movs	r0, #1
 800ebbc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ebc0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ebc2:	480e      	ldr	r0, [pc, #56]	; (800ebfc <rand+0x74>)
 800ebc4:	690b      	ldr	r3, [r1, #16]
 800ebc6:	694c      	ldr	r4, [r1, #20]
 800ebc8:	4a0d      	ldr	r2, [pc, #52]	; (800ec00 <rand+0x78>)
 800ebca:	4358      	muls	r0, r3
 800ebcc:	fb02 0004 	mla	r0, r2, r4, r0
 800ebd0:	fba3 3202 	umull	r3, r2, r3, r2
 800ebd4:	3301      	adds	r3, #1
 800ebd6:	eb40 0002 	adc.w	r0, r0, r2
 800ebda:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800ebde:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ebe2:	bd10      	pop	{r4, pc}
 800ebe4:	200001a0 	.word	0x200001a0
 800ebe8:	08011938 	.word	0x08011938
 800ebec:	0801194f 	.word	0x0801194f
 800ebf0:	abcd330e 	.word	0xabcd330e
 800ebf4:	e66d1234 	.word	0xe66d1234
 800ebf8:	0005deec 	.word	0x0005deec
 800ebfc:	5851f42d 	.word	0x5851f42d
 800ec00:	4c957f2d 	.word	0x4c957f2d

0800ec04 <std>:
 800ec04:	2300      	movs	r3, #0
 800ec06:	b510      	push	{r4, lr}
 800ec08:	4604      	mov	r4, r0
 800ec0a:	e9c0 3300 	strd	r3, r3, [r0]
 800ec0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ec12:	6083      	str	r3, [r0, #8]
 800ec14:	8181      	strh	r1, [r0, #12]
 800ec16:	6643      	str	r3, [r0, #100]	; 0x64
 800ec18:	81c2      	strh	r2, [r0, #14]
 800ec1a:	6183      	str	r3, [r0, #24]
 800ec1c:	4619      	mov	r1, r3
 800ec1e:	2208      	movs	r2, #8
 800ec20:	305c      	adds	r0, #92	; 0x5c
 800ec22:	f000 f8f4 	bl	800ee0e <memset>
 800ec26:	4b0d      	ldr	r3, [pc, #52]	; (800ec5c <std+0x58>)
 800ec28:	6263      	str	r3, [r4, #36]	; 0x24
 800ec2a:	4b0d      	ldr	r3, [pc, #52]	; (800ec60 <std+0x5c>)
 800ec2c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ec2e:	4b0d      	ldr	r3, [pc, #52]	; (800ec64 <std+0x60>)
 800ec30:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ec32:	4b0d      	ldr	r3, [pc, #52]	; (800ec68 <std+0x64>)
 800ec34:	6323      	str	r3, [r4, #48]	; 0x30
 800ec36:	4b0d      	ldr	r3, [pc, #52]	; (800ec6c <std+0x68>)
 800ec38:	6224      	str	r4, [r4, #32]
 800ec3a:	429c      	cmp	r4, r3
 800ec3c:	d006      	beq.n	800ec4c <std+0x48>
 800ec3e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ec42:	4294      	cmp	r4, r2
 800ec44:	d002      	beq.n	800ec4c <std+0x48>
 800ec46:	33d0      	adds	r3, #208	; 0xd0
 800ec48:	429c      	cmp	r4, r3
 800ec4a:	d105      	bne.n	800ec58 <std+0x54>
 800ec4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ec50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec54:	f000 b954 	b.w	800ef00 <__retarget_lock_init_recursive>
 800ec58:	bd10      	pop	{r4, pc}
 800ec5a:	bf00      	nop
 800ec5c:	0800ed89 	.word	0x0800ed89
 800ec60:	0800edab 	.word	0x0800edab
 800ec64:	0800ede3 	.word	0x0800ede3
 800ec68:	0800ee07 	.word	0x0800ee07
 800ec6c:	2000a580 	.word	0x2000a580

0800ec70 <stdio_exit_handler>:
 800ec70:	4a02      	ldr	r2, [pc, #8]	; (800ec7c <stdio_exit_handler+0xc>)
 800ec72:	4903      	ldr	r1, [pc, #12]	; (800ec80 <stdio_exit_handler+0x10>)
 800ec74:	4803      	ldr	r0, [pc, #12]	; (800ec84 <stdio_exit_handler+0x14>)
 800ec76:	f000 b869 	b.w	800ed4c <_fwalk_sglue>
 800ec7a:	bf00      	nop
 800ec7c:	20000148 	.word	0x20000148
 800ec80:	0800f26d 	.word	0x0800f26d
 800ec84:	20000154 	.word	0x20000154

0800ec88 <cleanup_stdio>:
 800ec88:	6841      	ldr	r1, [r0, #4]
 800ec8a:	4b0c      	ldr	r3, [pc, #48]	; (800ecbc <cleanup_stdio+0x34>)
 800ec8c:	4299      	cmp	r1, r3
 800ec8e:	b510      	push	{r4, lr}
 800ec90:	4604      	mov	r4, r0
 800ec92:	d001      	beq.n	800ec98 <cleanup_stdio+0x10>
 800ec94:	f000 faea 	bl	800f26c <_fflush_r>
 800ec98:	68a1      	ldr	r1, [r4, #8]
 800ec9a:	4b09      	ldr	r3, [pc, #36]	; (800ecc0 <cleanup_stdio+0x38>)
 800ec9c:	4299      	cmp	r1, r3
 800ec9e:	d002      	beq.n	800eca6 <cleanup_stdio+0x1e>
 800eca0:	4620      	mov	r0, r4
 800eca2:	f000 fae3 	bl	800f26c <_fflush_r>
 800eca6:	68e1      	ldr	r1, [r4, #12]
 800eca8:	4b06      	ldr	r3, [pc, #24]	; (800ecc4 <cleanup_stdio+0x3c>)
 800ecaa:	4299      	cmp	r1, r3
 800ecac:	d004      	beq.n	800ecb8 <cleanup_stdio+0x30>
 800ecae:	4620      	mov	r0, r4
 800ecb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecb4:	f000 bada 	b.w	800f26c <_fflush_r>
 800ecb8:	bd10      	pop	{r4, pc}
 800ecba:	bf00      	nop
 800ecbc:	2000a580 	.word	0x2000a580
 800ecc0:	2000a5e8 	.word	0x2000a5e8
 800ecc4:	2000a650 	.word	0x2000a650

0800ecc8 <global_stdio_init.part.0>:
 800ecc8:	b510      	push	{r4, lr}
 800ecca:	4b0b      	ldr	r3, [pc, #44]	; (800ecf8 <global_stdio_init.part.0+0x30>)
 800eccc:	4c0b      	ldr	r4, [pc, #44]	; (800ecfc <global_stdio_init.part.0+0x34>)
 800ecce:	4a0c      	ldr	r2, [pc, #48]	; (800ed00 <global_stdio_init.part.0+0x38>)
 800ecd0:	601a      	str	r2, [r3, #0]
 800ecd2:	4620      	mov	r0, r4
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	2104      	movs	r1, #4
 800ecd8:	f7ff ff94 	bl	800ec04 <std>
 800ecdc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ece0:	2201      	movs	r2, #1
 800ece2:	2109      	movs	r1, #9
 800ece4:	f7ff ff8e 	bl	800ec04 <std>
 800ece8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ecec:	2202      	movs	r2, #2
 800ecee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecf2:	2112      	movs	r1, #18
 800ecf4:	f7ff bf86 	b.w	800ec04 <std>
 800ecf8:	2000a6b8 	.word	0x2000a6b8
 800ecfc:	2000a580 	.word	0x2000a580
 800ed00:	0800ec71 	.word	0x0800ec71

0800ed04 <__sfp_lock_acquire>:
 800ed04:	4801      	ldr	r0, [pc, #4]	; (800ed0c <__sfp_lock_acquire+0x8>)
 800ed06:	f000 b8fc 	b.w	800ef02 <__retarget_lock_acquire_recursive>
 800ed0a:	bf00      	nop
 800ed0c:	2000a6c1 	.word	0x2000a6c1

0800ed10 <__sfp_lock_release>:
 800ed10:	4801      	ldr	r0, [pc, #4]	; (800ed18 <__sfp_lock_release+0x8>)
 800ed12:	f000 b8f7 	b.w	800ef04 <__retarget_lock_release_recursive>
 800ed16:	bf00      	nop
 800ed18:	2000a6c1 	.word	0x2000a6c1

0800ed1c <__sinit>:
 800ed1c:	b510      	push	{r4, lr}
 800ed1e:	4604      	mov	r4, r0
 800ed20:	f7ff fff0 	bl	800ed04 <__sfp_lock_acquire>
 800ed24:	6a23      	ldr	r3, [r4, #32]
 800ed26:	b11b      	cbz	r3, 800ed30 <__sinit+0x14>
 800ed28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed2c:	f7ff bff0 	b.w	800ed10 <__sfp_lock_release>
 800ed30:	4b04      	ldr	r3, [pc, #16]	; (800ed44 <__sinit+0x28>)
 800ed32:	6223      	str	r3, [r4, #32]
 800ed34:	4b04      	ldr	r3, [pc, #16]	; (800ed48 <__sinit+0x2c>)
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d1f5      	bne.n	800ed28 <__sinit+0xc>
 800ed3c:	f7ff ffc4 	bl	800ecc8 <global_stdio_init.part.0>
 800ed40:	e7f2      	b.n	800ed28 <__sinit+0xc>
 800ed42:	bf00      	nop
 800ed44:	0800ec89 	.word	0x0800ec89
 800ed48:	2000a6b8 	.word	0x2000a6b8

0800ed4c <_fwalk_sglue>:
 800ed4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed50:	4607      	mov	r7, r0
 800ed52:	4688      	mov	r8, r1
 800ed54:	4614      	mov	r4, r2
 800ed56:	2600      	movs	r6, #0
 800ed58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed5c:	f1b9 0901 	subs.w	r9, r9, #1
 800ed60:	d505      	bpl.n	800ed6e <_fwalk_sglue+0x22>
 800ed62:	6824      	ldr	r4, [r4, #0]
 800ed64:	2c00      	cmp	r4, #0
 800ed66:	d1f7      	bne.n	800ed58 <_fwalk_sglue+0xc>
 800ed68:	4630      	mov	r0, r6
 800ed6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed6e:	89ab      	ldrh	r3, [r5, #12]
 800ed70:	2b01      	cmp	r3, #1
 800ed72:	d907      	bls.n	800ed84 <_fwalk_sglue+0x38>
 800ed74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed78:	3301      	adds	r3, #1
 800ed7a:	d003      	beq.n	800ed84 <_fwalk_sglue+0x38>
 800ed7c:	4629      	mov	r1, r5
 800ed7e:	4638      	mov	r0, r7
 800ed80:	47c0      	blx	r8
 800ed82:	4306      	orrs	r6, r0
 800ed84:	3568      	adds	r5, #104	; 0x68
 800ed86:	e7e9      	b.n	800ed5c <_fwalk_sglue+0x10>

0800ed88 <__sread>:
 800ed88:	b510      	push	{r4, lr}
 800ed8a:	460c      	mov	r4, r1
 800ed8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed90:	f000 f868 	bl	800ee64 <_read_r>
 800ed94:	2800      	cmp	r0, #0
 800ed96:	bfab      	itete	ge
 800ed98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ed9a:	89a3      	ldrhlt	r3, [r4, #12]
 800ed9c:	181b      	addge	r3, r3, r0
 800ed9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eda2:	bfac      	ite	ge
 800eda4:	6563      	strge	r3, [r4, #84]	; 0x54
 800eda6:	81a3      	strhlt	r3, [r4, #12]
 800eda8:	bd10      	pop	{r4, pc}

0800edaa <__swrite>:
 800edaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edae:	461f      	mov	r7, r3
 800edb0:	898b      	ldrh	r3, [r1, #12]
 800edb2:	05db      	lsls	r3, r3, #23
 800edb4:	4605      	mov	r5, r0
 800edb6:	460c      	mov	r4, r1
 800edb8:	4616      	mov	r6, r2
 800edba:	d505      	bpl.n	800edc8 <__swrite+0x1e>
 800edbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edc0:	2302      	movs	r3, #2
 800edc2:	2200      	movs	r2, #0
 800edc4:	f000 f83c 	bl	800ee40 <_lseek_r>
 800edc8:	89a3      	ldrh	r3, [r4, #12]
 800edca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800edce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800edd2:	81a3      	strh	r3, [r4, #12]
 800edd4:	4632      	mov	r2, r6
 800edd6:	463b      	mov	r3, r7
 800edd8:	4628      	mov	r0, r5
 800edda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800edde:	f000 b853 	b.w	800ee88 <_write_r>

0800ede2 <__sseek>:
 800ede2:	b510      	push	{r4, lr}
 800ede4:	460c      	mov	r4, r1
 800ede6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edea:	f000 f829 	bl	800ee40 <_lseek_r>
 800edee:	1c43      	adds	r3, r0, #1
 800edf0:	89a3      	ldrh	r3, [r4, #12]
 800edf2:	bf15      	itete	ne
 800edf4:	6560      	strne	r0, [r4, #84]	; 0x54
 800edf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800edfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800edfe:	81a3      	strheq	r3, [r4, #12]
 800ee00:	bf18      	it	ne
 800ee02:	81a3      	strhne	r3, [r4, #12]
 800ee04:	bd10      	pop	{r4, pc}

0800ee06 <__sclose>:
 800ee06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee0a:	f000 b809 	b.w	800ee20 <_close_r>

0800ee0e <memset>:
 800ee0e:	4402      	add	r2, r0
 800ee10:	4603      	mov	r3, r0
 800ee12:	4293      	cmp	r3, r2
 800ee14:	d100      	bne.n	800ee18 <memset+0xa>
 800ee16:	4770      	bx	lr
 800ee18:	f803 1b01 	strb.w	r1, [r3], #1
 800ee1c:	e7f9      	b.n	800ee12 <memset+0x4>
	...

0800ee20 <_close_r>:
 800ee20:	b538      	push	{r3, r4, r5, lr}
 800ee22:	4d06      	ldr	r5, [pc, #24]	; (800ee3c <_close_r+0x1c>)
 800ee24:	2300      	movs	r3, #0
 800ee26:	4604      	mov	r4, r0
 800ee28:	4608      	mov	r0, r1
 800ee2a:	602b      	str	r3, [r5, #0]
 800ee2c:	f7f3 fa2b 	bl	8002286 <_close>
 800ee30:	1c43      	adds	r3, r0, #1
 800ee32:	d102      	bne.n	800ee3a <_close_r+0x1a>
 800ee34:	682b      	ldr	r3, [r5, #0]
 800ee36:	b103      	cbz	r3, 800ee3a <_close_r+0x1a>
 800ee38:	6023      	str	r3, [r4, #0]
 800ee3a:	bd38      	pop	{r3, r4, r5, pc}
 800ee3c:	2000a6bc 	.word	0x2000a6bc

0800ee40 <_lseek_r>:
 800ee40:	b538      	push	{r3, r4, r5, lr}
 800ee42:	4d07      	ldr	r5, [pc, #28]	; (800ee60 <_lseek_r+0x20>)
 800ee44:	4604      	mov	r4, r0
 800ee46:	4608      	mov	r0, r1
 800ee48:	4611      	mov	r1, r2
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	602a      	str	r2, [r5, #0]
 800ee4e:	461a      	mov	r2, r3
 800ee50:	f7f3 fa40 	bl	80022d4 <_lseek>
 800ee54:	1c43      	adds	r3, r0, #1
 800ee56:	d102      	bne.n	800ee5e <_lseek_r+0x1e>
 800ee58:	682b      	ldr	r3, [r5, #0]
 800ee5a:	b103      	cbz	r3, 800ee5e <_lseek_r+0x1e>
 800ee5c:	6023      	str	r3, [r4, #0]
 800ee5e:	bd38      	pop	{r3, r4, r5, pc}
 800ee60:	2000a6bc 	.word	0x2000a6bc

0800ee64 <_read_r>:
 800ee64:	b538      	push	{r3, r4, r5, lr}
 800ee66:	4d07      	ldr	r5, [pc, #28]	; (800ee84 <_read_r+0x20>)
 800ee68:	4604      	mov	r4, r0
 800ee6a:	4608      	mov	r0, r1
 800ee6c:	4611      	mov	r1, r2
 800ee6e:	2200      	movs	r2, #0
 800ee70:	602a      	str	r2, [r5, #0]
 800ee72:	461a      	mov	r2, r3
 800ee74:	f7f3 f9ce 	bl	8002214 <_read>
 800ee78:	1c43      	adds	r3, r0, #1
 800ee7a:	d102      	bne.n	800ee82 <_read_r+0x1e>
 800ee7c:	682b      	ldr	r3, [r5, #0]
 800ee7e:	b103      	cbz	r3, 800ee82 <_read_r+0x1e>
 800ee80:	6023      	str	r3, [r4, #0]
 800ee82:	bd38      	pop	{r3, r4, r5, pc}
 800ee84:	2000a6bc 	.word	0x2000a6bc

0800ee88 <_write_r>:
 800ee88:	b538      	push	{r3, r4, r5, lr}
 800ee8a:	4d07      	ldr	r5, [pc, #28]	; (800eea8 <_write_r+0x20>)
 800ee8c:	4604      	mov	r4, r0
 800ee8e:	4608      	mov	r0, r1
 800ee90:	4611      	mov	r1, r2
 800ee92:	2200      	movs	r2, #0
 800ee94:	602a      	str	r2, [r5, #0]
 800ee96:	461a      	mov	r2, r3
 800ee98:	f7f3 f9d9 	bl	800224e <_write>
 800ee9c:	1c43      	adds	r3, r0, #1
 800ee9e:	d102      	bne.n	800eea6 <_write_r+0x1e>
 800eea0:	682b      	ldr	r3, [r5, #0]
 800eea2:	b103      	cbz	r3, 800eea6 <_write_r+0x1e>
 800eea4:	6023      	str	r3, [r4, #0]
 800eea6:	bd38      	pop	{r3, r4, r5, pc}
 800eea8:	2000a6bc 	.word	0x2000a6bc

0800eeac <__errno>:
 800eeac:	4b01      	ldr	r3, [pc, #4]	; (800eeb4 <__errno+0x8>)
 800eeae:	6818      	ldr	r0, [r3, #0]
 800eeb0:	4770      	bx	lr
 800eeb2:	bf00      	nop
 800eeb4:	200001a0 	.word	0x200001a0

0800eeb8 <__libc_init_array>:
 800eeb8:	b570      	push	{r4, r5, r6, lr}
 800eeba:	4d0d      	ldr	r5, [pc, #52]	; (800eef0 <__libc_init_array+0x38>)
 800eebc:	4c0d      	ldr	r4, [pc, #52]	; (800eef4 <__libc_init_array+0x3c>)
 800eebe:	1b64      	subs	r4, r4, r5
 800eec0:	10a4      	asrs	r4, r4, #2
 800eec2:	2600      	movs	r6, #0
 800eec4:	42a6      	cmp	r6, r4
 800eec6:	d109      	bne.n	800eedc <__libc_init_array+0x24>
 800eec8:	4d0b      	ldr	r5, [pc, #44]	; (800eef8 <__libc_init_array+0x40>)
 800eeca:	4c0c      	ldr	r4, [pc, #48]	; (800eefc <__libc_init_array+0x44>)
 800eecc:	f000 ff56 	bl	800fd7c <_init>
 800eed0:	1b64      	subs	r4, r4, r5
 800eed2:	10a4      	asrs	r4, r4, #2
 800eed4:	2600      	movs	r6, #0
 800eed6:	42a6      	cmp	r6, r4
 800eed8:	d105      	bne.n	800eee6 <__libc_init_array+0x2e>
 800eeda:	bd70      	pop	{r4, r5, r6, pc}
 800eedc:	f855 3b04 	ldr.w	r3, [r5], #4
 800eee0:	4798      	blx	r3
 800eee2:	3601      	adds	r6, #1
 800eee4:	e7ee      	b.n	800eec4 <__libc_init_array+0xc>
 800eee6:	f855 3b04 	ldr.w	r3, [r5], #4
 800eeea:	4798      	blx	r3
 800eeec:	3601      	adds	r6, #1
 800eeee:	e7f2      	b.n	800eed6 <__libc_init_array+0x1e>
 800eef0:	08011a20 	.word	0x08011a20
 800eef4:	08011a20 	.word	0x08011a20
 800eef8:	08011a20 	.word	0x08011a20
 800eefc:	08011a24 	.word	0x08011a24

0800ef00 <__retarget_lock_init_recursive>:
 800ef00:	4770      	bx	lr

0800ef02 <__retarget_lock_acquire_recursive>:
 800ef02:	4770      	bx	lr

0800ef04 <__retarget_lock_release_recursive>:
 800ef04:	4770      	bx	lr

0800ef06 <memcpy>:
 800ef06:	440a      	add	r2, r1
 800ef08:	4291      	cmp	r1, r2
 800ef0a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef0e:	d100      	bne.n	800ef12 <memcpy+0xc>
 800ef10:	4770      	bx	lr
 800ef12:	b510      	push	{r4, lr}
 800ef14:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef18:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef1c:	4291      	cmp	r1, r2
 800ef1e:	d1f9      	bne.n	800ef14 <memcpy+0xe>
 800ef20:	bd10      	pop	{r4, pc}
	...

0800ef24 <__assert_func>:
 800ef24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ef26:	4614      	mov	r4, r2
 800ef28:	461a      	mov	r2, r3
 800ef2a:	4b09      	ldr	r3, [pc, #36]	; (800ef50 <__assert_func+0x2c>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	4605      	mov	r5, r0
 800ef30:	68d8      	ldr	r0, [r3, #12]
 800ef32:	b14c      	cbz	r4, 800ef48 <__assert_func+0x24>
 800ef34:	4b07      	ldr	r3, [pc, #28]	; (800ef54 <__assert_func+0x30>)
 800ef36:	9100      	str	r1, [sp, #0]
 800ef38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ef3c:	4906      	ldr	r1, [pc, #24]	; (800ef58 <__assert_func+0x34>)
 800ef3e:	462b      	mov	r3, r5
 800ef40:	f000 f9bc 	bl	800f2bc <fiprintf>
 800ef44:	f000 f9dc 	bl	800f300 <abort>
 800ef48:	4b04      	ldr	r3, [pc, #16]	; (800ef5c <__assert_func+0x38>)
 800ef4a:	461c      	mov	r4, r3
 800ef4c:	e7f3      	b.n	800ef36 <__assert_func+0x12>
 800ef4e:	bf00      	nop
 800ef50:	200001a0 	.word	0x200001a0
 800ef54:	080119a7 	.word	0x080119a7
 800ef58:	080119b4 	.word	0x080119b4
 800ef5c:	080119e2 	.word	0x080119e2

0800ef60 <_free_r>:
 800ef60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef62:	2900      	cmp	r1, #0
 800ef64:	d044      	beq.n	800eff0 <_free_r+0x90>
 800ef66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef6a:	9001      	str	r0, [sp, #4]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	f1a1 0404 	sub.w	r4, r1, #4
 800ef72:	bfb8      	it	lt
 800ef74:	18e4      	addlt	r4, r4, r3
 800ef76:	f000 f8e7 	bl	800f148 <__malloc_lock>
 800ef7a:	4a1e      	ldr	r2, [pc, #120]	; (800eff4 <_free_r+0x94>)
 800ef7c:	9801      	ldr	r0, [sp, #4]
 800ef7e:	6813      	ldr	r3, [r2, #0]
 800ef80:	b933      	cbnz	r3, 800ef90 <_free_r+0x30>
 800ef82:	6063      	str	r3, [r4, #4]
 800ef84:	6014      	str	r4, [r2, #0]
 800ef86:	b003      	add	sp, #12
 800ef88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef8c:	f000 b8e2 	b.w	800f154 <__malloc_unlock>
 800ef90:	42a3      	cmp	r3, r4
 800ef92:	d908      	bls.n	800efa6 <_free_r+0x46>
 800ef94:	6825      	ldr	r5, [r4, #0]
 800ef96:	1961      	adds	r1, r4, r5
 800ef98:	428b      	cmp	r3, r1
 800ef9a:	bf01      	itttt	eq
 800ef9c:	6819      	ldreq	r1, [r3, #0]
 800ef9e:	685b      	ldreq	r3, [r3, #4]
 800efa0:	1949      	addeq	r1, r1, r5
 800efa2:	6021      	streq	r1, [r4, #0]
 800efa4:	e7ed      	b.n	800ef82 <_free_r+0x22>
 800efa6:	461a      	mov	r2, r3
 800efa8:	685b      	ldr	r3, [r3, #4]
 800efaa:	b10b      	cbz	r3, 800efb0 <_free_r+0x50>
 800efac:	42a3      	cmp	r3, r4
 800efae:	d9fa      	bls.n	800efa6 <_free_r+0x46>
 800efb0:	6811      	ldr	r1, [r2, #0]
 800efb2:	1855      	adds	r5, r2, r1
 800efb4:	42a5      	cmp	r5, r4
 800efb6:	d10b      	bne.n	800efd0 <_free_r+0x70>
 800efb8:	6824      	ldr	r4, [r4, #0]
 800efba:	4421      	add	r1, r4
 800efbc:	1854      	adds	r4, r2, r1
 800efbe:	42a3      	cmp	r3, r4
 800efc0:	6011      	str	r1, [r2, #0]
 800efc2:	d1e0      	bne.n	800ef86 <_free_r+0x26>
 800efc4:	681c      	ldr	r4, [r3, #0]
 800efc6:	685b      	ldr	r3, [r3, #4]
 800efc8:	6053      	str	r3, [r2, #4]
 800efca:	440c      	add	r4, r1
 800efcc:	6014      	str	r4, [r2, #0]
 800efce:	e7da      	b.n	800ef86 <_free_r+0x26>
 800efd0:	d902      	bls.n	800efd8 <_free_r+0x78>
 800efd2:	230c      	movs	r3, #12
 800efd4:	6003      	str	r3, [r0, #0]
 800efd6:	e7d6      	b.n	800ef86 <_free_r+0x26>
 800efd8:	6825      	ldr	r5, [r4, #0]
 800efda:	1961      	adds	r1, r4, r5
 800efdc:	428b      	cmp	r3, r1
 800efde:	bf04      	itt	eq
 800efe0:	6819      	ldreq	r1, [r3, #0]
 800efe2:	685b      	ldreq	r3, [r3, #4]
 800efe4:	6063      	str	r3, [r4, #4]
 800efe6:	bf04      	itt	eq
 800efe8:	1949      	addeq	r1, r1, r5
 800efea:	6021      	streq	r1, [r4, #0]
 800efec:	6054      	str	r4, [r2, #4]
 800efee:	e7ca      	b.n	800ef86 <_free_r+0x26>
 800eff0:	b003      	add	sp, #12
 800eff2:	bd30      	pop	{r4, r5, pc}
 800eff4:	2000a6c4 	.word	0x2000a6c4

0800eff8 <malloc>:
 800eff8:	4b02      	ldr	r3, [pc, #8]	; (800f004 <malloc+0xc>)
 800effa:	4601      	mov	r1, r0
 800effc:	6818      	ldr	r0, [r3, #0]
 800effe:	f000 b823 	b.w	800f048 <_malloc_r>
 800f002:	bf00      	nop
 800f004:	200001a0 	.word	0x200001a0

0800f008 <sbrk_aligned>:
 800f008:	b570      	push	{r4, r5, r6, lr}
 800f00a:	4e0e      	ldr	r6, [pc, #56]	; (800f044 <sbrk_aligned+0x3c>)
 800f00c:	460c      	mov	r4, r1
 800f00e:	6831      	ldr	r1, [r6, #0]
 800f010:	4605      	mov	r5, r0
 800f012:	b911      	cbnz	r1, 800f01a <sbrk_aligned+0x12>
 800f014:	f000 f964 	bl	800f2e0 <_sbrk_r>
 800f018:	6030      	str	r0, [r6, #0]
 800f01a:	4621      	mov	r1, r4
 800f01c:	4628      	mov	r0, r5
 800f01e:	f000 f95f 	bl	800f2e0 <_sbrk_r>
 800f022:	1c43      	adds	r3, r0, #1
 800f024:	d00a      	beq.n	800f03c <sbrk_aligned+0x34>
 800f026:	1cc4      	adds	r4, r0, #3
 800f028:	f024 0403 	bic.w	r4, r4, #3
 800f02c:	42a0      	cmp	r0, r4
 800f02e:	d007      	beq.n	800f040 <sbrk_aligned+0x38>
 800f030:	1a21      	subs	r1, r4, r0
 800f032:	4628      	mov	r0, r5
 800f034:	f000 f954 	bl	800f2e0 <_sbrk_r>
 800f038:	3001      	adds	r0, #1
 800f03a:	d101      	bne.n	800f040 <sbrk_aligned+0x38>
 800f03c:	f04f 34ff 	mov.w	r4, #4294967295
 800f040:	4620      	mov	r0, r4
 800f042:	bd70      	pop	{r4, r5, r6, pc}
 800f044:	2000a6c8 	.word	0x2000a6c8

0800f048 <_malloc_r>:
 800f048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f04c:	1ccd      	adds	r5, r1, #3
 800f04e:	f025 0503 	bic.w	r5, r5, #3
 800f052:	3508      	adds	r5, #8
 800f054:	2d0c      	cmp	r5, #12
 800f056:	bf38      	it	cc
 800f058:	250c      	movcc	r5, #12
 800f05a:	2d00      	cmp	r5, #0
 800f05c:	4607      	mov	r7, r0
 800f05e:	db01      	blt.n	800f064 <_malloc_r+0x1c>
 800f060:	42a9      	cmp	r1, r5
 800f062:	d905      	bls.n	800f070 <_malloc_r+0x28>
 800f064:	230c      	movs	r3, #12
 800f066:	603b      	str	r3, [r7, #0]
 800f068:	2600      	movs	r6, #0
 800f06a:	4630      	mov	r0, r6
 800f06c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f070:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f144 <_malloc_r+0xfc>
 800f074:	f000 f868 	bl	800f148 <__malloc_lock>
 800f078:	f8d8 3000 	ldr.w	r3, [r8]
 800f07c:	461c      	mov	r4, r3
 800f07e:	bb5c      	cbnz	r4, 800f0d8 <_malloc_r+0x90>
 800f080:	4629      	mov	r1, r5
 800f082:	4638      	mov	r0, r7
 800f084:	f7ff ffc0 	bl	800f008 <sbrk_aligned>
 800f088:	1c43      	adds	r3, r0, #1
 800f08a:	4604      	mov	r4, r0
 800f08c:	d155      	bne.n	800f13a <_malloc_r+0xf2>
 800f08e:	f8d8 4000 	ldr.w	r4, [r8]
 800f092:	4626      	mov	r6, r4
 800f094:	2e00      	cmp	r6, #0
 800f096:	d145      	bne.n	800f124 <_malloc_r+0xdc>
 800f098:	2c00      	cmp	r4, #0
 800f09a:	d048      	beq.n	800f12e <_malloc_r+0xe6>
 800f09c:	6823      	ldr	r3, [r4, #0]
 800f09e:	4631      	mov	r1, r6
 800f0a0:	4638      	mov	r0, r7
 800f0a2:	eb04 0903 	add.w	r9, r4, r3
 800f0a6:	f000 f91b 	bl	800f2e0 <_sbrk_r>
 800f0aa:	4581      	cmp	r9, r0
 800f0ac:	d13f      	bne.n	800f12e <_malloc_r+0xe6>
 800f0ae:	6821      	ldr	r1, [r4, #0]
 800f0b0:	1a6d      	subs	r5, r5, r1
 800f0b2:	4629      	mov	r1, r5
 800f0b4:	4638      	mov	r0, r7
 800f0b6:	f7ff ffa7 	bl	800f008 <sbrk_aligned>
 800f0ba:	3001      	adds	r0, #1
 800f0bc:	d037      	beq.n	800f12e <_malloc_r+0xe6>
 800f0be:	6823      	ldr	r3, [r4, #0]
 800f0c0:	442b      	add	r3, r5
 800f0c2:	6023      	str	r3, [r4, #0]
 800f0c4:	f8d8 3000 	ldr.w	r3, [r8]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d038      	beq.n	800f13e <_malloc_r+0xf6>
 800f0cc:	685a      	ldr	r2, [r3, #4]
 800f0ce:	42a2      	cmp	r2, r4
 800f0d0:	d12b      	bne.n	800f12a <_malloc_r+0xe2>
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	605a      	str	r2, [r3, #4]
 800f0d6:	e00f      	b.n	800f0f8 <_malloc_r+0xb0>
 800f0d8:	6822      	ldr	r2, [r4, #0]
 800f0da:	1b52      	subs	r2, r2, r5
 800f0dc:	d41f      	bmi.n	800f11e <_malloc_r+0xd6>
 800f0de:	2a0b      	cmp	r2, #11
 800f0e0:	d917      	bls.n	800f112 <_malloc_r+0xca>
 800f0e2:	1961      	adds	r1, r4, r5
 800f0e4:	42a3      	cmp	r3, r4
 800f0e6:	6025      	str	r5, [r4, #0]
 800f0e8:	bf18      	it	ne
 800f0ea:	6059      	strne	r1, [r3, #4]
 800f0ec:	6863      	ldr	r3, [r4, #4]
 800f0ee:	bf08      	it	eq
 800f0f0:	f8c8 1000 	streq.w	r1, [r8]
 800f0f4:	5162      	str	r2, [r4, r5]
 800f0f6:	604b      	str	r3, [r1, #4]
 800f0f8:	4638      	mov	r0, r7
 800f0fa:	f104 060b 	add.w	r6, r4, #11
 800f0fe:	f000 f829 	bl	800f154 <__malloc_unlock>
 800f102:	f026 0607 	bic.w	r6, r6, #7
 800f106:	1d23      	adds	r3, r4, #4
 800f108:	1af2      	subs	r2, r6, r3
 800f10a:	d0ae      	beq.n	800f06a <_malloc_r+0x22>
 800f10c:	1b9b      	subs	r3, r3, r6
 800f10e:	50a3      	str	r3, [r4, r2]
 800f110:	e7ab      	b.n	800f06a <_malloc_r+0x22>
 800f112:	42a3      	cmp	r3, r4
 800f114:	6862      	ldr	r2, [r4, #4]
 800f116:	d1dd      	bne.n	800f0d4 <_malloc_r+0x8c>
 800f118:	f8c8 2000 	str.w	r2, [r8]
 800f11c:	e7ec      	b.n	800f0f8 <_malloc_r+0xb0>
 800f11e:	4623      	mov	r3, r4
 800f120:	6864      	ldr	r4, [r4, #4]
 800f122:	e7ac      	b.n	800f07e <_malloc_r+0x36>
 800f124:	4634      	mov	r4, r6
 800f126:	6876      	ldr	r6, [r6, #4]
 800f128:	e7b4      	b.n	800f094 <_malloc_r+0x4c>
 800f12a:	4613      	mov	r3, r2
 800f12c:	e7cc      	b.n	800f0c8 <_malloc_r+0x80>
 800f12e:	230c      	movs	r3, #12
 800f130:	603b      	str	r3, [r7, #0]
 800f132:	4638      	mov	r0, r7
 800f134:	f000 f80e 	bl	800f154 <__malloc_unlock>
 800f138:	e797      	b.n	800f06a <_malloc_r+0x22>
 800f13a:	6025      	str	r5, [r4, #0]
 800f13c:	e7dc      	b.n	800f0f8 <_malloc_r+0xb0>
 800f13e:	605b      	str	r3, [r3, #4]
 800f140:	deff      	udf	#255	; 0xff
 800f142:	bf00      	nop
 800f144:	2000a6c4 	.word	0x2000a6c4

0800f148 <__malloc_lock>:
 800f148:	4801      	ldr	r0, [pc, #4]	; (800f150 <__malloc_lock+0x8>)
 800f14a:	f7ff beda 	b.w	800ef02 <__retarget_lock_acquire_recursive>
 800f14e:	bf00      	nop
 800f150:	2000a6c0 	.word	0x2000a6c0

0800f154 <__malloc_unlock>:
 800f154:	4801      	ldr	r0, [pc, #4]	; (800f15c <__malloc_unlock+0x8>)
 800f156:	f7ff bed5 	b.w	800ef04 <__retarget_lock_release_recursive>
 800f15a:	bf00      	nop
 800f15c:	2000a6c0 	.word	0x2000a6c0

0800f160 <__sflush_r>:
 800f160:	898a      	ldrh	r2, [r1, #12]
 800f162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f166:	4605      	mov	r5, r0
 800f168:	0710      	lsls	r0, r2, #28
 800f16a:	460c      	mov	r4, r1
 800f16c:	d458      	bmi.n	800f220 <__sflush_r+0xc0>
 800f16e:	684b      	ldr	r3, [r1, #4]
 800f170:	2b00      	cmp	r3, #0
 800f172:	dc05      	bgt.n	800f180 <__sflush_r+0x20>
 800f174:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f176:	2b00      	cmp	r3, #0
 800f178:	dc02      	bgt.n	800f180 <__sflush_r+0x20>
 800f17a:	2000      	movs	r0, #0
 800f17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f180:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f182:	2e00      	cmp	r6, #0
 800f184:	d0f9      	beq.n	800f17a <__sflush_r+0x1a>
 800f186:	2300      	movs	r3, #0
 800f188:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f18c:	682f      	ldr	r7, [r5, #0]
 800f18e:	6a21      	ldr	r1, [r4, #32]
 800f190:	602b      	str	r3, [r5, #0]
 800f192:	d032      	beq.n	800f1fa <__sflush_r+0x9a>
 800f194:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f196:	89a3      	ldrh	r3, [r4, #12]
 800f198:	075a      	lsls	r2, r3, #29
 800f19a:	d505      	bpl.n	800f1a8 <__sflush_r+0x48>
 800f19c:	6863      	ldr	r3, [r4, #4]
 800f19e:	1ac0      	subs	r0, r0, r3
 800f1a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f1a2:	b10b      	cbz	r3, 800f1a8 <__sflush_r+0x48>
 800f1a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f1a6:	1ac0      	subs	r0, r0, r3
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	4602      	mov	r2, r0
 800f1ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f1ae:	6a21      	ldr	r1, [r4, #32]
 800f1b0:	4628      	mov	r0, r5
 800f1b2:	47b0      	blx	r6
 800f1b4:	1c43      	adds	r3, r0, #1
 800f1b6:	89a3      	ldrh	r3, [r4, #12]
 800f1b8:	d106      	bne.n	800f1c8 <__sflush_r+0x68>
 800f1ba:	6829      	ldr	r1, [r5, #0]
 800f1bc:	291d      	cmp	r1, #29
 800f1be:	d82b      	bhi.n	800f218 <__sflush_r+0xb8>
 800f1c0:	4a29      	ldr	r2, [pc, #164]	; (800f268 <__sflush_r+0x108>)
 800f1c2:	410a      	asrs	r2, r1
 800f1c4:	07d6      	lsls	r6, r2, #31
 800f1c6:	d427      	bmi.n	800f218 <__sflush_r+0xb8>
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	6062      	str	r2, [r4, #4]
 800f1cc:	04d9      	lsls	r1, r3, #19
 800f1ce:	6922      	ldr	r2, [r4, #16]
 800f1d0:	6022      	str	r2, [r4, #0]
 800f1d2:	d504      	bpl.n	800f1de <__sflush_r+0x7e>
 800f1d4:	1c42      	adds	r2, r0, #1
 800f1d6:	d101      	bne.n	800f1dc <__sflush_r+0x7c>
 800f1d8:	682b      	ldr	r3, [r5, #0]
 800f1da:	b903      	cbnz	r3, 800f1de <__sflush_r+0x7e>
 800f1dc:	6560      	str	r0, [r4, #84]	; 0x54
 800f1de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f1e0:	602f      	str	r7, [r5, #0]
 800f1e2:	2900      	cmp	r1, #0
 800f1e4:	d0c9      	beq.n	800f17a <__sflush_r+0x1a>
 800f1e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f1ea:	4299      	cmp	r1, r3
 800f1ec:	d002      	beq.n	800f1f4 <__sflush_r+0x94>
 800f1ee:	4628      	mov	r0, r5
 800f1f0:	f7ff feb6 	bl	800ef60 <_free_r>
 800f1f4:	2000      	movs	r0, #0
 800f1f6:	6360      	str	r0, [r4, #52]	; 0x34
 800f1f8:	e7c0      	b.n	800f17c <__sflush_r+0x1c>
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	4628      	mov	r0, r5
 800f1fe:	47b0      	blx	r6
 800f200:	1c41      	adds	r1, r0, #1
 800f202:	d1c8      	bne.n	800f196 <__sflush_r+0x36>
 800f204:	682b      	ldr	r3, [r5, #0]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d0c5      	beq.n	800f196 <__sflush_r+0x36>
 800f20a:	2b1d      	cmp	r3, #29
 800f20c:	d001      	beq.n	800f212 <__sflush_r+0xb2>
 800f20e:	2b16      	cmp	r3, #22
 800f210:	d101      	bne.n	800f216 <__sflush_r+0xb6>
 800f212:	602f      	str	r7, [r5, #0]
 800f214:	e7b1      	b.n	800f17a <__sflush_r+0x1a>
 800f216:	89a3      	ldrh	r3, [r4, #12]
 800f218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f21c:	81a3      	strh	r3, [r4, #12]
 800f21e:	e7ad      	b.n	800f17c <__sflush_r+0x1c>
 800f220:	690f      	ldr	r7, [r1, #16]
 800f222:	2f00      	cmp	r7, #0
 800f224:	d0a9      	beq.n	800f17a <__sflush_r+0x1a>
 800f226:	0793      	lsls	r3, r2, #30
 800f228:	680e      	ldr	r6, [r1, #0]
 800f22a:	bf08      	it	eq
 800f22c:	694b      	ldreq	r3, [r1, #20]
 800f22e:	600f      	str	r7, [r1, #0]
 800f230:	bf18      	it	ne
 800f232:	2300      	movne	r3, #0
 800f234:	eba6 0807 	sub.w	r8, r6, r7
 800f238:	608b      	str	r3, [r1, #8]
 800f23a:	f1b8 0f00 	cmp.w	r8, #0
 800f23e:	dd9c      	ble.n	800f17a <__sflush_r+0x1a>
 800f240:	6a21      	ldr	r1, [r4, #32]
 800f242:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f244:	4643      	mov	r3, r8
 800f246:	463a      	mov	r2, r7
 800f248:	4628      	mov	r0, r5
 800f24a:	47b0      	blx	r6
 800f24c:	2800      	cmp	r0, #0
 800f24e:	dc06      	bgt.n	800f25e <__sflush_r+0xfe>
 800f250:	89a3      	ldrh	r3, [r4, #12]
 800f252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f256:	81a3      	strh	r3, [r4, #12]
 800f258:	f04f 30ff 	mov.w	r0, #4294967295
 800f25c:	e78e      	b.n	800f17c <__sflush_r+0x1c>
 800f25e:	4407      	add	r7, r0
 800f260:	eba8 0800 	sub.w	r8, r8, r0
 800f264:	e7e9      	b.n	800f23a <__sflush_r+0xda>
 800f266:	bf00      	nop
 800f268:	dfbffffe 	.word	0xdfbffffe

0800f26c <_fflush_r>:
 800f26c:	b538      	push	{r3, r4, r5, lr}
 800f26e:	690b      	ldr	r3, [r1, #16]
 800f270:	4605      	mov	r5, r0
 800f272:	460c      	mov	r4, r1
 800f274:	b913      	cbnz	r3, 800f27c <_fflush_r+0x10>
 800f276:	2500      	movs	r5, #0
 800f278:	4628      	mov	r0, r5
 800f27a:	bd38      	pop	{r3, r4, r5, pc}
 800f27c:	b118      	cbz	r0, 800f286 <_fflush_r+0x1a>
 800f27e:	6a03      	ldr	r3, [r0, #32]
 800f280:	b90b      	cbnz	r3, 800f286 <_fflush_r+0x1a>
 800f282:	f7ff fd4b 	bl	800ed1c <__sinit>
 800f286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d0f3      	beq.n	800f276 <_fflush_r+0xa>
 800f28e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f290:	07d0      	lsls	r0, r2, #31
 800f292:	d404      	bmi.n	800f29e <_fflush_r+0x32>
 800f294:	0599      	lsls	r1, r3, #22
 800f296:	d402      	bmi.n	800f29e <_fflush_r+0x32>
 800f298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f29a:	f7ff fe32 	bl	800ef02 <__retarget_lock_acquire_recursive>
 800f29e:	4628      	mov	r0, r5
 800f2a0:	4621      	mov	r1, r4
 800f2a2:	f7ff ff5d 	bl	800f160 <__sflush_r>
 800f2a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f2a8:	07da      	lsls	r2, r3, #31
 800f2aa:	4605      	mov	r5, r0
 800f2ac:	d4e4      	bmi.n	800f278 <_fflush_r+0xc>
 800f2ae:	89a3      	ldrh	r3, [r4, #12]
 800f2b0:	059b      	lsls	r3, r3, #22
 800f2b2:	d4e1      	bmi.n	800f278 <_fflush_r+0xc>
 800f2b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2b6:	f7ff fe25 	bl	800ef04 <__retarget_lock_release_recursive>
 800f2ba:	e7dd      	b.n	800f278 <_fflush_r+0xc>

0800f2bc <fiprintf>:
 800f2bc:	b40e      	push	{r1, r2, r3}
 800f2be:	b503      	push	{r0, r1, lr}
 800f2c0:	4601      	mov	r1, r0
 800f2c2:	ab03      	add	r3, sp, #12
 800f2c4:	4805      	ldr	r0, [pc, #20]	; (800f2dc <fiprintf+0x20>)
 800f2c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2ca:	6800      	ldr	r0, [r0, #0]
 800f2cc:	9301      	str	r3, [sp, #4]
 800f2ce:	f000 f847 	bl	800f360 <_vfiprintf_r>
 800f2d2:	b002      	add	sp, #8
 800f2d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2d8:	b003      	add	sp, #12
 800f2da:	4770      	bx	lr
 800f2dc:	200001a0 	.word	0x200001a0

0800f2e0 <_sbrk_r>:
 800f2e0:	b538      	push	{r3, r4, r5, lr}
 800f2e2:	4d06      	ldr	r5, [pc, #24]	; (800f2fc <_sbrk_r+0x1c>)
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	4604      	mov	r4, r0
 800f2e8:	4608      	mov	r0, r1
 800f2ea:	602b      	str	r3, [r5, #0]
 800f2ec:	f7f3 f800 	bl	80022f0 <_sbrk>
 800f2f0:	1c43      	adds	r3, r0, #1
 800f2f2:	d102      	bne.n	800f2fa <_sbrk_r+0x1a>
 800f2f4:	682b      	ldr	r3, [r5, #0]
 800f2f6:	b103      	cbz	r3, 800f2fa <_sbrk_r+0x1a>
 800f2f8:	6023      	str	r3, [r4, #0]
 800f2fa:	bd38      	pop	{r3, r4, r5, pc}
 800f2fc:	2000a6bc 	.word	0x2000a6bc

0800f300 <abort>:
 800f300:	b508      	push	{r3, lr}
 800f302:	2006      	movs	r0, #6
 800f304:	f000 fb94 	bl	800fa30 <raise>
 800f308:	2001      	movs	r0, #1
 800f30a:	f7f2 ff79 	bl	8002200 <_exit>

0800f30e <__sfputc_r>:
 800f30e:	6893      	ldr	r3, [r2, #8]
 800f310:	3b01      	subs	r3, #1
 800f312:	2b00      	cmp	r3, #0
 800f314:	b410      	push	{r4}
 800f316:	6093      	str	r3, [r2, #8]
 800f318:	da08      	bge.n	800f32c <__sfputc_r+0x1e>
 800f31a:	6994      	ldr	r4, [r2, #24]
 800f31c:	42a3      	cmp	r3, r4
 800f31e:	db01      	blt.n	800f324 <__sfputc_r+0x16>
 800f320:	290a      	cmp	r1, #10
 800f322:	d103      	bne.n	800f32c <__sfputc_r+0x1e>
 800f324:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f328:	f000 bac4 	b.w	800f8b4 <__swbuf_r>
 800f32c:	6813      	ldr	r3, [r2, #0]
 800f32e:	1c58      	adds	r0, r3, #1
 800f330:	6010      	str	r0, [r2, #0]
 800f332:	7019      	strb	r1, [r3, #0]
 800f334:	4608      	mov	r0, r1
 800f336:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f33a:	4770      	bx	lr

0800f33c <__sfputs_r>:
 800f33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f33e:	4606      	mov	r6, r0
 800f340:	460f      	mov	r7, r1
 800f342:	4614      	mov	r4, r2
 800f344:	18d5      	adds	r5, r2, r3
 800f346:	42ac      	cmp	r4, r5
 800f348:	d101      	bne.n	800f34e <__sfputs_r+0x12>
 800f34a:	2000      	movs	r0, #0
 800f34c:	e007      	b.n	800f35e <__sfputs_r+0x22>
 800f34e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f352:	463a      	mov	r2, r7
 800f354:	4630      	mov	r0, r6
 800f356:	f7ff ffda 	bl	800f30e <__sfputc_r>
 800f35a:	1c43      	adds	r3, r0, #1
 800f35c:	d1f3      	bne.n	800f346 <__sfputs_r+0xa>
 800f35e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f360 <_vfiprintf_r>:
 800f360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f364:	460d      	mov	r5, r1
 800f366:	b09d      	sub	sp, #116	; 0x74
 800f368:	4614      	mov	r4, r2
 800f36a:	4698      	mov	r8, r3
 800f36c:	4606      	mov	r6, r0
 800f36e:	b118      	cbz	r0, 800f378 <_vfiprintf_r+0x18>
 800f370:	6a03      	ldr	r3, [r0, #32]
 800f372:	b90b      	cbnz	r3, 800f378 <_vfiprintf_r+0x18>
 800f374:	f7ff fcd2 	bl	800ed1c <__sinit>
 800f378:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f37a:	07d9      	lsls	r1, r3, #31
 800f37c:	d405      	bmi.n	800f38a <_vfiprintf_r+0x2a>
 800f37e:	89ab      	ldrh	r3, [r5, #12]
 800f380:	059a      	lsls	r2, r3, #22
 800f382:	d402      	bmi.n	800f38a <_vfiprintf_r+0x2a>
 800f384:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f386:	f7ff fdbc 	bl	800ef02 <__retarget_lock_acquire_recursive>
 800f38a:	89ab      	ldrh	r3, [r5, #12]
 800f38c:	071b      	lsls	r3, r3, #28
 800f38e:	d501      	bpl.n	800f394 <_vfiprintf_r+0x34>
 800f390:	692b      	ldr	r3, [r5, #16]
 800f392:	b99b      	cbnz	r3, 800f3bc <_vfiprintf_r+0x5c>
 800f394:	4629      	mov	r1, r5
 800f396:	4630      	mov	r0, r6
 800f398:	f000 faca 	bl	800f930 <__swsetup_r>
 800f39c:	b170      	cbz	r0, 800f3bc <_vfiprintf_r+0x5c>
 800f39e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f3a0:	07dc      	lsls	r4, r3, #31
 800f3a2:	d504      	bpl.n	800f3ae <_vfiprintf_r+0x4e>
 800f3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f3a8:	b01d      	add	sp, #116	; 0x74
 800f3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3ae:	89ab      	ldrh	r3, [r5, #12]
 800f3b0:	0598      	lsls	r0, r3, #22
 800f3b2:	d4f7      	bmi.n	800f3a4 <_vfiprintf_r+0x44>
 800f3b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3b6:	f7ff fda5 	bl	800ef04 <__retarget_lock_release_recursive>
 800f3ba:	e7f3      	b.n	800f3a4 <_vfiprintf_r+0x44>
 800f3bc:	2300      	movs	r3, #0
 800f3be:	9309      	str	r3, [sp, #36]	; 0x24
 800f3c0:	2320      	movs	r3, #32
 800f3c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f3c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3ca:	2330      	movs	r3, #48	; 0x30
 800f3cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f580 <_vfiprintf_r+0x220>
 800f3d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f3d4:	f04f 0901 	mov.w	r9, #1
 800f3d8:	4623      	mov	r3, r4
 800f3da:	469a      	mov	sl, r3
 800f3dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3e0:	b10a      	cbz	r2, 800f3e6 <_vfiprintf_r+0x86>
 800f3e2:	2a25      	cmp	r2, #37	; 0x25
 800f3e4:	d1f9      	bne.n	800f3da <_vfiprintf_r+0x7a>
 800f3e6:	ebba 0b04 	subs.w	fp, sl, r4
 800f3ea:	d00b      	beq.n	800f404 <_vfiprintf_r+0xa4>
 800f3ec:	465b      	mov	r3, fp
 800f3ee:	4622      	mov	r2, r4
 800f3f0:	4629      	mov	r1, r5
 800f3f2:	4630      	mov	r0, r6
 800f3f4:	f7ff ffa2 	bl	800f33c <__sfputs_r>
 800f3f8:	3001      	adds	r0, #1
 800f3fa:	f000 80a9 	beq.w	800f550 <_vfiprintf_r+0x1f0>
 800f3fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f400:	445a      	add	r2, fp
 800f402:	9209      	str	r2, [sp, #36]	; 0x24
 800f404:	f89a 3000 	ldrb.w	r3, [sl]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	f000 80a1 	beq.w	800f550 <_vfiprintf_r+0x1f0>
 800f40e:	2300      	movs	r3, #0
 800f410:	f04f 32ff 	mov.w	r2, #4294967295
 800f414:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f418:	f10a 0a01 	add.w	sl, sl, #1
 800f41c:	9304      	str	r3, [sp, #16]
 800f41e:	9307      	str	r3, [sp, #28]
 800f420:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f424:	931a      	str	r3, [sp, #104]	; 0x68
 800f426:	4654      	mov	r4, sl
 800f428:	2205      	movs	r2, #5
 800f42a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f42e:	4854      	ldr	r0, [pc, #336]	; (800f580 <_vfiprintf_r+0x220>)
 800f430:	f7f0 fede 	bl	80001f0 <memchr>
 800f434:	9a04      	ldr	r2, [sp, #16]
 800f436:	b9d8      	cbnz	r0, 800f470 <_vfiprintf_r+0x110>
 800f438:	06d1      	lsls	r1, r2, #27
 800f43a:	bf44      	itt	mi
 800f43c:	2320      	movmi	r3, #32
 800f43e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f442:	0713      	lsls	r3, r2, #28
 800f444:	bf44      	itt	mi
 800f446:	232b      	movmi	r3, #43	; 0x2b
 800f448:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f44c:	f89a 3000 	ldrb.w	r3, [sl]
 800f450:	2b2a      	cmp	r3, #42	; 0x2a
 800f452:	d015      	beq.n	800f480 <_vfiprintf_r+0x120>
 800f454:	9a07      	ldr	r2, [sp, #28]
 800f456:	4654      	mov	r4, sl
 800f458:	2000      	movs	r0, #0
 800f45a:	f04f 0c0a 	mov.w	ip, #10
 800f45e:	4621      	mov	r1, r4
 800f460:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f464:	3b30      	subs	r3, #48	; 0x30
 800f466:	2b09      	cmp	r3, #9
 800f468:	d94d      	bls.n	800f506 <_vfiprintf_r+0x1a6>
 800f46a:	b1b0      	cbz	r0, 800f49a <_vfiprintf_r+0x13a>
 800f46c:	9207      	str	r2, [sp, #28]
 800f46e:	e014      	b.n	800f49a <_vfiprintf_r+0x13a>
 800f470:	eba0 0308 	sub.w	r3, r0, r8
 800f474:	fa09 f303 	lsl.w	r3, r9, r3
 800f478:	4313      	orrs	r3, r2
 800f47a:	9304      	str	r3, [sp, #16]
 800f47c:	46a2      	mov	sl, r4
 800f47e:	e7d2      	b.n	800f426 <_vfiprintf_r+0xc6>
 800f480:	9b03      	ldr	r3, [sp, #12]
 800f482:	1d19      	adds	r1, r3, #4
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	9103      	str	r1, [sp, #12]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	bfbb      	ittet	lt
 800f48c:	425b      	neglt	r3, r3
 800f48e:	f042 0202 	orrlt.w	r2, r2, #2
 800f492:	9307      	strge	r3, [sp, #28]
 800f494:	9307      	strlt	r3, [sp, #28]
 800f496:	bfb8      	it	lt
 800f498:	9204      	strlt	r2, [sp, #16]
 800f49a:	7823      	ldrb	r3, [r4, #0]
 800f49c:	2b2e      	cmp	r3, #46	; 0x2e
 800f49e:	d10c      	bne.n	800f4ba <_vfiprintf_r+0x15a>
 800f4a0:	7863      	ldrb	r3, [r4, #1]
 800f4a2:	2b2a      	cmp	r3, #42	; 0x2a
 800f4a4:	d134      	bne.n	800f510 <_vfiprintf_r+0x1b0>
 800f4a6:	9b03      	ldr	r3, [sp, #12]
 800f4a8:	1d1a      	adds	r2, r3, #4
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	9203      	str	r2, [sp, #12]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	bfb8      	it	lt
 800f4b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800f4b6:	3402      	adds	r4, #2
 800f4b8:	9305      	str	r3, [sp, #20]
 800f4ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f590 <_vfiprintf_r+0x230>
 800f4be:	7821      	ldrb	r1, [r4, #0]
 800f4c0:	2203      	movs	r2, #3
 800f4c2:	4650      	mov	r0, sl
 800f4c4:	f7f0 fe94 	bl	80001f0 <memchr>
 800f4c8:	b138      	cbz	r0, 800f4da <_vfiprintf_r+0x17a>
 800f4ca:	9b04      	ldr	r3, [sp, #16]
 800f4cc:	eba0 000a 	sub.w	r0, r0, sl
 800f4d0:	2240      	movs	r2, #64	; 0x40
 800f4d2:	4082      	lsls	r2, r0
 800f4d4:	4313      	orrs	r3, r2
 800f4d6:	3401      	adds	r4, #1
 800f4d8:	9304      	str	r3, [sp, #16]
 800f4da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4de:	4829      	ldr	r0, [pc, #164]	; (800f584 <_vfiprintf_r+0x224>)
 800f4e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f4e4:	2206      	movs	r2, #6
 800f4e6:	f7f0 fe83 	bl	80001f0 <memchr>
 800f4ea:	2800      	cmp	r0, #0
 800f4ec:	d03f      	beq.n	800f56e <_vfiprintf_r+0x20e>
 800f4ee:	4b26      	ldr	r3, [pc, #152]	; (800f588 <_vfiprintf_r+0x228>)
 800f4f0:	bb1b      	cbnz	r3, 800f53a <_vfiprintf_r+0x1da>
 800f4f2:	9b03      	ldr	r3, [sp, #12]
 800f4f4:	3307      	adds	r3, #7
 800f4f6:	f023 0307 	bic.w	r3, r3, #7
 800f4fa:	3308      	adds	r3, #8
 800f4fc:	9303      	str	r3, [sp, #12]
 800f4fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f500:	443b      	add	r3, r7
 800f502:	9309      	str	r3, [sp, #36]	; 0x24
 800f504:	e768      	b.n	800f3d8 <_vfiprintf_r+0x78>
 800f506:	fb0c 3202 	mla	r2, ip, r2, r3
 800f50a:	460c      	mov	r4, r1
 800f50c:	2001      	movs	r0, #1
 800f50e:	e7a6      	b.n	800f45e <_vfiprintf_r+0xfe>
 800f510:	2300      	movs	r3, #0
 800f512:	3401      	adds	r4, #1
 800f514:	9305      	str	r3, [sp, #20]
 800f516:	4619      	mov	r1, r3
 800f518:	f04f 0c0a 	mov.w	ip, #10
 800f51c:	4620      	mov	r0, r4
 800f51e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f522:	3a30      	subs	r2, #48	; 0x30
 800f524:	2a09      	cmp	r2, #9
 800f526:	d903      	bls.n	800f530 <_vfiprintf_r+0x1d0>
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d0c6      	beq.n	800f4ba <_vfiprintf_r+0x15a>
 800f52c:	9105      	str	r1, [sp, #20]
 800f52e:	e7c4      	b.n	800f4ba <_vfiprintf_r+0x15a>
 800f530:	fb0c 2101 	mla	r1, ip, r1, r2
 800f534:	4604      	mov	r4, r0
 800f536:	2301      	movs	r3, #1
 800f538:	e7f0      	b.n	800f51c <_vfiprintf_r+0x1bc>
 800f53a:	ab03      	add	r3, sp, #12
 800f53c:	9300      	str	r3, [sp, #0]
 800f53e:	462a      	mov	r2, r5
 800f540:	4b12      	ldr	r3, [pc, #72]	; (800f58c <_vfiprintf_r+0x22c>)
 800f542:	a904      	add	r1, sp, #16
 800f544:	4630      	mov	r0, r6
 800f546:	f3af 8000 	nop.w
 800f54a:	4607      	mov	r7, r0
 800f54c:	1c78      	adds	r0, r7, #1
 800f54e:	d1d6      	bne.n	800f4fe <_vfiprintf_r+0x19e>
 800f550:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f552:	07d9      	lsls	r1, r3, #31
 800f554:	d405      	bmi.n	800f562 <_vfiprintf_r+0x202>
 800f556:	89ab      	ldrh	r3, [r5, #12]
 800f558:	059a      	lsls	r2, r3, #22
 800f55a:	d402      	bmi.n	800f562 <_vfiprintf_r+0x202>
 800f55c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f55e:	f7ff fcd1 	bl	800ef04 <__retarget_lock_release_recursive>
 800f562:	89ab      	ldrh	r3, [r5, #12]
 800f564:	065b      	lsls	r3, r3, #25
 800f566:	f53f af1d 	bmi.w	800f3a4 <_vfiprintf_r+0x44>
 800f56a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f56c:	e71c      	b.n	800f3a8 <_vfiprintf_r+0x48>
 800f56e:	ab03      	add	r3, sp, #12
 800f570:	9300      	str	r3, [sp, #0]
 800f572:	462a      	mov	r2, r5
 800f574:	4b05      	ldr	r3, [pc, #20]	; (800f58c <_vfiprintf_r+0x22c>)
 800f576:	a904      	add	r1, sp, #16
 800f578:	4630      	mov	r0, r6
 800f57a:	f000 f879 	bl	800f670 <_printf_i>
 800f57e:	e7e4      	b.n	800f54a <_vfiprintf_r+0x1ea>
 800f580:	080119e3 	.word	0x080119e3
 800f584:	080119ed 	.word	0x080119ed
 800f588:	00000000 	.word	0x00000000
 800f58c:	0800f33d 	.word	0x0800f33d
 800f590:	080119e9 	.word	0x080119e9

0800f594 <_printf_common>:
 800f594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f598:	4616      	mov	r6, r2
 800f59a:	4699      	mov	r9, r3
 800f59c:	688a      	ldr	r2, [r1, #8]
 800f59e:	690b      	ldr	r3, [r1, #16]
 800f5a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f5a4:	4293      	cmp	r3, r2
 800f5a6:	bfb8      	it	lt
 800f5a8:	4613      	movlt	r3, r2
 800f5aa:	6033      	str	r3, [r6, #0]
 800f5ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f5b0:	4607      	mov	r7, r0
 800f5b2:	460c      	mov	r4, r1
 800f5b4:	b10a      	cbz	r2, 800f5ba <_printf_common+0x26>
 800f5b6:	3301      	adds	r3, #1
 800f5b8:	6033      	str	r3, [r6, #0]
 800f5ba:	6823      	ldr	r3, [r4, #0]
 800f5bc:	0699      	lsls	r1, r3, #26
 800f5be:	bf42      	ittt	mi
 800f5c0:	6833      	ldrmi	r3, [r6, #0]
 800f5c2:	3302      	addmi	r3, #2
 800f5c4:	6033      	strmi	r3, [r6, #0]
 800f5c6:	6825      	ldr	r5, [r4, #0]
 800f5c8:	f015 0506 	ands.w	r5, r5, #6
 800f5cc:	d106      	bne.n	800f5dc <_printf_common+0x48>
 800f5ce:	f104 0a19 	add.w	sl, r4, #25
 800f5d2:	68e3      	ldr	r3, [r4, #12]
 800f5d4:	6832      	ldr	r2, [r6, #0]
 800f5d6:	1a9b      	subs	r3, r3, r2
 800f5d8:	42ab      	cmp	r3, r5
 800f5da:	dc26      	bgt.n	800f62a <_printf_common+0x96>
 800f5dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f5e0:	1e13      	subs	r3, r2, #0
 800f5e2:	6822      	ldr	r2, [r4, #0]
 800f5e4:	bf18      	it	ne
 800f5e6:	2301      	movne	r3, #1
 800f5e8:	0692      	lsls	r2, r2, #26
 800f5ea:	d42b      	bmi.n	800f644 <_printf_common+0xb0>
 800f5ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f5f0:	4649      	mov	r1, r9
 800f5f2:	4638      	mov	r0, r7
 800f5f4:	47c0      	blx	r8
 800f5f6:	3001      	adds	r0, #1
 800f5f8:	d01e      	beq.n	800f638 <_printf_common+0xa4>
 800f5fa:	6823      	ldr	r3, [r4, #0]
 800f5fc:	6922      	ldr	r2, [r4, #16]
 800f5fe:	f003 0306 	and.w	r3, r3, #6
 800f602:	2b04      	cmp	r3, #4
 800f604:	bf02      	ittt	eq
 800f606:	68e5      	ldreq	r5, [r4, #12]
 800f608:	6833      	ldreq	r3, [r6, #0]
 800f60a:	1aed      	subeq	r5, r5, r3
 800f60c:	68a3      	ldr	r3, [r4, #8]
 800f60e:	bf0c      	ite	eq
 800f610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f614:	2500      	movne	r5, #0
 800f616:	4293      	cmp	r3, r2
 800f618:	bfc4      	itt	gt
 800f61a:	1a9b      	subgt	r3, r3, r2
 800f61c:	18ed      	addgt	r5, r5, r3
 800f61e:	2600      	movs	r6, #0
 800f620:	341a      	adds	r4, #26
 800f622:	42b5      	cmp	r5, r6
 800f624:	d11a      	bne.n	800f65c <_printf_common+0xc8>
 800f626:	2000      	movs	r0, #0
 800f628:	e008      	b.n	800f63c <_printf_common+0xa8>
 800f62a:	2301      	movs	r3, #1
 800f62c:	4652      	mov	r2, sl
 800f62e:	4649      	mov	r1, r9
 800f630:	4638      	mov	r0, r7
 800f632:	47c0      	blx	r8
 800f634:	3001      	adds	r0, #1
 800f636:	d103      	bne.n	800f640 <_printf_common+0xac>
 800f638:	f04f 30ff 	mov.w	r0, #4294967295
 800f63c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f640:	3501      	adds	r5, #1
 800f642:	e7c6      	b.n	800f5d2 <_printf_common+0x3e>
 800f644:	18e1      	adds	r1, r4, r3
 800f646:	1c5a      	adds	r2, r3, #1
 800f648:	2030      	movs	r0, #48	; 0x30
 800f64a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f64e:	4422      	add	r2, r4
 800f650:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f654:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f658:	3302      	adds	r3, #2
 800f65a:	e7c7      	b.n	800f5ec <_printf_common+0x58>
 800f65c:	2301      	movs	r3, #1
 800f65e:	4622      	mov	r2, r4
 800f660:	4649      	mov	r1, r9
 800f662:	4638      	mov	r0, r7
 800f664:	47c0      	blx	r8
 800f666:	3001      	adds	r0, #1
 800f668:	d0e6      	beq.n	800f638 <_printf_common+0xa4>
 800f66a:	3601      	adds	r6, #1
 800f66c:	e7d9      	b.n	800f622 <_printf_common+0x8e>
	...

0800f670 <_printf_i>:
 800f670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f674:	7e0f      	ldrb	r7, [r1, #24]
 800f676:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f678:	2f78      	cmp	r7, #120	; 0x78
 800f67a:	4691      	mov	r9, r2
 800f67c:	4680      	mov	r8, r0
 800f67e:	460c      	mov	r4, r1
 800f680:	469a      	mov	sl, r3
 800f682:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f686:	d807      	bhi.n	800f698 <_printf_i+0x28>
 800f688:	2f62      	cmp	r7, #98	; 0x62
 800f68a:	d80a      	bhi.n	800f6a2 <_printf_i+0x32>
 800f68c:	2f00      	cmp	r7, #0
 800f68e:	f000 80d4 	beq.w	800f83a <_printf_i+0x1ca>
 800f692:	2f58      	cmp	r7, #88	; 0x58
 800f694:	f000 80c0 	beq.w	800f818 <_printf_i+0x1a8>
 800f698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f69c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f6a0:	e03a      	b.n	800f718 <_printf_i+0xa8>
 800f6a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f6a6:	2b15      	cmp	r3, #21
 800f6a8:	d8f6      	bhi.n	800f698 <_printf_i+0x28>
 800f6aa:	a101      	add	r1, pc, #4	; (adr r1, 800f6b0 <_printf_i+0x40>)
 800f6ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f6b0:	0800f709 	.word	0x0800f709
 800f6b4:	0800f71d 	.word	0x0800f71d
 800f6b8:	0800f699 	.word	0x0800f699
 800f6bc:	0800f699 	.word	0x0800f699
 800f6c0:	0800f699 	.word	0x0800f699
 800f6c4:	0800f699 	.word	0x0800f699
 800f6c8:	0800f71d 	.word	0x0800f71d
 800f6cc:	0800f699 	.word	0x0800f699
 800f6d0:	0800f699 	.word	0x0800f699
 800f6d4:	0800f699 	.word	0x0800f699
 800f6d8:	0800f699 	.word	0x0800f699
 800f6dc:	0800f821 	.word	0x0800f821
 800f6e0:	0800f749 	.word	0x0800f749
 800f6e4:	0800f7db 	.word	0x0800f7db
 800f6e8:	0800f699 	.word	0x0800f699
 800f6ec:	0800f699 	.word	0x0800f699
 800f6f0:	0800f843 	.word	0x0800f843
 800f6f4:	0800f699 	.word	0x0800f699
 800f6f8:	0800f749 	.word	0x0800f749
 800f6fc:	0800f699 	.word	0x0800f699
 800f700:	0800f699 	.word	0x0800f699
 800f704:	0800f7e3 	.word	0x0800f7e3
 800f708:	682b      	ldr	r3, [r5, #0]
 800f70a:	1d1a      	adds	r2, r3, #4
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	602a      	str	r2, [r5, #0]
 800f710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f714:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f718:	2301      	movs	r3, #1
 800f71a:	e09f      	b.n	800f85c <_printf_i+0x1ec>
 800f71c:	6820      	ldr	r0, [r4, #0]
 800f71e:	682b      	ldr	r3, [r5, #0]
 800f720:	0607      	lsls	r7, r0, #24
 800f722:	f103 0104 	add.w	r1, r3, #4
 800f726:	6029      	str	r1, [r5, #0]
 800f728:	d501      	bpl.n	800f72e <_printf_i+0xbe>
 800f72a:	681e      	ldr	r6, [r3, #0]
 800f72c:	e003      	b.n	800f736 <_printf_i+0xc6>
 800f72e:	0646      	lsls	r6, r0, #25
 800f730:	d5fb      	bpl.n	800f72a <_printf_i+0xba>
 800f732:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f736:	2e00      	cmp	r6, #0
 800f738:	da03      	bge.n	800f742 <_printf_i+0xd2>
 800f73a:	232d      	movs	r3, #45	; 0x2d
 800f73c:	4276      	negs	r6, r6
 800f73e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f742:	485a      	ldr	r0, [pc, #360]	; (800f8ac <_printf_i+0x23c>)
 800f744:	230a      	movs	r3, #10
 800f746:	e012      	b.n	800f76e <_printf_i+0xfe>
 800f748:	682b      	ldr	r3, [r5, #0]
 800f74a:	6820      	ldr	r0, [r4, #0]
 800f74c:	1d19      	adds	r1, r3, #4
 800f74e:	6029      	str	r1, [r5, #0]
 800f750:	0605      	lsls	r5, r0, #24
 800f752:	d501      	bpl.n	800f758 <_printf_i+0xe8>
 800f754:	681e      	ldr	r6, [r3, #0]
 800f756:	e002      	b.n	800f75e <_printf_i+0xee>
 800f758:	0641      	lsls	r1, r0, #25
 800f75a:	d5fb      	bpl.n	800f754 <_printf_i+0xe4>
 800f75c:	881e      	ldrh	r6, [r3, #0]
 800f75e:	4853      	ldr	r0, [pc, #332]	; (800f8ac <_printf_i+0x23c>)
 800f760:	2f6f      	cmp	r7, #111	; 0x6f
 800f762:	bf0c      	ite	eq
 800f764:	2308      	moveq	r3, #8
 800f766:	230a      	movne	r3, #10
 800f768:	2100      	movs	r1, #0
 800f76a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f76e:	6865      	ldr	r5, [r4, #4]
 800f770:	60a5      	str	r5, [r4, #8]
 800f772:	2d00      	cmp	r5, #0
 800f774:	bfa2      	ittt	ge
 800f776:	6821      	ldrge	r1, [r4, #0]
 800f778:	f021 0104 	bicge.w	r1, r1, #4
 800f77c:	6021      	strge	r1, [r4, #0]
 800f77e:	b90e      	cbnz	r6, 800f784 <_printf_i+0x114>
 800f780:	2d00      	cmp	r5, #0
 800f782:	d04b      	beq.n	800f81c <_printf_i+0x1ac>
 800f784:	4615      	mov	r5, r2
 800f786:	fbb6 f1f3 	udiv	r1, r6, r3
 800f78a:	fb03 6711 	mls	r7, r3, r1, r6
 800f78e:	5dc7      	ldrb	r7, [r0, r7]
 800f790:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f794:	4637      	mov	r7, r6
 800f796:	42bb      	cmp	r3, r7
 800f798:	460e      	mov	r6, r1
 800f79a:	d9f4      	bls.n	800f786 <_printf_i+0x116>
 800f79c:	2b08      	cmp	r3, #8
 800f79e:	d10b      	bne.n	800f7b8 <_printf_i+0x148>
 800f7a0:	6823      	ldr	r3, [r4, #0]
 800f7a2:	07de      	lsls	r6, r3, #31
 800f7a4:	d508      	bpl.n	800f7b8 <_printf_i+0x148>
 800f7a6:	6923      	ldr	r3, [r4, #16]
 800f7a8:	6861      	ldr	r1, [r4, #4]
 800f7aa:	4299      	cmp	r1, r3
 800f7ac:	bfde      	ittt	le
 800f7ae:	2330      	movle	r3, #48	; 0x30
 800f7b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f7b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f7b8:	1b52      	subs	r2, r2, r5
 800f7ba:	6122      	str	r2, [r4, #16]
 800f7bc:	f8cd a000 	str.w	sl, [sp]
 800f7c0:	464b      	mov	r3, r9
 800f7c2:	aa03      	add	r2, sp, #12
 800f7c4:	4621      	mov	r1, r4
 800f7c6:	4640      	mov	r0, r8
 800f7c8:	f7ff fee4 	bl	800f594 <_printf_common>
 800f7cc:	3001      	adds	r0, #1
 800f7ce:	d14a      	bne.n	800f866 <_printf_i+0x1f6>
 800f7d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f7d4:	b004      	add	sp, #16
 800f7d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7da:	6823      	ldr	r3, [r4, #0]
 800f7dc:	f043 0320 	orr.w	r3, r3, #32
 800f7e0:	6023      	str	r3, [r4, #0]
 800f7e2:	4833      	ldr	r0, [pc, #204]	; (800f8b0 <_printf_i+0x240>)
 800f7e4:	2778      	movs	r7, #120	; 0x78
 800f7e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f7ea:	6823      	ldr	r3, [r4, #0]
 800f7ec:	6829      	ldr	r1, [r5, #0]
 800f7ee:	061f      	lsls	r7, r3, #24
 800f7f0:	f851 6b04 	ldr.w	r6, [r1], #4
 800f7f4:	d402      	bmi.n	800f7fc <_printf_i+0x18c>
 800f7f6:	065f      	lsls	r7, r3, #25
 800f7f8:	bf48      	it	mi
 800f7fa:	b2b6      	uxthmi	r6, r6
 800f7fc:	07df      	lsls	r7, r3, #31
 800f7fe:	bf48      	it	mi
 800f800:	f043 0320 	orrmi.w	r3, r3, #32
 800f804:	6029      	str	r1, [r5, #0]
 800f806:	bf48      	it	mi
 800f808:	6023      	strmi	r3, [r4, #0]
 800f80a:	b91e      	cbnz	r6, 800f814 <_printf_i+0x1a4>
 800f80c:	6823      	ldr	r3, [r4, #0]
 800f80e:	f023 0320 	bic.w	r3, r3, #32
 800f812:	6023      	str	r3, [r4, #0]
 800f814:	2310      	movs	r3, #16
 800f816:	e7a7      	b.n	800f768 <_printf_i+0xf8>
 800f818:	4824      	ldr	r0, [pc, #144]	; (800f8ac <_printf_i+0x23c>)
 800f81a:	e7e4      	b.n	800f7e6 <_printf_i+0x176>
 800f81c:	4615      	mov	r5, r2
 800f81e:	e7bd      	b.n	800f79c <_printf_i+0x12c>
 800f820:	682b      	ldr	r3, [r5, #0]
 800f822:	6826      	ldr	r6, [r4, #0]
 800f824:	6961      	ldr	r1, [r4, #20]
 800f826:	1d18      	adds	r0, r3, #4
 800f828:	6028      	str	r0, [r5, #0]
 800f82a:	0635      	lsls	r5, r6, #24
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	d501      	bpl.n	800f834 <_printf_i+0x1c4>
 800f830:	6019      	str	r1, [r3, #0]
 800f832:	e002      	b.n	800f83a <_printf_i+0x1ca>
 800f834:	0670      	lsls	r0, r6, #25
 800f836:	d5fb      	bpl.n	800f830 <_printf_i+0x1c0>
 800f838:	8019      	strh	r1, [r3, #0]
 800f83a:	2300      	movs	r3, #0
 800f83c:	6123      	str	r3, [r4, #16]
 800f83e:	4615      	mov	r5, r2
 800f840:	e7bc      	b.n	800f7bc <_printf_i+0x14c>
 800f842:	682b      	ldr	r3, [r5, #0]
 800f844:	1d1a      	adds	r2, r3, #4
 800f846:	602a      	str	r2, [r5, #0]
 800f848:	681d      	ldr	r5, [r3, #0]
 800f84a:	6862      	ldr	r2, [r4, #4]
 800f84c:	2100      	movs	r1, #0
 800f84e:	4628      	mov	r0, r5
 800f850:	f7f0 fcce 	bl	80001f0 <memchr>
 800f854:	b108      	cbz	r0, 800f85a <_printf_i+0x1ea>
 800f856:	1b40      	subs	r0, r0, r5
 800f858:	6060      	str	r0, [r4, #4]
 800f85a:	6863      	ldr	r3, [r4, #4]
 800f85c:	6123      	str	r3, [r4, #16]
 800f85e:	2300      	movs	r3, #0
 800f860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f864:	e7aa      	b.n	800f7bc <_printf_i+0x14c>
 800f866:	6923      	ldr	r3, [r4, #16]
 800f868:	462a      	mov	r2, r5
 800f86a:	4649      	mov	r1, r9
 800f86c:	4640      	mov	r0, r8
 800f86e:	47d0      	blx	sl
 800f870:	3001      	adds	r0, #1
 800f872:	d0ad      	beq.n	800f7d0 <_printf_i+0x160>
 800f874:	6823      	ldr	r3, [r4, #0]
 800f876:	079b      	lsls	r3, r3, #30
 800f878:	d413      	bmi.n	800f8a2 <_printf_i+0x232>
 800f87a:	68e0      	ldr	r0, [r4, #12]
 800f87c:	9b03      	ldr	r3, [sp, #12]
 800f87e:	4298      	cmp	r0, r3
 800f880:	bfb8      	it	lt
 800f882:	4618      	movlt	r0, r3
 800f884:	e7a6      	b.n	800f7d4 <_printf_i+0x164>
 800f886:	2301      	movs	r3, #1
 800f888:	4632      	mov	r2, r6
 800f88a:	4649      	mov	r1, r9
 800f88c:	4640      	mov	r0, r8
 800f88e:	47d0      	blx	sl
 800f890:	3001      	adds	r0, #1
 800f892:	d09d      	beq.n	800f7d0 <_printf_i+0x160>
 800f894:	3501      	adds	r5, #1
 800f896:	68e3      	ldr	r3, [r4, #12]
 800f898:	9903      	ldr	r1, [sp, #12]
 800f89a:	1a5b      	subs	r3, r3, r1
 800f89c:	42ab      	cmp	r3, r5
 800f89e:	dcf2      	bgt.n	800f886 <_printf_i+0x216>
 800f8a0:	e7eb      	b.n	800f87a <_printf_i+0x20a>
 800f8a2:	2500      	movs	r5, #0
 800f8a4:	f104 0619 	add.w	r6, r4, #25
 800f8a8:	e7f5      	b.n	800f896 <_printf_i+0x226>
 800f8aa:	bf00      	nop
 800f8ac:	080119f4 	.word	0x080119f4
 800f8b0:	08011a05 	.word	0x08011a05

0800f8b4 <__swbuf_r>:
 800f8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8b6:	460e      	mov	r6, r1
 800f8b8:	4614      	mov	r4, r2
 800f8ba:	4605      	mov	r5, r0
 800f8bc:	b118      	cbz	r0, 800f8c6 <__swbuf_r+0x12>
 800f8be:	6a03      	ldr	r3, [r0, #32]
 800f8c0:	b90b      	cbnz	r3, 800f8c6 <__swbuf_r+0x12>
 800f8c2:	f7ff fa2b 	bl	800ed1c <__sinit>
 800f8c6:	69a3      	ldr	r3, [r4, #24]
 800f8c8:	60a3      	str	r3, [r4, #8]
 800f8ca:	89a3      	ldrh	r3, [r4, #12]
 800f8cc:	071a      	lsls	r2, r3, #28
 800f8ce:	d525      	bpl.n	800f91c <__swbuf_r+0x68>
 800f8d0:	6923      	ldr	r3, [r4, #16]
 800f8d2:	b31b      	cbz	r3, 800f91c <__swbuf_r+0x68>
 800f8d4:	6823      	ldr	r3, [r4, #0]
 800f8d6:	6922      	ldr	r2, [r4, #16]
 800f8d8:	1a98      	subs	r0, r3, r2
 800f8da:	6963      	ldr	r3, [r4, #20]
 800f8dc:	b2f6      	uxtb	r6, r6
 800f8de:	4283      	cmp	r3, r0
 800f8e0:	4637      	mov	r7, r6
 800f8e2:	dc04      	bgt.n	800f8ee <__swbuf_r+0x3a>
 800f8e4:	4621      	mov	r1, r4
 800f8e6:	4628      	mov	r0, r5
 800f8e8:	f7ff fcc0 	bl	800f26c <_fflush_r>
 800f8ec:	b9e0      	cbnz	r0, 800f928 <__swbuf_r+0x74>
 800f8ee:	68a3      	ldr	r3, [r4, #8]
 800f8f0:	3b01      	subs	r3, #1
 800f8f2:	60a3      	str	r3, [r4, #8]
 800f8f4:	6823      	ldr	r3, [r4, #0]
 800f8f6:	1c5a      	adds	r2, r3, #1
 800f8f8:	6022      	str	r2, [r4, #0]
 800f8fa:	701e      	strb	r6, [r3, #0]
 800f8fc:	6962      	ldr	r2, [r4, #20]
 800f8fe:	1c43      	adds	r3, r0, #1
 800f900:	429a      	cmp	r2, r3
 800f902:	d004      	beq.n	800f90e <__swbuf_r+0x5a>
 800f904:	89a3      	ldrh	r3, [r4, #12]
 800f906:	07db      	lsls	r3, r3, #31
 800f908:	d506      	bpl.n	800f918 <__swbuf_r+0x64>
 800f90a:	2e0a      	cmp	r6, #10
 800f90c:	d104      	bne.n	800f918 <__swbuf_r+0x64>
 800f90e:	4621      	mov	r1, r4
 800f910:	4628      	mov	r0, r5
 800f912:	f7ff fcab 	bl	800f26c <_fflush_r>
 800f916:	b938      	cbnz	r0, 800f928 <__swbuf_r+0x74>
 800f918:	4638      	mov	r0, r7
 800f91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f91c:	4621      	mov	r1, r4
 800f91e:	4628      	mov	r0, r5
 800f920:	f000 f806 	bl	800f930 <__swsetup_r>
 800f924:	2800      	cmp	r0, #0
 800f926:	d0d5      	beq.n	800f8d4 <__swbuf_r+0x20>
 800f928:	f04f 37ff 	mov.w	r7, #4294967295
 800f92c:	e7f4      	b.n	800f918 <__swbuf_r+0x64>
	...

0800f930 <__swsetup_r>:
 800f930:	b538      	push	{r3, r4, r5, lr}
 800f932:	4b2a      	ldr	r3, [pc, #168]	; (800f9dc <__swsetup_r+0xac>)
 800f934:	4605      	mov	r5, r0
 800f936:	6818      	ldr	r0, [r3, #0]
 800f938:	460c      	mov	r4, r1
 800f93a:	b118      	cbz	r0, 800f944 <__swsetup_r+0x14>
 800f93c:	6a03      	ldr	r3, [r0, #32]
 800f93e:	b90b      	cbnz	r3, 800f944 <__swsetup_r+0x14>
 800f940:	f7ff f9ec 	bl	800ed1c <__sinit>
 800f944:	89a3      	ldrh	r3, [r4, #12]
 800f946:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f94a:	0718      	lsls	r0, r3, #28
 800f94c:	d422      	bmi.n	800f994 <__swsetup_r+0x64>
 800f94e:	06d9      	lsls	r1, r3, #27
 800f950:	d407      	bmi.n	800f962 <__swsetup_r+0x32>
 800f952:	2309      	movs	r3, #9
 800f954:	602b      	str	r3, [r5, #0]
 800f956:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f95a:	81a3      	strh	r3, [r4, #12]
 800f95c:	f04f 30ff 	mov.w	r0, #4294967295
 800f960:	e034      	b.n	800f9cc <__swsetup_r+0x9c>
 800f962:	0758      	lsls	r0, r3, #29
 800f964:	d512      	bpl.n	800f98c <__swsetup_r+0x5c>
 800f966:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f968:	b141      	cbz	r1, 800f97c <__swsetup_r+0x4c>
 800f96a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f96e:	4299      	cmp	r1, r3
 800f970:	d002      	beq.n	800f978 <__swsetup_r+0x48>
 800f972:	4628      	mov	r0, r5
 800f974:	f7ff faf4 	bl	800ef60 <_free_r>
 800f978:	2300      	movs	r3, #0
 800f97a:	6363      	str	r3, [r4, #52]	; 0x34
 800f97c:	89a3      	ldrh	r3, [r4, #12]
 800f97e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f982:	81a3      	strh	r3, [r4, #12]
 800f984:	2300      	movs	r3, #0
 800f986:	6063      	str	r3, [r4, #4]
 800f988:	6923      	ldr	r3, [r4, #16]
 800f98a:	6023      	str	r3, [r4, #0]
 800f98c:	89a3      	ldrh	r3, [r4, #12]
 800f98e:	f043 0308 	orr.w	r3, r3, #8
 800f992:	81a3      	strh	r3, [r4, #12]
 800f994:	6923      	ldr	r3, [r4, #16]
 800f996:	b94b      	cbnz	r3, 800f9ac <__swsetup_r+0x7c>
 800f998:	89a3      	ldrh	r3, [r4, #12]
 800f99a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f99e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f9a2:	d003      	beq.n	800f9ac <__swsetup_r+0x7c>
 800f9a4:	4621      	mov	r1, r4
 800f9a6:	4628      	mov	r0, r5
 800f9a8:	f000 f884 	bl	800fab4 <__smakebuf_r>
 800f9ac:	89a0      	ldrh	r0, [r4, #12]
 800f9ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f9b2:	f010 0301 	ands.w	r3, r0, #1
 800f9b6:	d00a      	beq.n	800f9ce <__swsetup_r+0x9e>
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	60a3      	str	r3, [r4, #8]
 800f9bc:	6963      	ldr	r3, [r4, #20]
 800f9be:	425b      	negs	r3, r3
 800f9c0:	61a3      	str	r3, [r4, #24]
 800f9c2:	6923      	ldr	r3, [r4, #16]
 800f9c4:	b943      	cbnz	r3, 800f9d8 <__swsetup_r+0xa8>
 800f9c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f9ca:	d1c4      	bne.n	800f956 <__swsetup_r+0x26>
 800f9cc:	bd38      	pop	{r3, r4, r5, pc}
 800f9ce:	0781      	lsls	r1, r0, #30
 800f9d0:	bf58      	it	pl
 800f9d2:	6963      	ldrpl	r3, [r4, #20]
 800f9d4:	60a3      	str	r3, [r4, #8]
 800f9d6:	e7f4      	b.n	800f9c2 <__swsetup_r+0x92>
 800f9d8:	2000      	movs	r0, #0
 800f9da:	e7f7      	b.n	800f9cc <__swsetup_r+0x9c>
 800f9dc:	200001a0 	.word	0x200001a0

0800f9e0 <_raise_r>:
 800f9e0:	291f      	cmp	r1, #31
 800f9e2:	b538      	push	{r3, r4, r5, lr}
 800f9e4:	4604      	mov	r4, r0
 800f9e6:	460d      	mov	r5, r1
 800f9e8:	d904      	bls.n	800f9f4 <_raise_r+0x14>
 800f9ea:	2316      	movs	r3, #22
 800f9ec:	6003      	str	r3, [r0, #0]
 800f9ee:	f04f 30ff 	mov.w	r0, #4294967295
 800f9f2:	bd38      	pop	{r3, r4, r5, pc}
 800f9f4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f9f6:	b112      	cbz	r2, 800f9fe <_raise_r+0x1e>
 800f9f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f9fc:	b94b      	cbnz	r3, 800fa12 <_raise_r+0x32>
 800f9fe:	4620      	mov	r0, r4
 800fa00:	f000 f830 	bl	800fa64 <_getpid_r>
 800fa04:	462a      	mov	r2, r5
 800fa06:	4601      	mov	r1, r0
 800fa08:	4620      	mov	r0, r4
 800fa0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa0e:	f000 b817 	b.w	800fa40 <_kill_r>
 800fa12:	2b01      	cmp	r3, #1
 800fa14:	d00a      	beq.n	800fa2c <_raise_r+0x4c>
 800fa16:	1c59      	adds	r1, r3, #1
 800fa18:	d103      	bne.n	800fa22 <_raise_r+0x42>
 800fa1a:	2316      	movs	r3, #22
 800fa1c:	6003      	str	r3, [r0, #0]
 800fa1e:	2001      	movs	r0, #1
 800fa20:	e7e7      	b.n	800f9f2 <_raise_r+0x12>
 800fa22:	2400      	movs	r4, #0
 800fa24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fa28:	4628      	mov	r0, r5
 800fa2a:	4798      	blx	r3
 800fa2c:	2000      	movs	r0, #0
 800fa2e:	e7e0      	b.n	800f9f2 <_raise_r+0x12>

0800fa30 <raise>:
 800fa30:	4b02      	ldr	r3, [pc, #8]	; (800fa3c <raise+0xc>)
 800fa32:	4601      	mov	r1, r0
 800fa34:	6818      	ldr	r0, [r3, #0]
 800fa36:	f7ff bfd3 	b.w	800f9e0 <_raise_r>
 800fa3a:	bf00      	nop
 800fa3c:	200001a0 	.word	0x200001a0

0800fa40 <_kill_r>:
 800fa40:	b538      	push	{r3, r4, r5, lr}
 800fa42:	4d07      	ldr	r5, [pc, #28]	; (800fa60 <_kill_r+0x20>)
 800fa44:	2300      	movs	r3, #0
 800fa46:	4604      	mov	r4, r0
 800fa48:	4608      	mov	r0, r1
 800fa4a:	4611      	mov	r1, r2
 800fa4c:	602b      	str	r3, [r5, #0]
 800fa4e:	f7f2 fbc7 	bl	80021e0 <_kill>
 800fa52:	1c43      	adds	r3, r0, #1
 800fa54:	d102      	bne.n	800fa5c <_kill_r+0x1c>
 800fa56:	682b      	ldr	r3, [r5, #0]
 800fa58:	b103      	cbz	r3, 800fa5c <_kill_r+0x1c>
 800fa5a:	6023      	str	r3, [r4, #0]
 800fa5c:	bd38      	pop	{r3, r4, r5, pc}
 800fa5e:	bf00      	nop
 800fa60:	2000a6bc 	.word	0x2000a6bc

0800fa64 <_getpid_r>:
 800fa64:	f7f2 bbb4 	b.w	80021d0 <_getpid>

0800fa68 <__swhatbuf_r>:
 800fa68:	b570      	push	{r4, r5, r6, lr}
 800fa6a:	460c      	mov	r4, r1
 800fa6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa70:	2900      	cmp	r1, #0
 800fa72:	b096      	sub	sp, #88	; 0x58
 800fa74:	4615      	mov	r5, r2
 800fa76:	461e      	mov	r6, r3
 800fa78:	da0d      	bge.n	800fa96 <__swhatbuf_r+0x2e>
 800fa7a:	89a3      	ldrh	r3, [r4, #12]
 800fa7c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fa80:	f04f 0100 	mov.w	r1, #0
 800fa84:	bf0c      	ite	eq
 800fa86:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800fa8a:	2340      	movne	r3, #64	; 0x40
 800fa8c:	2000      	movs	r0, #0
 800fa8e:	6031      	str	r1, [r6, #0]
 800fa90:	602b      	str	r3, [r5, #0]
 800fa92:	b016      	add	sp, #88	; 0x58
 800fa94:	bd70      	pop	{r4, r5, r6, pc}
 800fa96:	466a      	mov	r2, sp
 800fa98:	f000 f848 	bl	800fb2c <_fstat_r>
 800fa9c:	2800      	cmp	r0, #0
 800fa9e:	dbec      	blt.n	800fa7a <__swhatbuf_r+0x12>
 800faa0:	9901      	ldr	r1, [sp, #4]
 800faa2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800faa6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800faaa:	4259      	negs	r1, r3
 800faac:	4159      	adcs	r1, r3
 800faae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fab2:	e7eb      	b.n	800fa8c <__swhatbuf_r+0x24>

0800fab4 <__smakebuf_r>:
 800fab4:	898b      	ldrh	r3, [r1, #12]
 800fab6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fab8:	079d      	lsls	r5, r3, #30
 800faba:	4606      	mov	r6, r0
 800fabc:	460c      	mov	r4, r1
 800fabe:	d507      	bpl.n	800fad0 <__smakebuf_r+0x1c>
 800fac0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fac4:	6023      	str	r3, [r4, #0]
 800fac6:	6123      	str	r3, [r4, #16]
 800fac8:	2301      	movs	r3, #1
 800faca:	6163      	str	r3, [r4, #20]
 800facc:	b002      	add	sp, #8
 800face:	bd70      	pop	{r4, r5, r6, pc}
 800fad0:	ab01      	add	r3, sp, #4
 800fad2:	466a      	mov	r2, sp
 800fad4:	f7ff ffc8 	bl	800fa68 <__swhatbuf_r>
 800fad8:	9900      	ldr	r1, [sp, #0]
 800fada:	4605      	mov	r5, r0
 800fadc:	4630      	mov	r0, r6
 800fade:	f7ff fab3 	bl	800f048 <_malloc_r>
 800fae2:	b948      	cbnz	r0, 800faf8 <__smakebuf_r+0x44>
 800fae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fae8:	059a      	lsls	r2, r3, #22
 800faea:	d4ef      	bmi.n	800facc <__smakebuf_r+0x18>
 800faec:	f023 0303 	bic.w	r3, r3, #3
 800faf0:	f043 0302 	orr.w	r3, r3, #2
 800faf4:	81a3      	strh	r3, [r4, #12]
 800faf6:	e7e3      	b.n	800fac0 <__smakebuf_r+0xc>
 800faf8:	89a3      	ldrh	r3, [r4, #12]
 800fafa:	6020      	str	r0, [r4, #0]
 800fafc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb00:	81a3      	strh	r3, [r4, #12]
 800fb02:	9b00      	ldr	r3, [sp, #0]
 800fb04:	6163      	str	r3, [r4, #20]
 800fb06:	9b01      	ldr	r3, [sp, #4]
 800fb08:	6120      	str	r0, [r4, #16]
 800fb0a:	b15b      	cbz	r3, 800fb24 <__smakebuf_r+0x70>
 800fb0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb10:	4630      	mov	r0, r6
 800fb12:	f000 f81d 	bl	800fb50 <_isatty_r>
 800fb16:	b128      	cbz	r0, 800fb24 <__smakebuf_r+0x70>
 800fb18:	89a3      	ldrh	r3, [r4, #12]
 800fb1a:	f023 0303 	bic.w	r3, r3, #3
 800fb1e:	f043 0301 	orr.w	r3, r3, #1
 800fb22:	81a3      	strh	r3, [r4, #12]
 800fb24:	89a3      	ldrh	r3, [r4, #12]
 800fb26:	431d      	orrs	r5, r3
 800fb28:	81a5      	strh	r5, [r4, #12]
 800fb2a:	e7cf      	b.n	800facc <__smakebuf_r+0x18>

0800fb2c <_fstat_r>:
 800fb2c:	b538      	push	{r3, r4, r5, lr}
 800fb2e:	4d07      	ldr	r5, [pc, #28]	; (800fb4c <_fstat_r+0x20>)
 800fb30:	2300      	movs	r3, #0
 800fb32:	4604      	mov	r4, r0
 800fb34:	4608      	mov	r0, r1
 800fb36:	4611      	mov	r1, r2
 800fb38:	602b      	str	r3, [r5, #0]
 800fb3a:	f7f2 fbb0 	bl	800229e <_fstat>
 800fb3e:	1c43      	adds	r3, r0, #1
 800fb40:	d102      	bne.n	800fb48 <_fstat_r+0x1c>
 800fb42:	682b      	ldr	r3, [r5, #0]
 800fb44:	b103      	cbz	r3, 800fb48 <_fstat_r+0x1c>
 800fb46:	6023      	str	r3, [r4, #0]
 800fb48:	bd38      	pop	{r3, r4, r5, pc}
 800fb4a:	bf00      	nop
 800fb4c:	2000a6bc 	.word	0x2000a6bc

0800fb50 <_isatty_r>:
 800fb50:	b538      	push	{r3, r4, r5, lr}
 800fb52:	4d06      	ldr	r5, [pc, #24]	; (800fb6c <_isatty_r+0x1c>)
 800fb54:	2300      	movs	r3, #0
 800fb56:	4604      	mov	r4, r0
 800fb58:	4608      	mov	r0, r1
 800fb5a:	602b      	str	r3, [r5, #0]
 800fb5c:	f7f2 fbaf 	bl	80022be <_isatty>
 800fb60:	1c43      	adds	r3, r0, #1
 800fb62:	d102      	bne.n	800fb6a <_isatty_r+0x1a>
 800fb64:	682b      	ldr	r3, [r5, #0]
 800fb66:	b103      	cbz	r3, 800fb6a <_isatty_r+0x1a>
 800fb68:	6023      	str	r3, [r4, #0]
 800fb6a:	bd38      	pop	{r3, r4, r5, pc}
 800fb6c:	2000a6bc 	.word	0x2000a6bc

0800fb70 <sqrt>:
 800fb70:	b538      	push	{r3, r4, r5, lr}
 800fb72:	ed2d 8b02 	vpush	{d8}
 800fb76:	ec55 4b10 	vmov	r4, r5, d0
 800fb7a:	f000 f825 	bl	800fbc8 <__ieee754_sqrt>
 800fb7e:	4622      	mov	r2, r4
 800fb80:	462b      	mov	r3, r5
 800fb82:	4620      	mov	r0, r4
 800fb84:	4629      	mov	r1, r5
 800fb86:	eeb0 8a40 	vmov.f32	s16, s0
 800fb8a:	eef0 8a60 	vmov.f32	s17, s1
 800fb8e:	f7f0 ffd5 	bl	8000b3c <__aeabi_dcmpun>
 800fb92:	b990      	cbnz	r0, 800fbba <sqrt+0x4a>
 800fb94:	2200      	movs	r2, #0
 800fb96:	2300      	movs	r3, #0
 800fb98:	4620      	mov	r0, r4
 800fb9a:	4629      	mov	r1, r5
 800fb9c:	f7f0 ffa6 	bl	8000aec <__aeabi_dcmplt>
 800fba0:	b158      	cbz	r0, 800fbba <sqrt+0x4a>
 800fba2:	f7ff f983 	bl	800eeac <__errno>
 800fba6:	2321      	movs	r3, #33	; 0x21
 800fba8:	6003      	str	r3, [r0, #0]
 800fbaa:	2200      	movs	r2, #0
 800fbac:	2300      	movs	r3, #0
 800fbae:	4610      	mov	r0, r2
 800fbb0:	4619      	mov	r1, r3
 800fbb2:	f7f0 fe53 	bl	800085c <__aeabi_ddiv>
 800fbb6:	ec41 0b18 	vmov	d8, r0, r1
 800fbba:	eeb0 0a48 	vmov.f32	s0, s16
 800fbbe:	eef0 0a68 	vmov.f32	s1, s17
 800fbc2:	ecbd 8b02 	vpop	{d8}
 800fbc6:	bd38      	pop	{r3, r4, r5, pc}

0800fbc8 <__ieee754_sqrt>:
 800fbc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbcc:	ec55 4b10 	vmov	r4, r5, d0
 800fbd0:	4e67      	ldr	r6, [pc, #412]	; (800fd70 <__ieee754_sqrt+0x1a8>)
 800fbd2:	43ae      	bics	r6, r5
 800fbd4:	ee10 0a10 	vmov	r0, s0
 800fbd8:	ee10 2a10 	vmov	r2, s0
 800fbdc:	4629      	mov	r1, r5
 800fbde:	462b      	mov	r3, r5
 800fbe0:	d10d      	bne.n	800fbfe <__ieee754_sqrt+0x36>
 800fbe2:	f7f0 fd11 	bl	8000608 <__aeabi_dmul>
 800fbe6:	4602      	mov	r2, r0
 800fbe8:	460b      	mov	r3, r1
 800fbea:	4620      	mov	r0, r4
 800fbec:	4629      	mov	r1, r5
 800fbee:	f7f0 fb55 	bl	800029c <__adddf3>
 800fbf2:	4604      	mov	r4, r0
 800fbf4:	460d      	mov	r5, r1
 800fbf6:	ec45 4b10 	vmov	d0, r4, r5
 800fbfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbfe:	2d00      	cmp	r5, #0
 800fc00:	dc0b      	bgt.n	800fc1a <__ieee754_sqrt+0x52>
 800fc02:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fc06:	4326      	orrs	r6, r4
 800fc08:	d0f5      	beq.n	800fbf6 <__ieee754_sqrt+0x2e>
 800fc0a:	b135      	cbz	r5, 800fc1a <__ieee754_sqrt+0x52>
 800fc0c:	f7f0 fb44 	bl	8000298 <__aeabi_dsub>
 800fc10:	4602      	mov	r2, r0
 800fc12:	460b      	mov	r3, r1
 800fc14:	f7f0 fe22 	bl	800085c <__aeabi_ddiv>
 800fc18:	e7eb      	b.n	800fbf2 <__ieee754_sqrt+0x2a>
 800fc1a:	1509      	asrs	r1, r1, #20
 800fc1c:	f000 808d 	beq.w	800fd3a <__ieee754_sqrt+0x172>
 800fc20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc24:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800fc28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fc2c:	07c9      	lsls	r1, r1, #31
 800fc2e:	bf5c      	itt	pl
 800fc30:	005b      	lslpl	r3, r3, #1
 800fc32:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800fc36:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fc3a:	bf58      	it	pl
 800fc3c:	0052      	lslpl	r2, r2, #1
 800fc3e:	2500      	movs	r5, #0
 800fc40:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fc44:	1076      	asrs	r6, r6, #1
 800fc46:	0052      	lsls	r2, r2, #1
 800fc48:	f04f 0e16 	mov.w	lr, #22
 800fc4c:	46ac      	mov	ip, r5
 800fc4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fc52:	eb0c 0001 	add.w	r0, ip, r1
 800fc56:	4298      	cmp	r0, r3
 800fc58:	bfde      	ittt	le
 800fc5a:	1a1b      	suble	r3, r3, r0
 800fc5c:	eb00 0c01 	addle.w	ip, r0, r1
 800fc60:	186d      	addle	r5, r5, r1
 800fc62:	005b      	lsls	r3, r3, #1
 800fc64:	f1be 0e01 	subs.w	lr, lr, #1
 800fc68:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fc6c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fc70:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800fc74:	d1ed      	bne.n	800fc52 <__ieee754_sqrt+0x8a>
 800fc76:	4674      	mov	r4, lr
 800fc78:	2720      	movs	r7, #32
 800fc7a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800fc7e:	4563      	cmp	r3, ip
 800fc80:	eb01 000e 	add.w	r0, r1, lr
 800fc84:	dc02      	bgt.n	800fc8c <__ieee754_sqrt+0xc4>
 800fc86:	d113      	bne.n	800fcb0 <__ieee754_sqrt+0xe8>
 800fc88:	4290      	cmp	r0, r2
 800fc8a:	d811      	bhi.n	800fcb0 <__ieee754_sqrt+0xe8>
 800fc8c:	2800      	cmp	r0, #0
 800fc8e:	eb00 0e01 	add.w	lr, r0, r1
 800fc92:	da57      	bge.n	800fd44 <__ieee754_sqrt+0x17c>
 800fc94:	f1be 0f00 	cmp.w	lr, #0
 800fc98:	db54      	blt.n	800fd44 <__ieee754_sqrt+0x17c>
 800fc9a:	f10c 0801 	add.w	r8, ip, #1
 800fc9e:	eba3 030c 	sub.w	r3, r3, ip
 800fca2:	4290      	cmp	r0, r2
 800fca4:	bf88      	it	hi
 800fca6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800fcaa:	1a12      	subs	r2, r2, r0
 800fcac:	440c      	add	r4, r1
 800fcae:	46c4      	mov	ip, r8
 800fcb0:	005b      	lsls	r3, r3, #1
 800fcb2:	3f01      	subs	r7, #1
 800fcb4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fcb8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fcbc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800fcc0:	d1dd      	bne.n	800fc7e <__ieee754_sqrt+0xb6>
 800fcc2:	4313      	orrs	r3, r2
 800fcc4:	d01b      	beq.n	800fcfe <__ieee754_sqrt+0x136>
 800fcc6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800fd74 <__ieee754_sqrt+0x1ac>
 800fcca:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800fd78 <__ieee754_sqrt+0x1b0>
 800fcce:	e9da 0100 	ldrd	r0, r1, [sl]
 800fcd2:	e9db 2300 	ldrd	r2, r3, [fp]
 800fcd6:	f7f0 fadf 	bl	8000298 <__aeabi_dsub>
 800fcda:	e9da 8900 	ldrd	r8, r9, [sl]
 800fcde:	4602      	mov	r2, r0
 800fce0:	460b      	mov	r3, r1
 800fce2:	4640      	mov	r0, r8
 800fce4:	4649      	mov	r1, r9
 800fce6:	f7f0 ff0b 	bl	8000b00 <__aeabi_dcmple>
 800fcea:	b140      	cbz	r0, 800fcfe <__ieee754_sqrt+0x136>
 800fcec:	f1b4 3fff 	cmp.w	r4, #4294967295
 800fcf0:	e9da 0100 	ldrd	r0, r1, [sl]
 800fcf4:	e9db 2300 	ldrd	r2, r3, [fp]
 800fcf8:	d126      	bne.n	800fd48 <__ieee754_sqrt+0x180>
 800fcfa:	3501      	adds	r5, #1
 800fcfc:	463c      	mov	r4, r7
 800fcfe:	106a      	asrs	r2, r5, #1
 800fd00:	0863      	lsrs	r3, r4, #1
 800fd02:	07e9      	lsls	r1, r5, #31
 800fd04:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800fd08:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800fd0c:	bf48      	it	mi
 800fd0e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800fd12:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800fd16:	461c      	mov	r4, r3
 800fd18:	e76d      	b.n	800fbf6 <__ieee754_sqrt+0x2e>
 800fd1a:	0ad3      	lsrs	r3, r2, #11
 800fd1c:	3815      	subs	r0, #21
 800fd1e:	0552      	lsls	r2, r2, #21
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d0fa      	beq.n	800fd1a <__ieee754_sqrt+0x152>
 800fd24:	02dc      	lsls	r4, r3, #11
 800fd26:	d50a      	bpl.n	800fd3e <__ieee754_sqrt+0x176>
 800fd28:	f1c1 0420 	rsb	r4, r1, #32
 800fd2c:	fa22 f404 	lsr.w	r4, r2, r4
 800fd30:	1e4d      	subs	r5, r1, #1
 800fd32:	408a      	lsls	r2, r1
 800fd34:	4323      	orrs	r3, r4
 800fd36:	1b41      	subs	r1, r0, r5
 800fd38:	e772      	b.n	800fc20 <__ieee754_sqrt+0x58>
 800fd3a:	4608      	mov	r0, r1
 800fd3c:	e7f0      	b.n	800fd20 <__ieee754_sqrt+0x158>
 800fd3e:	005b      	lsls	r3, r3, #1
 800fd40:	3101      	adds	r1, #1
 800fd42:	e7ef      	b.n	800fd24 <__ieee754_sqrt+0x15c>
 800fd44:	46e0      	mov	r8, ip
 800fd46:	e7aa      	b.n	800fc9e <__ieee754_sqrt+0xd6>
 800fd48:	f7f0 faa8 	bl	800029c <__adddf3>
 800fd4c:	e9da 8900 	ldrd	r8, r9, [sl]
 800fd50:	4602      	mov	r2, r0
 800fd52:	460b      	mov	r3, r1
 800fd54:	4640      	mov	r0, r8
 800fd56:	4649      	mov	r1, r9
 800fd58:	f7f0 fec8 	bl	8000aec <__aeabi_dcmplt>
 800fd5c:	b120      	cbz	r0, 800fd68 <__ieee754_sqrt+0x1a0>
 800fd5e:	1ca0      	adds	r0, r4, #2
 800fd60:	bf08      	it	eq
 800fd62:	3501      	addeq	r5, #1
 800fd64:	3402      	adds	r4, #2
 800fd66:	e7ca      	b.n	800fcfe <__ieee754_sqrt+0x136>
 800fd68:	3401      	adds	r4, #1
 800fd6a:	f024 0401 	bic.w	r4, r4, #1
 800fd6e:	e7c6      	b.n	800fcfe <__ieee754_sqrt+0x136>
 800fd70:	7ff00000 	.word	0x7ff00000
 800fd74:	200001a8 	.word	0x200001a8
 800fd78:	200001b0 	.word	0x200001b0

0800fd7c <_init>:
 800fd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd7e:	bf00      	nop
 800fd80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd82:	bc08      	pop	{r3}
 800fd84:	469e      	mov	lr, r3
 800fd86:	4770      	bx	lr

0800fd88 <_fini>:
 800fd88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd8a:	bf00      	nop
 800fd8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd8e:	bc08      	pop	{r3}
 800fd90:	469e      	mov	lr, r3
 800fd92:	4770      	bx	lr
